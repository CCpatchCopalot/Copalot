diff --git a/src/decode.c b/src/decode.c
index b24d1cf9..19734e8e 100644
--- a/src/decode.c
+++ b/src/decode.c
@@ -6220,0 +6221 @@ decode_preR13_auxheader (Bit_Chain *restrict dat, Dwg_Data *restrict dwg)
+  unsigned long pos = dat->byte;
@@ -6278,8 +6279,11 @@ decode_preR13_auxheader (Bit_Chain *restrict dat, Dwg_Data *restrict dwg)
-  crcc = bit_calc_CRC (
-      0xC0C1,
-      &dat->chain[_obj->auxheader_address + 16], // after sentinel (16 bytes)
-      _obj->auxheader_size - 2);                 // minus crc length (2 bytes)
-  crc = bit_read_RS (dat);
-  LOG_TRACE ("crc: %04X [RSx] from 0x%x-0x%lx\n", crc,
-             _obj->auxheader_address + 16, dat->byte - 2);
-  if (crc != crcc)
+  if (_obj->auxheader_address < pos
+      // lower bound
+      || _obj->auxheader_address > UINT32_MAX - 16
+      // upper bound
+      || _obj->auxheader_address + 16 + _obj->auxheader_size > dat->size)
+    {
+      LOG_ERROR ("Invalid auxheader_address %04X", _obj->auxheader_address);
+      error |= DWG_ERR_WRONGCRC;
+      return error;
+    }
+  if (_obj->auxheader_address != pos)
@@ -6287 +6291 @@ decode_preR13_auxheader (Bit_Chain *restrict dat, Dwg_Data *restrict dwg)
-      LOG_ERROR ("AUX header CRC mismatch %04X <=> %04X", crc, crcc);
+      LOG_WARN ("Invalid auxheader_address %04X", _obj->auxheader_address);
@@ -6289,0 +6294,16 @@ decode_preR13_auxheader (Bit_Chain *restrict dat, Dwg_Data *restrict dwg)
+  else
+    {
+      crcc = bit_calc_CRC (0xC0C1,
+                           // after sentinel (16 bytes)
+                           &dat->chain[_obj->auxheader_address + 16],
+                           // minus crc length (2 bytes)
+                           _obj->auxheader_size - 2); 
+      crc = bit_read_RS (dat);
+      LOG_TRACE ("crc: %04X [RSx] from 0x%x-0x%lx\n", crc,
+                 _obj->auxheader_address + 16, dat->byte - 2);
+      if (crc != crcc)
+        {
+          LOG_ERROR ("AUX header CRC mismatch %04X <=> %04X", crc, crcc);
+          error |= DWG_ERR_WRONGCRC;
+        }
+    }
