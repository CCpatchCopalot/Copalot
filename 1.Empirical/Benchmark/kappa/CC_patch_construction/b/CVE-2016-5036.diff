diff --git a/dwarfdump/print_frames.c b/dwarfdump/print_frames.c
old mode 100644
new mode 100755
index 66ba7660..1a26903f
--- a/dwarfdump/print_frames.c
+++ b/dwarfdump/print_frames.c
@@ -78,6 +78,99 @@ safe_strcpy(char *out, long outlen, const char *in, long inlen)
     }
 }
 
+#define MAXLEBLEN 10
+/*
+    decode ULEB
+*/
+static int
+local_dwarf_decode_u_leb128_chk(unsigned char *leb128,
+    unsigned int *leb128_length,
+    Dwarf_Unsigned *value_out,
+    Dwarf_Small *data_end)
+{
+    unsigned char byte = 0;
+    Dwarf_Unsigned number = 0;
+    unsigned int shift = 0;
+    unsigned int byte_length = 1;
+
+    byte = *leb128;
+    if (leb128 >= data_end) {
+        return DW_DLV_ERROR;
+    }
+    for (;;) {
+        number |= (byte & 0x7f) << shift;
+        shift = 7;
+
+        if ((byte & 0x80) == 0) {
+            if (leb128_length != NULL)
+                *leb128_length = byte_length;
+            *value_out = number;
+            return DW_DLV_OK;
+        }
+
+        byte_length;
+        if (byte_length > MAXLEBLEN) {
+            return DW_DLV_ERROR;
+        }
+        leb128;
+        if (leb128 >= data_end) {
+            return DW_DLV_ERROR;
+        }
+        byte = *leb128;
+    }
+    return DW_DLV_ERROR;
+}
+
+#define BITSINBYTE 8
+static int
+local_dwarf_decode_s_leb128_chk(unsigned char *leb128,
+    unsigned int *leb128_length,
+    Dwarf_Signed *value_out,
+    Dwarf_Small *data_end)
+{
+    Dwarf_Signed number = 0;
+    Dwarf_Bool sign = 0;
+    unsigned shift = 0;
+    unsigned char byte = 0;
+    Dwarf_Signed byte_length = 1;
+
+    /*  byte_length being the number of bytes of data absorbed so far in
+        turning the leb into a Dwarf_Signed. */
+
+    if (leb128 >= data_end) {
+        return DW_DLV_ERROR;
+    }
+    byte = *leb128;
+    for (;;) {
+        sign = byte & 0x40;
+        number |= ((Dwarf_Signed) ((byte & 0x7f))) << shift;
+        shift = 7;
+
+        if ((byte & 0x80) == 0) {
+            break;
+        }
+        leb128;
+        if (leb128 >= data_end) {
+            return DW_DLV_ERROR;
+        }
+        if (byte_length > MAXLEBLEN) {
+            return DW_DLV_ERROR;
+        }
+        byte = *leb128;
+        byte_length;
+        
+    }
+
+    if ((shift < sizeof(Dwarf_Signed) * BITSINBYTE) && sign) {
+        number |= -((Dwarf_Signed) 1 << shift);
+    }
+
+    if (leb128_length != NULL)
+        *leb128_length = byte_length;
+    *value_out = number;
+    return DW_DLV_OK;
+}
+
 /* For inlined functions, try to find name */
 static int
 get_abstract_origin_funcname(Dwarf_Debug dbg,Dwarf_Attribute attr,
@@ -107,7 +200,7 @@ get_abstract_origin_funcname(Dwarf_Debug dbg,Dwarf_Attribute attr,
         dwarf_dealloc(dbg,origin_die,DW_DLA_DIE);
         return DW_DLV_NO_ENTRY;
     }
-    for (i = 0; i < atcnt; i++) {
+    for (i = 0; i < atcnt; i) {
         Dwarf_Half lattr = 0;
         int ares = 0;
 
@@ -128,7 +221,7 @@ get_abstract_origin_funcname(Dwarf_Debug dbg,Dwarf_Attribute attr,
             }
         }
     }
-    for (i = 0; i < atcnt; i++) {
+    for (i = 0; i < atcnt; i) {
         dwarf_dealloc(dbg, atlist[i], DW_DLA_ATTR);
     }
     dwarf_dealloc(dbg, atlist, DW_DLA_LIST);
@@ -180,7 +273,7 @@ get_proc_name(Dwarf_Debug dbg, Dwarf_Die die, Dwarf_Addr low_pc,
     if (atres == DW_DLV_NO_ENTRY) {
         return 0;
     }
-    for (i = 0; i < atcnt; i++) {
+    for (i = 0; i < atcnt; i) {
         Dwarf_Half attr = 0;
         int ares = 0;
         char * temps = 0;
@@ -263,7 +356,7 @@ get_proc_name(Dwarf_Debug dbg, Dwarf_Die die, Dwarf_Addr low_pc,
             }
         }
     }
-    for (i = 0; i < atcnt; i++) {
+    for (i = 0; i < atcnt; i) {
         dwarf_dealloc(dbg, atlist[i], DW_DLA_ATTR);
     }
     dwarf_dealloc(dbg, atlist, DW_DLA_LIST);
@@ -474,7 +567,7 @@ get_fde_proc_name(Dwarf_Debug dbg, Dwarf_Addr low_pc,
         } else if (cures == DW_DLV_NO_ENTRY) {
             /* loop thru the list again */
             current_cu_die_for_print_frames = 0;
-            ++looping;
+            looping;
         } else {                /* DW_DLV_OK */
             dres = dwarf_siblingof(dbg, NULL,
                 &current_cu_die_for_print_frames,
@@ -688,7 +781,7 @@ print_one_fde(Dwarf_Debug dbg,
             " length: 0x%" DW_PR_XZEROS  DW_PR_DUx ">",
             fde_index,
             (Dwarf_Unsigned)low_pc,
-            (Dwarf_Unsigned)(low_pc + func_length),
+            (Dwarf_Unsigned)(low_pc  func_length),
             temps ? sanitized(temps) : "",
             (Dwarf_Unsigned)cie_offset,
             (Dwarf_Unsigned)cie_index,
@@ -725,7 +818,7 @@ print_one_fde(Dwarf_Debug dbg,
                 unsigned k2 = 0;
 
                 printf("\n       <eh aug data len 0x%" DW_PR_DUx , len);
-                for (k2 = 0; k2 < len; ++k2) {
+                for (k2 = 0; k2 < len; k2) {
                     if (k2 == 0) {
                         printf(" bytes 0x");
                     }
@@ -742,7 +835,7 @@ print_one_fde(Dwarf_Debug dbg,
         }
     }
 
-    for (j = low_pc; j < low_pc + func_length; j++) {
+    for (j = low_pc; j < low_pc  func_length; j) {
         Dwarf_Half k = 0;
 
         if (config_data->cf_interface_number == 3) {
@@ -790,7 +883,7 @@ print_one_fde(Dwarf_Debug dbg,
                 config_data,
                 offset_relevant, offset, block_ptr);
         }
-        for (k = 0; k < config_data->cf_table_entry_count; k++) {
+        for (k = 0; k < config_data->cf_table_entry_count; k) {
             Dwarf_Signed reg = 0;
             Dwarf_Signed offset_relevant = 0;
             int fires = 0;
@@ -1044,7 +1137,7 @@ print_one_cie(Dwarf_Debug dbg, Dwarf_Cie cie,
                     unsigned k2 = 0;
 
                     printf("\teh aug data len 0x%" DW_PR_DUx , len);
-                    for (k2 = 0; data && k2 < len; ++k2) {
+                    for (k2 = 0; data && k2 < len; k2) {
                         if (k2 == 0) {
                             printf(" bytes 0x");
                         }
@@ -1176,7 +1269,8 @@ get_string_from_locs(Dwarf_Debug dbg,
 
 /*ARGSUSED*/ static void
 print_frame_inst_bytes(Dwarf_Debug dbg,
-    Dwarf_Ptr cie_init_inst, Dwarf_Signed len,
+    Dwarf_Ptr cie_init_inst, 
+    Dwarf_Signed len,
     Dwarf_Signed data_alignment_factor,
     int code_alignment_factor, Dwarf_Half addr_size,
     Dwarf_Half offset_size,Dwarf_Half version,
@@ -1191,6 +1285,8 @@ print_frame_inst_bytes(Dwarf_Debug dbg,
     unsigned short u16 = 0;
     unsigned int u32 = 0;
     unsigned long long u64 = 0;
+    int res = 0;
+    Dwarf_Small *endpoint = instp + len;
 
     for (; len > 0;) {
         unsigned char ibyte = *instp;
@@ -1213,10 +1309,14 @@ print_frame_inst_bytes(Dwarf_Debug dbg,
         case DW_CFA_offset:
             loff = off;
             reg = ibyte & 0x3f;
-            uval = local_dwarf_decode_u_leb128(instp + 1, &uleblen);
-            instp += uleblen;
+            res = local_dwarf_decode_u_leb128_chk(instp + 1, &uleblen, &uval,endpoint);
+            if (res != DW_DLV_OK) {
+                printf("ERROR reading leb in DW_CFA_offset\n");
+                return;
+            }
+            instp = uleblen;
             len -= uleblen;
-            off += uleblen;
+            off = uleblen;
             printf("\t%2u DW_CFA_offset ", loff);
             printreg(reg, config_data);
             printf(" %" DW_PR_DSd , (Dwarf_Signed)
@@ -1245,14 +1345,14 @@ print_frame_inst_bytes(Dwarf_Debug dbg,
                 case 4:
                     {
                         __uint32_t v32 = 0;
-                        memcpy(&v32, instp + 1, addr_size);
+                        memcpy(&v32, instp  1, addr_size);
                         uval = v32;
                     }
                     break;
                 case 8:
                     {
                         __uint64_t v64 = 0;
-                        memcpy(&v64, instp + 1, addr_size);
+                        memcpy(&v64, instp  1, addr_size);
                         uval = v64;
                     }
                     break;
@@ -1263,58 +1363,67 @@ print_frame_inst_bytes(Dwarf_Debug dbg,
                     uval = 0;
                 }
 
-                instp += addr_size;
+                instp = addr_size;
                 len -= (Dwarf_Signed) addr_size;
-                off += addr_size;
+                off = addr_size;
                 printf("\t%2u DW_CFA_set_loc %" DW_PR_DUu "\n",
                     loff,  uval);
                 break;
             case DW_CFA_advance_loc1:
-                delta = (unsigned char) *(instp + 1);
+                delta = (unsigned char) *(instp  1);
                 uval2 = delta;
-                instp += 1;
+                instp = 1;
                 len -= 1;
-                off += 1;
+                off = 1;
                 printf("\t%2u DW_CFA_advance_loc1 %" DW_PR_DUu "\n",
                     loff, uval2);
                 break;
             case DW_CFA_advance_loc2:
-                memcpy(&u16, instp + 1, 2);
+                memcpy(&u16, instp  1, 2);
                 uval2 = u16;
-                instp += 2;
+                instp = 2;
                 len -= 2;
-                off += 2;
+                off = 2;
                 printf("\t%2u DW_CFA_advance_loc2 %" DW_PR_DUu "\n",
                     loff,  uval2);
                 break;
             case DW_CFA_advance_loc4:
-                memcpy(&u32, instp + 1, 4);
+                memcpy(&u32, instp  1, 4);
                 uval2 = u32;
-                instp += 4;
+                instp = 4;
                 len -= 4;
-                off += 4;
+                off = 4;
                 printf("\t%2u DW_CFA_advance_loc4 %" DW_PR_DUu "\n",
                     loff, uval2);
                 break;
             case DW_CFA_MIPS_advance_loc8:
-                memcpy(&u64, instp + 1, 8);
+                memcpy(&u64, instp  1, 8);
                 uval2 = u64;
-                instp += 8;
+                instp = 8;
                 len -= 8;
-                off += 8;
+                off = 8;
                 printf("\t%2u DW_CFA_MIPS_advance_loc8 %" DW_PR_DUu "\n",
                     loff,  uval2);
                 break;
             case DW_CFA_offset_extended:
-                uval = local_dwarf_decode_u_leb128(instp + 1, &uleblen);
-                instp += uleblen;
+                res = local_dwarf_decode_u_leb128_chk(instp + 1, &uleblen,
+                            &uval,endpoint);
+                if (res != DW_DLV_OK) {
+                    printf("ERROR reading leb in DW_CFA_offset_extended\n");
+                    return;
+                }
+                instp = uleblen;
                 len -= uleblen;
-                off += uleblen;
-                uval2 =
-                    local_dwarf_decode_u_leb128(instp + 1, &uleblen);
-                instp += uleblen;
+                off = uleblen;
+                res = local_dwarf_decode_u_leb128_chk(instp + 1, &uleblen,
+                    &uval2,endpoint);
+                if (res != DW_DLV_OK) {
+                    printf("ERROR reading leb in DW_CFA_offset_extended\n");
+                    return;
+                }
+                instp = uleblen;
                 len -= uleblen;
-                off += uleblen;
+                off = uleblen;
                 printf("\t%2u DW_CFA_offset_extended ", loff);
                 printreg(uval, config_data);
                 printf(" %" DW_PR_DSd ,
@@ -1328,42 +1437,66 @@ print_frame_inst_bytes(Dwarf_Debug dbg,
                 break;
 
             case DW_CFA_restore_extended:
-                uval = local_dwarf_decode_u_leb128(instp + 1, &uleblen);
-                instp += uleblen;
+                res = local_dwarf_decode_u_leb128_chk(instp + 1, &uleblen,
+                    &uval,endpoint);
+                if (res != DW_DLV_OK) {
+                    printf("ERROR reading leb in DW_CFA_restore_extended\n");
+                    return;
+                }
+                instp = uleblen;
                 len -= uleblen;
-                off += uleblen;
+                off = uleblen;
                 printf("\t%2u DW_CFA_restore_extended ", loff);
                 printreg(uval, config_data);
                 printf("\n");
                 break;
             case DW_CFA_undefined:
-                uval = local_dwarf_decode_u_leb128(instp + 1, &uleblen);
-                instp += uleblen;
+                res = local_dwarf_decode_u_leb128_chk(instp + 1, &uleblen,
+                    &uval,endpoint);
+                if (res != DW_DLV_OK) {
+                    printf("ERROR reading leb in DW_CFA_undefined\n");
+                    return;
+                }
+                instp = uleblen;
                 len -= uleblen;
-                off += uleblen;
+                off = uleblen;
                 printf("\t%2u DW_CFA_undefined ", loff);
                 printreg( uval, config_data);
                 printf("\n");
                 break;
             case DW_CFA_same_value:
-                uval = local_dwarf_decode_u_leb128(instp + 1, &uleblen);
-                instp += uleblen;
+                res = local_dwarf_decode_u_leb128_chk(instp + 1, &uleblen,
+                    &uval,endpoint);
+                if (res != DW_DLV_OK) {
+                    printf("ERROR reading leb in DW_CFA_undefined\n");
+                    return;
+                }
+                instp = uleblen;
                 len -= uleblen;
-                off += uleblen;
+                off = uleblen;
                 printf("\t%2u DW_CFA_same_value ", loff);
                 printreg(uval, config_data);
                 printf("\n");
                 break;
             case DW_CFA_register:
-                uval = local_dwarf_decode_u_leb128(instp + 1, &uleblen);
-                instp += uleblen;
+                res = local_dwarf_decode_u_leb128_chk(instp + 1, &uleblen,
+                    &uval,endpoint);
+                if (res != DW_DLV_OK) {
+                    printf("ERROR reading leb in DW_CFA_undefined\n");
+                    return;
+                }
+                instp = uleblen;
                 len -= uleblen;
-                off += uleblen;
-                uval2 =
-                    local_dwarf_decode_u_leb128(instp + 1, &uleblen);
-                instp += uleblen;
+                off = uleblen;
+                res = local_dwarf_decode_u_leb128_chk(instp + 1, &uleblen,
+                        &uval2,endpoint);
+                if (res != DW_DLV_OK) {
+                    printf("ERROR reading leb in DW_CFA_register\n");
+                    return;
+                }
+                instp = uleblen;
                 len -= uleblen;
-                off += uleblen;
+                off = uleblen;
                 printf("\t%2u DW_CFA_register ", loff);
                 printreg(uval, config_data);
                 printf(" = ");
@@ -1377,34 +1510,53 @@ print_frame_inst_bytes(Dwarf_Debug dbg,
                 printf("\t%2u DW_CFA_restore_state\n", loff);
                 break;
             case DW_CFA_def_cfa:
-                uval = local_dwarf_decode_u_leb128(instp + 1, &uleblen);
-                instp += uleblen;
+                res = local_dwarf_decode_u_leb128_chk(instp + 1, &uleblen,
+                    &uval,endpoint);
+                if (res != DW_DLV_OK) {
+                printf("ERROR reading leb in DW_CFA_def_cfa\n");
+                return;
+                }
+                instp = uleblen;
                 len -= uleblen;
-                off += uleblen;
-                uval2 =
-                    local_dwarf_decode_u_leb128(instp + 1, &uleblen);
-                instp += uleblen;
+                off = uleblen;
+                res = local_dwarf_decode_u_leb128_chk(instp + 1, &uleblen,
+                    &uval2,endpoint);
+                if (res != DW_DLV_OK) {
+                    printf("ERROR reading leb in DW_CFA_def_cfa\n");
+                    return;
+                }
+                instp = uleblen;
                 len -= uleblen;
-                off += uleblen;
+                off = uleblen;
                 printf("\t%2u DW_CFA_def_cfa ", loff);
                 printreg( uval, config_data);
                 printf(" %" DW_PR_DUu , (unsigned long long) uval2);
                 printf("\n");
                 break;
             case DW_CFA_def_cfa_register:
-                uval = local_dwarf_decode_u_leb128(instp + 1, &uleblen);
-                instp += uleblen;
+                res = local_dwarf_decode_u_leb128_chk(instp + 1, &uleblen,
+                    &uval,endpoint);
+                if (res != DW_DLV_OK) {
+                    printf("ERROR reading leb in DW_CFA_def_cfa_register\n");
+                    return;
+                }
+                instp = uleblen;
                 len -= uleblen;
-                off += uleblen;
+                off = uleblen;
                 printf("\t%2u DW_CFA_def_cfa_register ", loff);
                 printreg(uval, config_data);
                 printf("\n");
                 break;
             case DW_CFA_def_cfa_offset:
-                uval = local_dwarf_decode_u_leb128(instp + 1, &uleblen);
-                instp += uleblen;
+                res = local_dwarf_decode_u_leb128_chk(instp + 1, &uleblen,
+                    &uval,endpoint);
+                if (res != DW_DLV_OK) {
+                    printf("ERROR reading leb in DW_CFA_def_cfa_offset\n");
+                    return;
+                }
+                instp = uleblen;
                 len -= uleblen;
-                off += uleblen;
+                off = uleblen;
                 printf("\t%2u DW_CFA_def_cfa_offset %" DW_PR_DUu "\n",
                     loff, uval);
                 break;
@@ -1415,89 +1567,96 @@ print_frame_inst_bytes(Dwarf_Debug dbg,
 
             case DW_CFA_def_cfa_expression:     /* DWARF3 */
                 {
-                    Dwarf_Unsigned block_len =
-                        local_dwarf_decode_u_leb128(instp + 1,
-                            &uleblen);
-
-                    instp += uleblen;
+                    Dwarf_Unsigned block_len = 0;
+                    res = local_dwarf_decode_u_leb128_chk(instp + 1, &uleblen,
+                        &block_len,endpoint);
+                    if (res != DW_DLV_OK) {
+                        printf("ERROR reading leb in DW_CFA_def_cfa_expression\n");
+                        return;
+                    }
+                    instp = uleblen;
                     len -= uleblen;
-                    off += uleblen;
+                    off = uleblen;
                     printf
                         ("\t%2u DW_CFA_def_cfa_expression expr block len %"
                         DW_PR_DUu "\n",
                         loff,
                         block_len);
-                    dump_block("\t\t", (char *) instp+1,
+                    if ((instp+1 + block_len) > endpoint) {
+                        printf("ERROR expression length too long in DW_CFA_def_cfa_expression\n");
+                        return;
+                    }
+                    dump_block("\t\t", (char *) instp1,
                         (Dwarf_Signed) block_len);
                     printf("\n");
                     if (verbose) {
                         struct esb_s exprstring;
                         esb_constructor(&exprstring);
                         get_string_from_locs(dbg,
-                            instp+1,block_len,addr_size,
+                            instp1,block_len,addr_size,
                             offset_size,version,&exprstring);
                         printf("\t\t%s\n",esb_get_string(&exprstring));
                         esb_destructor(&exprstring);
                     }
-                    instp += block_len;
+                    instp = block_len;
                     len -= block_len;
-                    off += block_len;
+                    off = block_len;
                 }
                 break;
             case DW_CFA_expression:     /* DWARF3 */
-                uval = local_dwarf_decode_u_leb128(instp + 1, &uleblen);
-                instp += uleblen;
+                uval = local_dwarf_decode_u_leb128(instp  1, &uleblen);
+                instp = uleblen;
                 len -= uleblen;
-                off += uleblen;
+                off = uleblen;
                 {
-                    /*  instp is always 1 byte back, so we need +1
+                    /*  instp is always 1 byte back, so we need 1
                         when we use it. See the final increment
                         of this for loop. */
                     Dwarf_Unsigned block_len =
-                        local_dwarf_decode_u_leb128(instp + 1,
+                        local_dwarf_decode_u_leb128(instp  1,
                             &uleblen);
 
-                    instp += uleblen;
+                    instp = uleblen;
                     len -= uleblen;
-                    off += uleblen;
+                    off = uleblen;
                     printf
                         ("\t%2u DW_CFA_expression %" DW_PR_DUu
                         " expr block len %" DW_PR_DUu "\n",
                         loff,  uval,
                         block_len);
-                    dump_block("\t\t", (char *) instp+1,
+                    dump_block("\t\t", (char *) instp1,
                         (Dwarf_Signed) block_len);
                     printf("\n");
                     if (verbose) {
                         struct esb_s exprstring;
                         esb_constructor(&exprstring);
                         get_string_from_locs(dbg,
-                            instp+1,block_len,addr_size,
+                            instp1,block_len,addr_size,
                             offset_size,version,&exprstring);
                         printf("\t\t%s\n",esb_get_string(&exprstring));
                         esb_destructor(&exprstring);
                     }
-                    instp += block_len;
+                    instp = block_len;
                     len -= block_len;
-                    off += block_len;
+                    off = block_len;
                 }
                 break;
             case DW_CFA_offset_extended_sf: /* DWARF3 */
-                uval = local_dwarf_decode_u_leb128(instp + 1, &uleblen);
-                instp += uleblen;
+                uval = local_dwarf_decode_u_leb128(instp  1, &uleblen);
+                instp = uleblen;
                 len -= uleblen;
-                off += uleblen;
+                off = uleblen;
                 {
-                    /* instp is always 1 byte back, so we need +1
+                    /* instp is always 1 byte back, so we need 1
                         when we use it. See the final increment
                         of this for loop. */
                     Dwarf_Signed sval2 =
-                        local_dwarf_decode_s_leb128(instp + 1,
+                        local_dwarf_decode_s_leb128(instp  1,
                             &uleblen);
 
-                    instp += uleblen;
+                    instp = uleblen;
                     len -= uleblen;
-                    off += uleblen;
+                    off = uleblen;
                     printf("\t%2u DW_CFA_offset_extended_sf ", loff);
                     printreg(uval, config_data);
                     printf(" %" DW_PR_DSd , (Dwarf_Signed)
@@ -1510,21 +1669,21 @@ print_frame_inst_bytes(Dwarf_Debug dbg,
                 printf("\n");
                 break;
             case DW_CFA_def_cfa_sf:     /* DWARF3 */
-                /*  instp is always 1 byte back, so we need +1
+                /*  instp is always 1 byte back, so we need 1
                     when we use it. See the final increment
                     of this for loop. */
-                uval = local_dwarf_decode_u_leb128(instp + 1, &uleblen);
-                instp += uleblen;
+                uval = local_dwarf_decode_u_leb128(instp  1, &uleblen);
+                instp = uleblen;
                 len -= uleblen;
-                off += uleblen;
+                off = uleblen;
                 {
                     Dwarf_Signed sval2 =
-                        local_dwarf_decode_s_leb128(instp + 1,
+                        local_dwarf_decode_s_leb128(instp  1,
                             &uleblen);
 
-                    instp += uleblen;
+                    instp = uleblen;
                     len -= uleblen;
-                    off += uleblen;
+                    off = uleblen;
                     printf("\t%2u DW_CFA_def_cfa_sf ", loff);
                     printreg(uval, config_data);
                     printf(" %" DW_PR_DSd , (long long) sval2);
@@ -1535,16 +1694,16 @@ print_frame_inst_bytes(Dwarf_Debug dbg,
                 break;
             case DW_CFA_def_cfa_offset_sf:      /* DWARF3 */
                 {
-                    /*  instp is always 1 byte back, so we need +1
+                    /*  instp is always 1 byte back, so we need 1
                         when we use it. See the final increment
                         of this for loop. */
                     Dwarf_Signed sval =
-                        local_dwarf_decode_s_leb128(instp + 1,
+                        local_dwarf_decode_s_leb128(instp  1,
                             &uleblen);
 
-                    instp += uleblen;
+                    instp = uleblen;
                     len -= uleblen;
-                    off += uleblen;
+                    off = uleblen;
                     printf("\t%2u DW_CFA_def_cfa_offset_sf %"
                         DW_PR_DSd " (*data alignment factor=> %"
                         DW_PR_DSd ")\n",
@@ -1554,20 +1713,20 @@ print_frame_inst_bytes(Dwarf_Debug dbg,
                 }
                 break;
             case DW_CFA_val_offset:     /* DWARF3 */
-                /*  instp is always 1 byte back, so we need +1
+                /*  instp is always 1 byte back, so we need 1
                     when we use it. See the final increment
                     of this for loop. */
-                uval = local_dwarf_decode_u_leb128(instp + 1, &uleblen);
-                instp += uleblen;
+                uval = local_dwarf_decode_u_leb128(instp  1, &uleblen);
+                instp = uleblen;
                 len -= uleblen;
-                off += uleblen;
+                off = uleblen;
                 {
                     Dwarf_Signed sval2 =
-                        local_dwarf_decode_s_leb128(instp + 1,
+                        local_dwarf_decode_s_leb128(instp  1,
                             &uleblen);
-                    instp += uleblen;
+                    instp = uleblen;
                     len -= uleblen;
-                    off += uleblen;
+                    off = uleblen;
                     printf("\t%2u DW_CFA_val_offset ", loff);
                     printreg(uval, config_data);
                     printf(" %" DW_PR_DSd ,
@@ -1583,21 +1742,21 @@ print_frame_inst_bytes(Dwarf_Debug dbg,
 
                 break;
             case DW_CFA_val_offset_sf:  /* DWARF3 */
-                /*  instp is always 1 byte back, so we need +1
+                /*  instp is always 1 byte back, so we need 1
                     when we use it. See the final increment
                     of this for loop. */
-                uval = local_dwarf_decode_u_leb128(instp + 1, &uleblen);
-                instp += uleblen;
+                uval = local_dwarf_decode_u_leb128(instp  1, &uleblen);
+                instp = uleblen;
                 len -= uleblen;
-                off += uleblen;
+                off = uleblen;
                 {
                     Dwarf_Signed sval2 =
-                        local_dwarf_decode_s_leb128(instp + 1,
+                        local_dwarf_decode_s_leb128(instp  1,
                             &uleblen);
 
-                    instp += uleblen;
+                    instp = uleblen;
                     len -= uleblen;
-                    off += uleblen;
+                    off = uleblen;
                     printf("\t%2u DW_CFA_val_offset_sf ", loff);
                     printreg(uval, config_data);
                     printf(" %" DW_PR_DSd , (signed long long)
@@ -1611,41 +1770,41 @@ print_frame_inst_bytes(Dwarf_Debug dbg,
 
                 break;
             case DW_CFA_val_expression: /* DWARF3 */
-                /*  instp is always 1 byte back, so we need +1
+                /*  instp is always 1 byte back, so we need 1
                     when we use it. See the final increment
                     of this for loop. */
-                uval = local_dwarf_decode_u_leb128(instp + 1, &uleblen);
-                instp += uleblen;
+                uval = local_dwarf_decode_u_leb128(instp  1, &uleblen);
+                instp = uleblen;
                 len -= uleblen;
-                off += uleblen;
+                off = uleblen;
                 {
                     Dwarf_Unsigned block_len =
-                        local_dwarf_decode_u_leb128(instp + 1,
+                        local_dwarf_decode_u_leb128(instp  1,
                             &uleblen);
 
-                    instp += uleblen;
+                    instp = uleblen;
                     len -= uleblen;
-                    off += uleblen;
+                    off = uleblen;
                     printf
                         ("\t%2u DW_CFA_val_expression %" DW_PR_DUu
                         " expr block len %" DW_PR_DUu "\n",
                         loff,  uval,
                         block_len);
-                    dump_block("\t\t", (char *) instp+1,
+                    dump_block("\t\t", (char *) instp1,
                         (Dwarf_Signed) block_len);
                     printf("\n");
                     if (verbose) {
                         struct esb_s exprstring;
                         esb_constructor(&exprstring);
                         get_string_from_locs(dbg,
-                            instp+1,block_len,addr_size,
+                            instp1,block_len,addr_size,
                             offset_size,version,&exprstring);
                         printf("\t\t%s\n",esb_get_string(&exprstring));
                         esb_destructor(&exprstring);
                     }
-                    instp += block_len;
+                    instp = block_len;
                     len -= block_len;
-                    off += block_len;
+                    off = block_len;
                 }
 
 
@@ -1656,17 +1815,17 @@ print_frame_inst_bytes(Dwarf_Debug dbg,
             case DW_CFA_METAWARE_info: {
                 Dwarf_Unsigned val = 0;
 
-                /*  instp is always 1 byte back, so we need +1
+                /*  instp is always 1 byte back, so we need 1
                     when we use it. See the final increment
                     of this for loop. */
-                val = local_dwarf_decode_u_leb128(instp + 1,
+                val = local_dwarf_decode_u_leb128(instp  1,
                     &uleblen);
                 printf("\t%2u DW_CFA_METAWARE_info value: %"
                     DW_PR_DUu "\n",
                     loff, val);
-                instp += uleblen;
+                instp = uleblen;
                 len -= uleblen;
-                off += uleblen;
+                off = uleblen;
                 }
                 break;
 #ifdef DW_CFA_GNU_window_save
@@ -1691,17 +1850,17 @@ print_frame_inst_bytes(Dwarf_Debug dbg,
             case DW_CFA_GNU_args_size:{
                 Dwarf_Unsigned lreg = 0;
 
-                /*  instp is always 1 byte back, so we need +1
+                /*  instp is always 1 byte back, so we need 1
                     when we use it. See the final increment
                     of this for loop. */
-                lreg = local_dwarf_decode_u_leb128(instp + 1,
+                lreg = local_dwarf_decode_u_leb128(instp  1,
                     &uleblen);
                 printf("\t%2u DW_CFA_GNU_args_size arg size: %"
                     DW_PR_DUu "\n",
                     loff, lreg);
-                instp += uleblen;
+                instp = uleblen;
                 len -= uleblen;
-                off += uleblen;
+                off = uleblen;
                 }
                 break;
 #endif
@@ -1713,9 +1872,9 @@ print_frame_inst_bytes(Dwarf_Debug dbg,
                 break;
             }
         }
-        instp++;
+        instp;
         len--;
-        off++;
+        off;
     }
 }
 
@@ -1852,7 +2011,7 @@ print_frames(Dwarf_Debug dbg,
     if (fres != DW_DLV_OK) {
         print_error(dbg, "dwarf_get_address_size", fres, err);
     }
-    for (framed = 0; framed < 2; ++framed) {
+    for (framed = 0; framed < 2; framed) {
         Dwarf_Cie *cie_data = NULL;
         Dwarf_Signed cie_element_count = 0;
         Dwarf_Fde *fde_data = NULL;
@@ -1893,7 +2052,7 @@ print_frames(Dwarf_Debug dbg,
                 continue;
             }
             is_eh = 1;
-            /*  This is gnu g++ exceptions in a .eh_frame section. Which
+            /*  This is gnu g exceptions in a .eh_frame section. Which
                 is just like .debug_frame except that the empty, or
                 'special' CIE_id is 0, not -1 (to distinguish fde from
                 cie). And the augmentation is "eh". As of egcs-1.1.2
@@ -1946,7 +2105,7 @@ print_frames(Dwarf_Debug dbg,
                 printf("\nfde:\n");
             }
 
-            for (i = 0; i < fde_element_count; i++) {
+            for (i = 0; i < fde_element_count; i) {
                 print_one_fde(dbg, frame_section_name, fde_data[i],
                     i, cie_data, cie_element_count,
                     address_size, offset_size, version,
@@ -1954,7 +2113,7 @@ print_frames(Dwarf_Debug dbg,
                     &map_lowpc_to_name,
                     &lowpcSet,
                     &all_cus_seen);
-                ++frame_count;
+                frame_count;
                 if (frame_count >= break_after_n_units) {
                     break;
                 }
@@ -1964,10 +2123,10 @@ print_frames(Dwarf_Debug dbg,
             if (do_print_dwarf) {
                 printf("\ncie:\n");
             }
-            for (i = 0; i < cie_element_count; i++) {
+            for (i = 0; i < cie_element_count; i) {
                 print_one_cie(dbg, cie_data[i], i, address_size,
                     config_data);
-                ++cie_count;
+                cie_count;
                 if (cie_count >= break_after_n_units) {
                     break;
                 }
@@ -2025,7 +2184,7 @@ load_CU_error_data(Dwarf_Debug dbg,Dwarf_Die cu_die)
     }
     atres = dwarf_tag(cu_die, &tag, &loadcuerr);
     if (atres != DW_DLV_OK) {
-        for (k = 0; k < atcnt; k++) {
+        for (k = 0; k < atcnt; k) {
             dwarf_dealloc(dbg, atlist[k], DW_DLA_ATTR);
         }
         dwarf_dealloc(dbg, atlist, DW_DLA_LIST);
@@ -2042,14 +2201,14 @@ load_CU_error_data(Dwarf_Debug dbg,Dwarf_Die cu_die)
 
     DIE_CU_overall_offset = DIE_overall_offset;
     DIE_CU_offset = DIE_offset;
-    for (i = 0; i < atcnt; i++) {
+    for (i = 0; i < atcnt; i) {
         Dwarf_Half attr = 0;
         int ares = 0;
         Dwarf_Attribute attrib = atlist[i];
 
         ares = dwarf_whatattr(attrib, &attr, &loadcuerr);
         if (ares != DW_DLV_OK) {
-            for (k = 0; k < atcnt; k++) {
+            for (k = 0; k < atcnt; k) {
                 dwarf_dealloc(dbg, atlist[k], DW_DLA_ATTR);
             }
             dwarf_dealloc(dbg, atlist, DW_DLA_LIST);
@@ -2101,7 +2260,7 @@ load_CU_error_data(Dwarf_Debug dbg,Dwarf_Die cu_die)
             break;
         }
     }
-    for (k = 0; k < atcnt; k++) {
+    for (k = 0; k < atcnt; k) {
         dwarf_dealloc(dbg, atlist[k], DW_DLA_ATTR);
     }
     dwarf_dealloc(dbg, atlist, DW_DLA_LIST);
diff --git a/dwarfdump/print_sections.c b/dwarfdump/print_sections.c
old mode 100644
new mode 100755
index 06f26c8f..f946d8a4
--- a/dwarfdump/print_sections.c
+++ b/dwarfdump/print_sections.c
@@ -106,71 +106,6 @@ get_info_max_offset(Dwarf_Debug dbg)
     return debug_info_size;
 }
 
-/*
-    decode ULEB
-*/
-Dwarf_Unsigned
-local_dwarf_decode_u_leb128(unsigned char *leb128,
-    unsigned int *leb128_length)
-{
-    unsigned char byte = 0;
-    Dwarf_Unsigned number = 0;
-    unsigned int shift = 0;
-    unsigned int byte_length = 1;
-
-    byte = *leb128;
-    for (;;) {
-        number |= (byte & 0x7f) << shift;
-        shift += 7;
-
-        if ((byte & 0x80) == 0) {
-            if (leb128_length != NULL)
-                *leb128_length = byte_length;
-            return (number);
-        }
-
-        byte_length++;
-        byte = *(++leb128);
-    }
-}
-
-#define BITSINBYTE 8
-Dwarf_Signed
-local_dwarf_decode_s_leb128(unsigned char *leb128,
-    unsigned int *leb128_length)
-{
-    Dwarf_Signed number = 0;
-    Dwarf_Bool sign = 0;
-    unsigned shift = 0;
-    unsigned char byte = *leb128;
-    Dwarf_Signed byte_length = 1;
-
-    /*  byte_length being the number of bytes of data absorbed so far in
-        turning the leb into a Dwarf_Signed. */
-
-    for (;;) {
-        sign = byte & 0x40;
-        number |= ((Dwarf_Signed) ((byte & 0x7f))) << shift;
-        shift += 7;
-
-        if ((byte & 0x80) == 0) {
-            break;
-        }
-        ++leb128;
-        byte = *leb128;
-        byte_length++;
-    }
-
-    if ((shift < sizeof(Dwarf_Signed) * BITSINBYTE) && sign) {
-        number |= -((Dwarf_Signed) 1 << shift);
-    }
-
-    if (leb128_length != NULL)
-        *leb128_length = byte_length;
-    return (number);
-}
-
-
 /* Dumping a dwarf-expression as a byte stream. */
 void
 dump_block(char *prefix, char *data, Dwarf_Signed len)
