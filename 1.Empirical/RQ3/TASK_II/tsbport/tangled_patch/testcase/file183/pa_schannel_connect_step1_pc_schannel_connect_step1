name: curlx_verify_windows_version  @ 32 @ name: curlx_verify_windows_version  @ 35 @ 
decl_stmt  @ 15 @ decl_stmt  @ 16 @ 
index  @ 5 @ index  @ 6 @ 
call  @ 30 @ call  @ 31 @ 
parameter  @ 2 @ parameter  @ 2 @ 
name: HAS_ALPN  @ 10 @ name: HAS_ALPN  @ 43 @ 
name: remote_port  @ 30 @ name: remote_port  @ 33 @ 
decl  @ 13 @ decl  @ 14 @ 
name: addr  @ 17 @ name: addr  @ 18 @ 
literal: ");
      return CURLE_NOT_BUILT_IN;}
#endif/* allocate memory for the re-usable credential handle */
    BACKEND->cred = (struct Curl_schannel_cred *)calloc(1, sizeof(struct Curl_schannel_cred));
    if(!BACKEND->cred) {
      failf(data, "  @ 311 @ literal: "schannel: unable to allocate memory"  @ 380 @ 
expr  @ 5 @ expr  @ 6 @ 
type  @ 22 @ type  @ 23 @ 
expr  @ 14 @ expr  @ 15 @ 
name: SEC_E_OK  @ 15 @ name: SEC_E_OK  @ 16 @ 
literal: ", ALPN_HTTP_1_1);

    *list_len = curlx_uitous(cur - list_start_index);*extension_len = *list_len + sizeof(unsigned int) + sizeof(unsigned short);

    InitSecBuffer(&inbuf, SECBUFFER_APPLICATION_PROTOCOLS, alpn_buffer, cur);
    InitSecBufferDesc(&inbuf_desc,&inbuf, 1);
  }else {
    InitSecBuffer(&inbuf, SECBUFFER_EMPTY, NULL, 0);
    InitSecBufferDesc(&inbuf_desc,&inbuf, 1);
  }#else /* HAS_ALPN */
  InitSecBuffer(&inbuf, SECBUFFER_EMPTY, NULL, 0);
  InitSecBufferDesc(&inbuf_desc,&inbuf, 1);
#endif/* setup output buffer */
  InitSecBuffer(&outbuf, SECBUFFER_EMPTY, NULL, 0);
  InitSecBufferDesc(&outbuf_desc,&outbuf, 1);

  /* setup request flags */BACKEND->req_flags = ISC_REQ_SEQUENCE_DETECT | ISC_REQ_REPLAY_DETECT |ISC_REQ_CONFIDENTIALITY | ISC_REQ_ALLOCATE_MEMORY |ISC_REQ_STREAM;

  /* allocate memory for the security context handle */BACKEND->ctxt = (struct Curl_schannel_ctxt *)calloc(1, sizeof(struct Curl_schannel_ctxt));
  if(!BACKEND->ctxt) {
    failf(data, "  @ 389 @ literal: "schannel: unable to allocate memory"  @ 495 @ 
decl  @ 2 @ decl  @ 2 @ 
operator: ->  @ 5 @ operator: ->  @ 6 @ 
condition  @ 32 @ condition  @ 35 @ 
literal: ", written, outbuf.cbBuffer);
    return CURLE_SSL_CONNECT_ERROR;}

  DEBUGF(infof(data, "  @ 452 @ literal: "schannel: failed to send initial handshake data: "  @ 556 @ 
call  @ 24 @ call  @ 25 @ 
decl_stmt  @ 8 @ decl_stmt  @ 9 @ 
expr  @ 27 @ expr  @ 28 @ 
expr  @ 30 @ expr  @ 31 @ 
expr  @ 4 @ expr  @ 4 @ 
literal: " : data->set.ssl.primary.clientcert);
        curlx_unicodefree(cert_path);return CURLE_SSL_CERTPROBLEM;
      }if(fInCert || blob) {
        /* Reading a .P12 or .pfx file, like the example at bottom of https://social.msdn.microsoft.com/Forums/windowsdesktop/en-US/3e7bc95f-b21a-4bcd-bd2c-7f996718cae5*/CRYPT_DATA_BLOB datablob;
        WCHAR* pszPassword;size_t pwd_len = 0;
        int str_w_len = 0;const char *cert_showfilename_error = blob ?
          "  @ 196 @ literal: "(memory blob)"  @ 242 @ 
name  @ 5 @ name  @ 6 @ 
name: connssl  @ 5 @ name: connssl  @ 6 @ 
parameter  @ 2 @ parameter  @ 2 @ 
ifdef  @ 18 @ ifdef  @ 19 @ 
literal: ""  @ 277 @ literal: 0  @ 347 @ 
name: ssize_t  @ 4 @ name: ssize_t  @ 4 @ 
literal: ",Curl_sspi_strerror(sspi_status, buffer, sizeof(buffer)));
      return CURLE_SSL_CONNECT_ERROR;}
  }DEBUGF(infof(data, "  @ 441 @ literal: "schannel: SNI or certificate check failed: %s"  @ 527 @ 
decl_stmt  @ 22 @ decl_stmt  @ 23 @ 
name: NULL  @ 16 @ name: NULL  @ 17 @ 
decl  @ 19 @ decl  @ 20 @ 
name: result  @ 22 @ name: result  @ 23 @ 
expr  @ 32 @ expr  @ 35 @ 
call  @ 30 @ call  @ 31 @ 
name: data  @ 30 @ name: data  @ 31 @ 
name: TCHAR  @ 21 @ name: TCHAR  @ 22 @ 
literal: ""  @ 266 @ literal: ", last error is 0x%x"  @ 312 @ 
literal: ");
  }#ifdef HAS_ALPN
  if(BACKEND->use_alpn) {
    int cur = 0;int list_start_index = 0;
    unsigned int *extension_len = NULL;unsigned short* list_len = NULL;

    /* The first four bytes will be an unsigned int indicating number of bytes of data in the rest of the buffer. */extension_len = (unsigned int *)(&alpn_buffer[cur]);cur += sizeof(unsigned int);

    /* The next four bytes are an indicator that this buffer will contain ALPN data, as opposed to NPN, for example. */*(unsigned int *)&alpn_buffer[cur] =SecApplicationProtocolNegotiationExt_ALPN;cur += sizeof(unsigned int);

    /* The next two bytes will be an unsigned short indicating the number of bytes used to list the preferred protocols. */list_len = (unsigned short*)(&alpn_buffer[cur]);cur += sizeof(unsigned short);

    list_start_index = cur;#ifdef USE_NGHTTP2
    if(data->state.httpversion>= CURL_HTTP_VERSION_2) {
      memcpy(&alpn_buffer[cur], NGHTTP2_PROTO_ALPN, NGHTTP2_PROTO_ALPN_LEN);cur += NGHTTP2_PROTO_ALPN_LEN;
      infof(data, "  @ 354 @ literal: "schannel: ALPN, offering %s\n"  @ 458 @ 
operator: ->  @ 24 @ operator: ->  @ 25 @ 
argument  @ 32 @ argument  @ 35 @ 
operator: ->  @ 25 @ operator: ->  @ 26 @ 
modifier: *  @ 2 @ modifier: *  @ 2 @ 
condition  @ 24 @ condition  @ 25 @ 
literal: ""  @ 259 @ literal: "last error is 0x%x"  @ 301 @ 
literal: ");
    return CURLE_OUT_OF_MEMORY;}

  host_name = curlx_convert_UTF8_to_tchar(hostname);if(!host_name)
    return CURLE_OUT_OF_MEMORY;/* Schannel InitializeSecurityContext: https://msdn.microsoft.com/en-us/library/windows/desktop/aa375924.aspx At the moment we don't pass inbuf unless we're using ALPN since we only use it for that, and Wine (for which we currently disable ALPN) is giving us problems with inbuf regardless. https://github.com/curl/curl/issues/983*/
  sspi_status = s_pSecFn->InitializeSecurityContext(&BACKEND->cred->cred_handle, NULL, host_name, BACKEND->req_flags, 0, 0,(BACKEND->use_alpn ?&inbuf_desc : NULL),0,&BACKEND->ctxt->ctxt_handle,&outbuf_desc,&BACKEND->ret_flags,&BACKEND->ctxt->time_stamp);

  curlx_unicodefree(host_name);if(sspi_status != SEC_I_CONTINUE_NEEDED) {
    char buffer[STRERROR_LEN];
    Curl_safefree(BACKEND->ctxt);
    switch(sspi_status) {case SEC_E_INSUFFICIENT_MEMORY:
      failf(data, "  @ 416 @ literal: 0  @ 511 @ 
literal: "schannel: Windows version is old and may not be able to ""  @ 34 @ literal: "schannel: Windows version is old and may not be able to "  @ 39 @ 
name: char  @ 24 @ name: char  @ 25 @ 
expr  @ 24 @ expr  @ 25 @ 
expr  @ 24 @ expr  @ 25 @ 
literal: ");
  }#ifdef HAS_ALPN
  /* ALPN is only supported on Windows 8.1 / Server 2012 R2 and above. Also it doesn't seem to be supported for Wine, see curl bug #983. */BACKEND->use_alpn = conn->bits.tls_enable_alpn&&!GetProcAddress(GetModuleHandle(TEXT("  @ 34 @ literal: "wine_get_version"  @ 48 @ 
literal: 1  @ 4 @ literal: 1  @ 4 @ 
modifier: *  @ 21 @ modifier: *  @ 22 @ 
literal: 5  @ 32 @ literal: 5  @ 35 @ 
endif  @ 28 @ endif  @ 84 @ 
argument_list  @ 24 @ argument_list  @ 25 @ 
decl  @ 11 @ decl  @ 12 @ 
name: SecBuffer  @ 8 @ name: SecBuffer  @ 9 @ 
literal: 1  @ 32 @ literal: 1  @ 35 @ 
name: hostname  @ 27 @ name: hostname  @ 28 @ 
name: PCCERT_CONTEXT  @ 14 @ name: PCCERT_CONTEXT  @ 15 @ 
argument_list  @ 30 @ argument_list  @ 31 @ 
name: SecBufferDesc  @ 7 @ name: SecBufferDesc  @ 8 @ 
name: SCHANNEL_CRED  @ 13 @ name: SCHANNEL_CRED  @ 14 @ 
type  @ 7 @ type  @ 8 @ 
name: char  @ 11 @ name: char  @ 12 @ 
literal: ",cert_showfilename_error);
          elsefailf(data, "  @ 257 @ literal: "password is bad"  @ 297 @ 
expr  @ 32 @ expr  @ 35 @ 
else  @ 24 @ else  @ 25 @ 
expr  @ 15 @ expr  @ 16 @ 
name: int  @ 2 @ name: int  @ 2 @ 
name: schannel_cred  @ 13 @ name: schannel_cred  @ 14 @ 
name: written  @ 4 @ name: written  @ 4 @ 
name  @ 19 @ name  @ 20 @ 
operator: ->  @ 30 @ operator: ->  @ 33 @ 
name  @ 11 @ name  @ 12 @ 
type  @ 14 @ type  @ 15 @ 
argument  @ 32 @ argument  @ 35 @ 
name: conn  @ 30 @ name: conn  @ 33 @ 
name: SECURITY_STATUS  @ 15 @ name: SECURITY_STATUS  @ 16 @ 
literal: 1  @ 14 @ literal: 1  @ 15 @ 
modifier: *  @ 5 @ modifier: *  @ 6 @ 
literal: " "  @ 124 @ literal: "names in server certificates.\n"  @ 149 @ 
modifier: *  @ 2 @ modifier: *  @ 5 @ 
name: alpn_buffer  @ 11 @ name: alpn_buffer  @ 12 @ 
decl_stmt  @ 21 @ decl_stmt  @ 22 @ 
init  @ 14 @ init  @ 15 @ 
name: ssl  @ 5 @ name: ssl  @ 6 @ 
name: old_cred  @ 16 @ name: old_cred  @ 17 @ 
expr  @ 30 @ expr  @ 31 @ 
name: struct  @ 19 @ name: struct  @ 20 @ 
decl  @ 15 @ decl  @ 16 @ 
name: addr6  @ 19 @ name: addr6  @ 20 @ 
decl  @ 2 @ decl  @ 2 @ 
operator: &  @ 5 @ operator: &  @ 6 @ 
literal: " "  @ 104 @ literal: "checks\n"  @ 122 @ 
decl_stmt  @ 9 @ decl_stmt  @ 10 @ 
type  @ 6 @ type  @ 7 @ 
literal: "schannel: SSL/TLS connection with %s port %hu (step 1/3)\n"  @ 30 @ literal: "schannel: SSL/TLS connection with %s port %hu (step 1/3)\n"  @ 32 @ 
argument  @ 30 @ argument  @ 31 @ 
decl_stmt  @ 27 @ decl_stmt  @ 28 @ 
name: infof  @ 34 @ name: infof  @ 39 @ 
literal: ");
      return CURLE_SSL_CACERT_BADFILE;}
  }else
    BACKEND->use_manual_cred_validation = false;#else
  if(SSL_CONN_CONFIG(CAfile)) {failf(data, "  @ 58 @ literal: "schannel: CA cert support not built in"  @ 80 @ 
name: host_name  @ 21 @ name: host_name  @ 22 @ 
type  @ 9 @ type  @ 10 @ 
type  @ 11 @ type  @ 12 @ 
expr  @ 11 @ expr  @ 12 @ 
init  @ 16 @ init  @ 17 @ 
block_content  @ 4 @ block_content  @ 4 @ 
else  @ 26 @ else  @ 477 @ 
name: conn  @ 25 @ name: conn  @ 26 @ 
type  @ 16 @ type  @ 17 @ 
literal: ");
        return result;}
    }#ifdef HAS_CLIENT_CERT_PATH
    /* client certificate */if(data->set.ssl.primary.clientcert || data->set.ssl.primary.cert_blob) {
      DWORD cert_store_name = 0;TCHAR *cert_store_path = NULL;
      TCHAR *cert_thumbprint_str = NULL;CRYPT_HASH_BLOB cert_thumbprint;
      BYTE cert_thumbprint_data[CERT_THUMBPRINT_DATA_LEN];
      HCERTSTORE cert_store = NULL;FILE *fInCert = NULL;
      void *certdata = NULL;size_t certsize = 0;
      bool blob = data->set.ssl.primary.cert_blob != NULL;
      TCHAR *cert_path = NULL;if(blob) {
        certdata = data->set.ssl.primary.cert_blob->data;
        certsize = data->set.ssl.primary.cert_blob->len;
      }else {
        cert_path = curlx_convert_UTF8_to_tchar(data->set.ssl.primary.clientcert);
        if(!cert_path)return CURLE_OUT_OF_MEMORY;

        result = get_cert_location(cert_path,&cert_store_name,&cert_store_path,&cert_thumbprint_str);

        if(result&&(data->set.ssl.primary.clientcert[0]!='\0'))fInCert = fopen(data->set.ssl.primary.clientcert, "  @ 154 @ literal: 0  @ 188 @ 
expr  @ 24 @ expr  @ 25 @ 
type  @ 5 @ type  @ 6 @ 
decl  @ 17 @ decl  @ 18 @ 
directive: endif  @ 12 @ directive: endif  @ 29 @ 
argument  @ 34 @ argument  @ 39 @ 
literal: ", outbuf.cbBuffer));

  /* send initial handshake data which is now stored in output buffer */result = Curl_write_plain(data, conn->sock[sockindex], outbuf.pvBuffer,outbuf.cbBuffer,&written);
  s_pSecFn->FreeContextBuffer(outbuf.pvBuffer);
  if((result != CURLE_OK) || (outbuf.cbBuffer != (size_t) written)) {failf(data, "  @ 446 @ literal: "schannel: sending initial handshake data: "  @ 548 @ 
name: sspi_status  @ 15 @ name: sspi_status  @ 16 @ 
type  @ 24 @ type  @ 25 @ 
type  @ 8 @ type  @ 9 @ 
name  @ 16 @ name  @ 17 @ 
expr  @ 14 @ expr  @ 15 @ 
literal: "));
      }else if(SSL_SET_OPTION(revoke_best_effort)) {
        schannel_cred.dwFlags |= SCH_CRED_IGNORE_NO_REVOCATION_CHECK |SCH_CRED_IGNORE_REVOCATION_OFFLINE | SCH_CRED_REVOCATION_CHECK_CHAIN;DEBUGF(infof(data, "  @ 104 @ literal: "schannel: ignore revocation offline errors"  @ 128 @ 
literal: "));
    }switch(conn->ssl_config.version) {
    case CURL_SSLVERSION_DEFAULT:case CURL_SSLVERSION_TLSv1:
    case CURL_SSLVERSION_TLSv1_0:case CURL_SSLVERSION_TLSv1_1:
    case CURL_SSLVERSION_TLSv1_2:case CURL_SSLVERSION_TLSv1_3:
    {result = set_ssl_version_min_max(&schannel_cred, data, conn);
      if(result != CURLE_OK)return result;
      break;}
    case CURL_SSLVERSION_SSLv3:schannel_cred.grbitEnabledProtocols = SP_PROT_SSL3_CLIENT;
      break;case CURL_SSLVERSION_SSLv2:
      schannel_cred.grbitEnabledProtocols = SP_PROT_SSL2_CLIENT;break;
    default:failf(data, "  @ 124 @ literal: "Unrecognized parameter passed via CURLOPT_SSLVERSION"  @ 172 @ 
decl  @ 8 @ decl  @ 9 @ 
literal: ""  @ 257 @ literal: "schannel: Failed to import cert file %s, "  @ 296 @ 
name  @ 17 @ name  @ 18 @ 
operator: -  @ 4 @ operator: -  @ 4 @ 
argument  @ 30 @ argument  @ 32 @ 
decl_stmt  @ 13 @ decl_stmt  @ 14 @ 
modifier: *  @ 27 @ modifier: *  @ 28 @ 
name: host  @ 27 @ name: host  @ 28 @ 
decl_stmt  @ 17 @ decl_stmt  @ 18 @ 
literal: "));

      /* increment the reference counter of the credential/session handle */BACKEND->cred->refcount++;
      DEBUGF(infof(data, "  @ 79 @ literal: "schannel: incremented credential handle refcount = %d\n"  @ 98 @ 
directive: endif  @ 28 @ directive: endif  @ 84 @ 
literal: "  @ 456 @ literal: "sent %zd bytes\n"  @ 562 @ 
name: client_certs  @ 14 @ name: client_certs  @ 15 @ 
name: inbuf_desc  @ 9 @ name: inbuf_desc  @ 10 @ 
name: struct  @ 2 @ name: struct  @ 5 @ 
decl  @ 7 @ decl  @ 8 @ 
function  @ 1 @ function  @ 1 @ 
literal: ",blob ? "  @ 196 @ literal: "(memory blob)"  @ 227 @ 
decl  @ 14 @ decl  @ 15 @ 
literal: " : data->set.ssl.primary.clientcert;
        curlx_unicodefree(cert_path);if(fInCert) {
          long cert_tell = 0;bool continue_reading = fseek(fInCert, 0, SEEK_END) == 0;
          if(continue_reading)cert_tell = ftell(fInCert);
          if(cert_tell<0)
            continue_reading = FALSE;else
            certsize = (size_t)cert_tell;if(continue_reading)
            continue_reading = fseek(fInCert, 0, SEEK_SET) == 0;if(continue_reading)
            certdata = malloc(certsize + 1);if((!certdata) || ((int) fread(certdata, certsize, 1, fInCert) != 1))
            continue_reading = FALSE;fclose(fInCert);
          if(!continue_reading) {failf(data, "  @ 208 @ literal: "schannel: Failed to read cert file %s"  @ 262 @ 
name  @ 25 @ name  @ 26 @ 
argument  @ 266 @ argument  @ 328 @ 
literal: ",cert_showfilename_error, GetLastError());
          CertCloseStore(cert_store, 0);return CURLE_SSL_CERTPROBLEM;
        }schannel_cred.cCreds = 1;
        schannel_cred.paCred = client_certs;}
      else {cert_store =CertOpenStore(CURL_CERT_STORE_PROV_SYSTEM, 0,(HCRYPTPROV)NULL,CERT_STORE_OPEN_EXISTING_FLAG | cert_store_name,cert_store_path);
        if(!cert_store) {failf(data, "  @ 266 @ literal: "last error is 0x%x"  @ 329 @ 
decl  @ 27 @ decl  @ 28 @ 
name: CURL_DISABLE_PROXY  @ 23 @ name: CURL_DISABLE_PROXY  @ 24 @ 
name: data  @ 2 @ name: data  @ 5 @ 
name: schannel_connect_step1  @ 2 @ name: schannel_connect_step1  @ 2 @ 
literal: "));
    }if(!conn->ssl_config.verifyhost) {
      schannel_cred.dwFlags |= SCH_CRED_NO_SERVERNAME_CHECK;DEBUGF(infof(data, "  @ 119 @ literal: "schannel: verifyhost setting prevents Schannel from "  @ 147 @ 
name: CURLcode  @ 1 @ name: CURLcode  @ 1 @ 
literal: ", NGHTTP2_PROTO_VERSION_ID);
    }#endif

    alpn_buffer[cur++]= ALPN_HTTP_1_1_LENGTH;
    memcpy(&alpn_buffer[cur], ALPN_HTTP_1_1, ALPN_HTTP_1_1_LENGTH);cur += ALPN_HTTP_1_1_LENGTH;
    infof(data, "  @ 382 @ literal: "schannel: ALPN, offering %s\n"  @ 465 @ 
literal: ", BACKEND->cred->refcount));
    }Curl_ssl_sessionid_unlock(data);
  }if(!BACKEND->cred) {
    /* setup Schannel API options */memset(&schannel_cred, 0, sizeof(schannel_cred));
    schannel_cred.dwVersion = SCHANNEL_CRED_VERSION;if(conn->ssl_config.verifypeer) {
#ifdef HAS_MANUAL_VERIFY_APIif(BACKEND->use_manual_cred_validation)
        schannel_cred.dwFlags = SCH_CRED_MANUAL_CRED_VALIDATION;else
#endifschannel_cred.dwFlags = SCH_CRED_AUTO_CRED_VALIDATION;

      if(SSL_SET_OPTION(no_revoke)) {schannel_cred.dwFlags |= SCH_CRED_IGNORE_NO_REVOCATION_CHECK |SCH_CRED_IGNORE_REVOCATION_OFFLINE;

        DEBUGF(infof(data, "  @ 83 @ literal: "schannel: disabled server certificate revocation "  @ 121 @ 
type  @ 17 @ type  @ 18 @ 
literal: 0x  @ 266 @ literal: "schannel: Failed to open cert store %x %s, "  @ 328 @ 
modifier: *  @ 24 @ modifier: *  @ 25 @ 
literal: ",Curl_sspi_strerror(sspi_status, buffer, sizeof(buffer)));
      return CURLE_OUT_OF_MEMORY;case SEC_E_WRONG_PRINCIPAL:
      failf(data, "  @ 434 @ literal: 0  @ 511 @ 
literal: "
#endif#else
#ifdef HAS_MANUAL_VERIFY_APIif(SSL_CONN_CONFIG(CAfile)) {
    if(curlx_verify_windows_version(6, 1, PLATFORM_WINNT,VERSION_GREATER_THAN_EQUAL)) {BACKEND->use_manual_cred_validation = true;
    }else {
      failf(data, "  @ 49 @ literal: "schannel: this version of Windows is too old to support "  @ 71 @ 
literal: " "  @ 446 @ literal: "schannel: initial InitializeSecurityContext failed: %s"  @ 542 @ 
literal: ");
    return CURLE_NOT_BUILT_IN;}
#endif#endif

  BACKEND->cred = NULL;

  /* check for an existing re-usable credential handle */if(SSL_SET_OPTION(primary.sessionid)) {
    Curl_ssl_sessionid_lock(data);if(!Curl_ssl_getsessionid(data, conn,(void **)&old_cred, NULL, sockindex)) {
      BACKEND->cred = old_cred;
      DEBUGF(infof(data, "  @ 66 @ literal: "schannel: re-using existing credential handle\n"  @ 93 @ 
index  @ 11 @ index  @ 12 @ 
name: char  @ 27 @ name: char  @ 28 @ 
init  @ 24 @ init  @ 25 @ 
name  @ 30 @ name  @ 33 @ 
argument  @ 30 @ argument  @ 33 @ 
parameter_list  @ 2 @ parameter_list  @ 2 @ 
name: PLATFORM_WINNT  @ 32 @ name: PLATFORM_WINNT  @ 35 @ 
name: SecBufferDesc  @ 9 @ name: SecBufferDesc  @ 10 @ 
name: struct  @ 16 @ name: struct  @ 17 @ 
directive: ifndef  @ 23 @ directive: ifndef  @ 24 @ 
block  @ 14 @ block  @ 15 @ 
specifier: const  @ 27 @ specifier: const  @ 28 @ 
argument  @ 354 @ argument  @ 458 @ 
literal: 128  @ 11 @ literal: 128  @ 12 @ 
literal: "));
      }}
    else {schannel_cred.dwFlags = SCH_CRED_MANUAL_CRED_VALIDATION |SCH_CRED_IGNORE_NO_REVOCATION_CHECK |SCH_CRED_IGNORE_REVOCATION_OFFLINE;
      DEBUGF(infof(data, "  @ 114 @ literal: "schannel: disabled server cert revocation checks\n"  @ 142 @ 
expr  @ 30 @ expr  @ 31 @ 
expr  @ 32 @ expr  @ 36 @ 
type  @ 2 @ type  @ 2 @ 
name: CURLcode  @ 22 @ name: CURLcode  @ 23 @ 
type  @ 2 @ type  @ 2 @ 
name: struct  @ 2 @ name: struct  @ 2 @ 
name: SecBuffer  @ 6 @ name: SecBuffer  @ 7 @ 
decl_stmt  @ 19 @ decl_stmt  @ 20 @ 
decl_stmt  @ 4 @ decl_stmt  @ 4 @ 
name: name  @ 27 @ name: name  @ 28 @ 
operator: .  @ 27 @ operator: .  @ 28 @ 
name: hostname  @ 24 @ name: hostname  @ 25 @ 
expr  @ 32 @ expr  @ 35 @ 
decl_stmt  @ 6 @ decl_stmt  @ 7 @ 
name: conn  @ 5 @ name: conn  @ 6 @ 
name: inbuf  @ 8 @ name: inbuf  @ 9 @ 
decl  @ 16 @ decl  @ 17 @ 
literal: ""  @ 196 @ literal: "P12"  @ 224 @ 
argument  @ 34 @ argument  @ 47 @ 
argument  @ 32 @ argument  @ 35 @ 
literal: ""  @ 189 @ literal: "rb"  @ 212 @ 
ifndef  @ 23 @ ifndef  @ 24 @ 
decl  @ 22 @ decl  @ 23 @ 
literal: ",cert_store_name, cert_store_path, GetLastError());
          free(cert_store_path);curlx_unicodefree(cert_path);
          return CURLE_SSL_CERTPROBLEM;}
        free(cert_store_path);cert_thumbprint.pbData = cert_thumbprint_data;
        cert_thumbprint.cbData = CERT_THUMBPRINT_DATA_LEN;if(!CryptStringToBinary(cert_thumbprint_str,CERT_THUMBPRINT_STR_LEN,CRYPT_STRING_HEX,cert_thumbprint_data,&cert_thumbprint.cbData,NULL, NULL)) {
          curlx_unicodefree(cert_path);CertCloseStore(cert_store, 0);
          return CURLE_SSL_CERTPROBLEM;}

        client_certs[0]= CertFindCertificateInStore(cert_store, X509_ASN_ENCODING | PKCS_7_ASN_ENCODING, 0,CERT_FIND_HASH,&cert_thumbprint, NULL);

        curlx_unicodefree(cert_path);if(client_certs[0]) {schannel_cred.cCreds = 1;
          schannel_cred.paCred = client_certs;}
        else {/* CRYPT_E_NOT_FOUND / E_INVALIDARG */
          CertCloseStore(cert_store, 0);return CURLE_SSL_CERTPROBLEM;
        }}
      CertCloseStore(cert_store, 0);}
#elseif(data->set.ssl.primary.clientcert || data->set.ssl.primary.cert_blob) {
      failf(data, "  @ 277 @ literal: "schannel: client cert support not built in"  @ 371 @ 
name  @ 24 @ name  @ 25 @ 
index  @ 14 @ index  @ 15 @ 
name  @ 5 @ name  @ 6 @ 
expr  @ 32 @ expr  @ 35 @ 
name: sockindex  @ 5 @ name: sockindex  @ 6 @ 
name: conn  @ 2 @ name: conn  @ 2 @ 
block  @ 3 @ block  @ 3 @ 
literal: ",cert_showfilename_error, errorcode);
          return CURLE_SSL_CERTPROBLEM;}

        client_certs[0]= CertFindCertificateInStore(cert_store, X509_ASN_ENCODING | PKCS_7_ASN_ENCODING, 0,CERT_FIND_ANY, NULL, NULL);

        if(client_certs[0]== NULL) {
          failf(data, "  @ 259 @ literal: "schannel: Failed to get certificate from file %s"  @ 311 @ 
name: in6_addr  @ 19 @ name: in6_addr  @ 20 @ 
type  @ 4 @ type  @ 4 @ 
expr_stmt  @ 30 @ expr_stmt  @ 31 @ 
literal: ",data->set.ssl.primary.clientcert);
          curlx_unicodefree(cert_path);return result;
        }}

      if((fInCert || blob)&&(data->set.ssl.cert_type)&&(!strcasecompare(data->set.ssl.cert_type, "  @ 189 @ literal: "schannel: Failed to get certificate location"  @ 215 @ 
init  @ 27 @ init  @ 28 @ 
unit  @ 1 @ unit  @ 1 @ 
argument  @ 34 @ argument  @ 39 @ 
name: struct  @ 5 @ name: struct  @ 6 @ 
ifdef  @ 10 @ ifdef  @ 43 @ 
expr  @ 30 @ expr  @ 32 @ 
argument  @ 257 @ argument  @ 296 @ 
name  @ 27 @ name  @ 28 @ 
decl  @ 9 @ decl  @ 10 @ 
literal: ")),"  @ 39 @ literal: 6  @ 49 @ 
literal: ");

      if(client_certs[0])
        CertFreeCertificateContext(client_certs[0]);

      return CURLE_OUT_OF_MEMORY;}
    BACKEND->cred->refcount = 1;

    /* https://msdn.microsoft.com/en-us/library/windows/desktop/aa374716.aspx */sspi_status =s_pSecFn->AcquireCredentialsHandle(NULL, (TCHAR *)UNISP_NAME, SECPKG_CRED_OUTBOUND, NULL,&schannel_cred, NULL, NULL,&BACKEND->cred->cred_handle,&BACKEND->cred->time_stamp);

    if(client_certs[0])
      CertFreeCertificateContext(client_certs[0]);

    if(sspi_status != SEC_E_OK) {char buffer[STRERROR_LEN];failf(data, "  @ 319 @ literal: "schannel: AcquireCredentialsHandle failed: %s"  @ 403 @ 
name: conn  @ 24 @ name: conn  @ 25 @ 
name: host  @ 24 @ name: host  @ 25 @ 
init  @ 15 @ init  @ 16 @ 
decl  @ 2 @ decl  @ 5 @ 
expr  @ 30 @ expr  @ 33 @ 
literal: ")&&curlx_verify_windows_version(6, 3, PLATFORM_WINNT, VERSION_GREATER_THAN_EQUAL);
#elseBACKEND->use_alpn = false;
#endif#ifdef _WIN32_WCE
#ifdef HAS_MANUAL_VERIFY_API/* certificate validation on CE doesn't seem to work right; we'll * do it following a more manual process. */
  BACKEND->use_manual_cred_validation = true;
#else#error "  @ 39 @ literal: "compiler too old to support requisite manual cert verify for Win CE"  @ 61 @ 
operator: .  @ 24 @ operator: .  @ 25 @ 
name: host  @ 25 @ name: host  @ 26 @ 
decl  @ 4 @ decl  @ 4 @ 
name: Curl_schannel_cred  @ 16 @ name: curl_schannel_cred  @ 17 @ 
name: struct  @ 17 @ name: struct  @ 18 @ 
decl_stmt  @ 24 @ decl_stmt  @ 25 @ 
name  @ 2 @ name  @ 2 @ 
literal: 0x  @ 277 @ literal: 0  @ 351 @ 
literal: ",Curl_sspi_strerror(sspi_status, buffer, sizeof(buffer)));
      return CURLE_PEER_FAILED_VERIFICATION;/*case SEC_E_INVALID_HANDLE:case SEC_E_INVALID_TOKEN:case SEC_E_LOGON_DENIED:case SEC_E_TARGET_UNKNOWN:case SEC_E_NO_AUTHENTICATING_AUTHORITY:case SEC_E_INTERNAL_ERROR:case SEC_E_NO_CREDENTIALS:case SEC_E_UNSUPPORTED_FUNCTION:case SEC_E_APPLICATION_PROTOCOL_MISMATCH:*/
    default:failf(data, "  @ 437 @ literal: "schannel: initial InitializeSecurityContext failed: %s"  @ 523 @ 
literal: ""  @ 452 @ literal: "sending %lu bytes...\n"  @ 549 @ 
expr  @ 5 @ expr  @ 6 @ 
decl_stmt  @ 14 @ decl_stmt  @ 15 @ 
literal: "))) {
        failf(data, "  @ 195 @ literal: " or file for %s"  @ 216 @ 
decl_stmt  @ 5 @ decl_stmt  @ 6 @ 
name: VERSION_LESS_THAN_EQUAL  @ 32 @ name: VERSION_LESS_THAN_EQUAL  @ 36 @ 
argument_list  @ 30 @ argument_list  @ 31 @ 
init  @ 5 @ init  @ 6 @ 
type  @ 15 @ type  @ 16 @ 
expr  @ 14 @ expr  @ 15 @ 
expr  @ 16 @ expr  @ 17 @ 
name: ssl_connect_data  @ 5 @ name: ssl_connect_data  @ 6 @ 
name: outbuf  @ 6 @ name: outbuf  @ 7 @ 
name: name  @ 25 @ name: name  @ 26 @ 
ternary  @ 24 @ ternary  @ 25 @ 
name: NULL  @ 14 @ name: NULL  @ 15 @ 
decl_stmt  @ 11 @ decl_stmt  @ 12 @ 
modifier: *  @ 16 @ modifier: *  @ 17 @ 
literal: ",data->set.ssl.primary.clientcert);
            free(certdata);return CURLE_SSL_CERTPROBLEM;
          }}

        /* Convert key-pair data to the in-memory certificate store */datablob.pbData = (BYTE*)certdata;
        datablob.cbData = (DWORD)certsize;

        if(data->set.ssl.key_passwd != NULL)
          pwd_len = strlen(data->set.ssl.key_passwd);
        pszPassword = (WCHAR*)malloc(sizeof(WCHAR)*(pwd_len + 1));if(pszPassword) {
          if(pwd_len>0)
            str_w_len = MultiByteToWideChar(CP_UTF8, MB_ERR_INVALID_CHARS, data->set.ssl.key_passwd, (int)pwd_len, pszPassword, (int)(pwd_len + 1));

          if((str_w_len>= 0)&&(str_w_len<= (int)pwd_len))
            pszPassword[str_w_len]= 0;
          elsepszPassword[0] = 0;cert_store = PFXImportCertStore(&datablob, pszPassword, 0);
          free(pszPassword);}
        if(!blob)free(certdata);
        if(cert_store == NULL) {DWORD errorcode = GetLastError();
          if(errorcode == ERROR_INVALID_PASSWORD)failf(data, "  @ 227 @ literal: 1  @ 275 @ 
type  @ 2 @ type  @ 5 @ 
operator: .  @ 24 @ operator: .  @ 25 @ 
expr  @ 25 @ expr  @ 26 @ 
literal: ");

        if(result&&!fInCert) {
          failf(data, "  @ 186 @ literal: 0  @ 196 @ 
literal: 0x  @ 259 @ literal: 0  @ 306 @ 
decl  @ 24 @ decl  @ 25 @ 
type  @ 1 @ type  @ 1 @ 
name  @ 14 @ name  @ 15 @ 
name: infof  @ 30 @ name: infof  @ 31 @ 
endif  @ 20 @ endif  @ 480 @ 
name: unsigned  @ 11 @ name: unsigned  @ 12 @ 
type  @ 27 @ type  @ 28 @ 
specifier: static  @ 1 @ specifier: static  @ 1 @ 
literal: "));
      }else {
        schannel_cred.dwFlags |= SCH_CRED_REVOCATION_CHECK_CHAIN;DEBUGF(infof(data, "  @ 109 @ literal: "schannel: checking server certificate revocation\n"  @ 134 @ 
decl_stmt  @ 16 @ decl_stmt  @ 17 @ 
literal: ");
      return CURLE_SSL_CONNECT_ERROR;}

    if(SSL_CONN_CONFIG(cipher_list)) {result = set_ssl_ciphers(&schannel_cred, SSL_CONN_CONFIG(cipher_list));
      if(CURLE_OK != result) {failf(data, "  @ 147 @ literal: "Unable to set ciphers to passed via SSL_CONN_CONFIG"  @ 179 @ 
name: http_proxy  @ 24 @ name: http_proxy  @ 25 @ 
type  @ 13 @ type  @ 14 @ 
call  @ 32 @ call  @ 35 @ 
argument_list  @ 32 @ argument_list  @ 35 @ 
name: Curl_easy  @ 2 @ name: Curl_easy  @ 5 @ 
name: outbuf_desc  @ 7 @ name: outbuf_desc  @ 8 @ 
comment: /* Schannel in Windows XP (OS version 5.1) uses legacy handshakes and algorithms that may not be supported by all servers. */  @ 33 @ comment: /* Schannel in Windows XP (OS version 5.1) uses legacy handshakes and
       algorithms that may not be supported by all servers. */  @ 37 @ 
name: in_addr  @ 17 @ name: in_addr  @ 18 @ 
directive: ifdef  @ 10 @ directive: ifdef  @ 43 @ 
literal: ",Curl_sspi_strerror(sspi_status, buffer, sizeof(buffer)));
      Curl_safefree(BACKEND->cred);
      switch(sspi_status) {case SEC_E_INSUFFICIENT_MEMORY:
        return CURLE_OUT_OF_MEMORY;case SEC_E_NO_CREDENTIALS:
      case SEC_E_SECPKG_NOT_FOUND:case SEC_E_NOT_OWNER:
      case SEC_E_UNKNOWN_CREDENTIALS:case SEC_E_INTERNAL_ERROR:
      default:return CURLE_SSL_CONNECT_ERROR;
      }}
  }/* Warn if SNI is disabled due to use of an IP address */
  if(Curl_inet_pton(AF_INET, hostname,&addr)#ifdef ENABLE_IPV6 || Curl_inet_pton(AF_INET6, hostname,&addr6)#endif) {
    infof(data, "  @ 336 @ literal: "schannel: using IP address, SNI is not supported by OS.\n"  @ 426 @ 
init  @ 4 @ init  @ 4 @ 
expr  @ 30 @ expr  @ 33 @ 
argument  @ 30 @ argument  @ 33 @ 
literal: ""  @ 58 @ literal: "certificate verification via CA bundle file."  @ 72 @ 
name: connectdata  @ 2 @ name: connectdata  @ 2 @ 
directive: else  @ 26 @ directive: else  @ 477 @ 
argument  @ 32 @ argument  @ 36 @ 
name  @ 2 @ name  @ 5 @ 
operator: ->  @ 27 @ operator: ->  @ 28 @ 
name: ENABLE_IPV6  @ 18 @ name: ENABLE_IPV6  @ 19 @ 
specifier: const  @ 24 @ specifier: const  @ 25 @ 
literal: " "  @ 124 @ literal: "comparing the supplied target name with the subject "  @ 148 @ 
directive: endif  @ 20 @ directive: endif  @ 480 @ 
decl  @ 5 @ decl  @ 6 @ 
decl_stmt  @ 7 @ decl_stmt  @ 8 @ 
literal: " "  @ 456 @ literal: "sent %zd of %lu bytes"  @ 557 @ 
name: sockindex  @ 2 @ name: sockindex  @ 2 @ 
name: DEBUGF  @ 30 @ name: DEBUGF  @ 31 @ 
then  @ 24 @ then  @ 25 @ 
name: name  @ 24 @ name: name  @ 25 @ 
operator: .  @ 25 @ operator: .  @ 26 @ 
name: SSL_IS_PROXY  @ 24 @ name: SSL_IS_PROXY  @ 25 @ 
name: conn  @ 27 @ name: conn  @ 28 @ 
type  @ 21 @ type  @ 22 @ 
decl  @ 21 @ decl  @ 22 @ 
name: hostname  @ 30 @ name: hostname  @ 33 @ 
directive: ifdef  @ 18 @ directive: ifdef  @ 19 @ 
argument  @ 382 @ argument  @ 465 @ 
type  @ 19 @ type  @ 20 @ 
endif  @ 12 @ endif  @ 29 @ 
argument  @ 30 @ argument  @ 31 @ 
decl  @ 6 @ decl  @ 7 @ 

