static void *
H5F__cache_superblock_deserialize(const void *_image, size_t H5_ATTR_NDEBUG_UNUSED len, void *_udata,
                                  hbool_t H5_ATTR_UNUSED *dirty)
{
    H5F_super_t *              sblock    = NULL;                                /* File's superblock */
    H5F_superblock_cache_ud_t *udata     = (H5F_superblock_cache_ud_t *)_udata; /* User data */
    const uint8_t *            image     = _image; /* Pointer into raw data buffer */
    H5F_super_t *              ret_value = NULL;   /* Return value */

    FUNC_ENTER_PACKAGE

    /* Check arguments */
    HDassert(image);
    HDassert(udata);
    HDassert(udata->f);
    HDassert(len >= H5F_SUPERBLOCK_FIXED_SIZE + 6);

    /* Allocate space for the superblock */
    if (NULL == (sblock = H5FL_CALLOC(H5F_super_t)))
        HGOTO_ERROR(H5E_RESOURCE, H5E_NOSPACE, NULL, "memory allocation failed")

    /* Deserialize the file superblock's prefix */
    if (H5F__superblock_prefix_decode(sblock, &image, udata, FALSE) < 0)
        HGOTO_ERROR(H5E_FILE, H5E_CANTDECODE, NULL, "can't decode file superblock prefix")

    /* Check for older version of superblock format */
    if (sblock->super_vers < HDF5_SUPERBLOCK_VERSION_2) {
        uint32_t status_flags;  /* File status flags	   */
        unsigned sym_leaf_k;    /* Symbol table leaf node's 'K' value */
        unsigned snode_btree_k; /* B-tree symbol table internal node 'K' value */
        unsigned chunk_btree_k; /* B-tree chunk internal node 'K' value */

        /* Freespace version (hard-wired) */
        if (HDF5_FREESPACE_VERSION != *image++)
            HGOTO_ERROR(H5E_FILE, H5E_BADVALUE, NULL, "bad free space version number")

        /* Root group version number (hard-wired) */
        if (HDF5_OBJECTDIR_VERSION != *image++)
            HGOTO_ERROR(H5E_FILE, H5E_BADVALUE, NULL, "bad object directory version number")

        /* Skip over reserved byte */
        image++;

        /* Shared header version number (hard-wired) */
        if (HDF5_SHAREDHEADER_VERSION != *image++)
            HGOTO_ERROR(H5E_FILE, H5E_BADVALUE, NULL, "bad shared-header format version number")

        /* Skip over size of file addresses (already decoded) */
        image++;
        udata->f->shared->sizeof_addr = sblock->sizeof_addr; /* Keep a local copy also */

        /* Skip over size of file sizes (already decoded) */
        image++;
        udata->f->shared->sizeof_size = sblock->sizeof_size; /* Keep a local copy also */

        /* Skip over reserved byte */
        image++;

        /* Various B-tree sizes */
        UINT16DECODE(image, sym_leaf_k);
        if (sym_leaf_k == 0)
            HGOTO_ERROR(H5E_FILE, H5E_BADRANGE, NULL, "bad symbol table leaf node 1/2 rank")
        udata->sym_leaf_k = sym_leaf_k; /* Keep a local copy also */

        /* Need 'get' call to set other array values */
        UINT16DECODE(image, snode_btree_k);
        if (snode_btree_k == 0)
            HGOTO_ERROR(H5E_FILE, H5E_BADRANGE, NULL, "bad 1/2 rank for btree internal nodes")
        udata->btree_k[H5B_SNODE_ID] = snode_btree_k;

        /*
         * Delay setting the value in the property list until we've checked
         * for the indexed storage B-tree internal 'K' value later.
         */

        /* File status flags (not really used yet) */
        UINT32DECODE(image, status_flags);
        HDassert(status_flags <= 255);
        sblock->status_flags = (uint8_t)status_flags;
        if (sblock->status_flags & ~H5F_SUPER_ALL_FLAGS)
            HGOTO_ERROR(H5E_FILE, H5E_BADVALUE, NULL, "bad flag value for superblock")

        /*
         * If the superblock version # is greater than 0, read in the indexed
         * storage B-tree internal 'K' value
         */
        if (sblock->super_vers > HDF5_SUPERBLOCK_VERSION_DEF) {
            UINT16DECODE(image, chunk_btree_k);

            /* Reserved bytes are present only in version 1 */
            if (sblock->super_vers == HDF5_SUPERBLOCK_VERSION_1)
                image += 2; /* reserved */
        }                   /* end if */
        else
            chunk_btree_k = HDF5_BTREE_CHUNK_IK_DEF;
        udata->btree_k[H5B_CHUNK_ID] = chunk_btree_k;

        /* Remainder of "variable-sized" portion of superblock */
        H5F_addr_decode(udata->f, (const uint8_t **)&image, &sblock->base_addr /*out*/);
        H5F_addr_decode(udata->f, (const uint8_t **)&image, &sblock->ext_addr /*out*/);
        H5F_addr_decode(udata->f, (const uint8_t **)&image, &udata->stored_eof /*out*/);
        H5F_addr_decode(udata->f, (const uint8_t **)&image, &sblock->driver_addr /*out*/);

        /* Allocate space for the root group symbol table entry */
        HDassert(!sblock->root_ent);
        if (NULL == (sblock->root_ent = (H5G_entry_t *)H5MM_calloc(sizeof(H5G_entry_t))))
            HGOTO_ERROR(H5E_FILE, H5E_CANTALLOC, NULL,
                        "can't allocate space for root group symbol table entry")

        /* decode the root group symbol table entry */
        if (H5G_ent_decode(udata->f, (const uint8_t **)&image, sblock->root_ent) < 0)
            HGOTO_ERROR(H5E_FILE, H5E_CANTDECODE, NULL, "can't decode root group symbol table entry")

        /* Set the root group address to the correct value */
        sblock->root_addr = sblock->root_ent->header;

        /* This step is for h5repart tool only. If user wants to change file driver
         *  from family to sec2 while using h5repart, set the driver address to
         *  undefined to let the library ignore the family driver information saved
         *  in the superblock.
         */
        if (udata->ignore_drvrinfo && H5F_addr_defined(sblock->driver_addr)) {
            /* Eliminate the driver info */
            sblock->driver_addr     = HADDR_UNDEF;
            udata->drvrinfo_removed = TRUE;
        } /* end if */

        /* NOTE: Driver info block is decoded separately, later */

    } /* end if */
    else {
        uint32_t read_chksum; /* Checksum read from file  */

        /* Skip over size of file addresses (already decoded) */
        image++;
        udata->f->shared->sizeof_addr = sblock->sizeof_addr; /* Keep a local copy also */

        /* Skip over size of file sizes (already decoded) */
        image++;
        udata->f->shared->sizeof_size = sblock->sizeof_size; /* Keep a local copy also */

        /* File status flags (not really used yet) */
        sblock->status_flags = *image++;
        if (sblock->status_flags & ~H5F_SUPER_ALL_FLAGS)
            HGOTO_ERROR(H5E_FILE, H5E_BADVALUE, NULL, "bad flag value for superblock")

        /* Base, superblock extension, end of file & root group object header addresses */
        H5F_addr_decode(udata->f, (const uint8_t **)&image, &sblock->base_addr /*out*/);
        H5F_addr_decode(udata->f, (const uint8_t **)&image, &sblock->ext_addr /*out*/);
        H5F_addr_decode(udata->f, (const uint8_t **)&image, &udata->stored_eof /*out*/);
        H5F_addr_decode(udata->f, (const uint8_t **)&image, &sblock->root_addr /*out*/);

        /* checksum verification already done in verify_chksum cb */

        /* Decode checksum */
        UINT32DECODE(image, read_chksum);

        /* The Driver Information Block may not appear with the version
         * 2 super block.  Thus we set the driver_addr field of the in
         * core representation of the super block HADDR_UNDEF to prevent
         * any attempt to load the Driver Information Block.
         */
        sblock->driver_addr = HADDR_UNDEF;
    } /* end else */

    /* Sanity check */
    HDassert((size_t)(image - (const uint8_t *)_image) <= len);

    /* Set return value */
    ret_value = sblock;

done:
    /* Release the [possibly partially initialized] superblock on error */
    if (!ret_value && sblock)
        if (H5F__super_free(sblock) < 0)
            HDONE_ERROR(H5E_FILE, H5E_CANTFREE, NULL, "unable to destroy superblock data")

    FUNC_LEAVE_NOAPI(ret_value)
} /* end H5F__cache_superblock_deserialize() */
