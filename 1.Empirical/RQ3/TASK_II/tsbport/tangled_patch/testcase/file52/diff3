-1c-1
---
>      LOG_TRACE ("\nsection_info[%d] fields:\n", i)LOG_TRACE ("size:%ld\n", (long)info->size)LOG_TRACE ("num_sections:%u\n", info->num_sections)LOG_TRACE ("max_decomp_size: %u / 0x%x\n", // normally 0x7400, max 0x8000 info->max_decomp_size, info->max_decomp_size)LOG_TRACE ("unknown: %u\n", info->unknown)LOG_TRACE ("compressed:%u (1=no, 2=yes)\n", info->compressed)LOG_TRACE ("type:%d\n", (int)info->type)LOG_TRACE ("encrypted: %d (0=no, 1=yes, 2=unknown)\n", info->encrypted)LOG_TRACE ("name:%s\n", info->name);
-1c-1,16
---
>      if (info->max_decomp_size > 0x8000)
>        {
>          LOG_ERROR ("Skip section %s with max decompression size 0x%x > 0x8000", info->name, info->max_decomp_size);
>          info->max_decomp_size = info->size = 0;
>          error |= DWG_ERR_VALUEOUTOFBOUNDS;
>        }
>      if (info->size > info->num_sections * info->max_decomp_size)
>        {
>          LOG_ERROR ("Skip section %s with size %lu > %d * " FORMAT_RL, info->name, info->size, info->num_sections, info->max_decomp_size);
>          info->max_decomp_size = info->size = info->num_sections = 0;
>          error |= DWG_ERR_VALUEOUTOFBOUNDS;
>        }
>      if (info->num_sections > 1 && info->size < info->max_decomp_size)
>        {
>          LOG_ERROR ("Skip section %s with size %lu < max_decomp_size " FORMAT_RL, info->name, info->size, info->max_decomp_size);
>          info->max_decomp_size = info->size = info->num_sections = 0;
>          error |= DWG_ERR_VALUEOUTOFBOUNDS;
>        }
-1c-1
---
>  sec_dat->size = info->size;
2020,2133c2020,2023
<                 info->name, info->num_sections, info->max_decomp_size);
<      return DWG_ERR_VALUEOUTOFBOUNDS;
<    }
<  if (info->size > (int64_t)info->num_sections * (int64_t)info->max_decomp_size
<      || info->size < 0)
<    {
<      LOG_ERROR ("Invalid section %s size %" PRId64 " > %u * " FORMAT_RL,
<                 info->name, info->size, info->num_sections,
<                 info->max_decomp_size);
<      return DWG_ERR_VALUEOUTOFBOUNDS;
<    }
<  LOG_HANDLE ("Alloc section %s size %" PRIu32 "\n", info->name,
<              max_decomp_size);
<  decomp = (BITCODE_RC *)calloc (max_decomp_size, sizeof (BITCODE_RC));
<  if (!decomp)
<    {
<      LOG_ERROR ("Out of memory with " FORMAT_RL
<                 " sections of size: " FORMAT_RL,
<                 info->num_sections, info->max_decomp_size);
<      return DWG_ERR_OUTOFMEM;
<    }
<  bytes_left = max_decomp_size;
<  sec_dat->bit = 0;
<  sec_dat->byte = 0;
<  sec_dat->version = dat->version;
<  sec_dat->from_version = dat->from_version;
<  sec_dat->chain = decomp;
<  sec_dat->size = 0;
<  for (i = j = 0; i < info->num_sections; ++i, ++j)
<    {
<      uint32_t address, sec_mask;
<      if (!info->sections[i])
<        {
<          LOG_WARN ("Skip empty section %u %s", i, info->name);
<          if (i == info->num_sections - 1) // the last one
<            {
<              sec_dat->chain = NULL; // fix double-free
<              free (decomp);
<              return DWG_ERR_SECTIONNOTFOUND;
<            }
<          j--; // index for writing info->max_decomp_size chunks
<          continue;
<        }
<      address = info->sections[i]->address;
<      dat->byte = address;
<      bit_read_fixed (dat, es.char_data, 32);
<      sec_mask = htole32 (0x4164536b ^ address);
<      {
<        int k;
<        for (k = 0; k < 8; ++k)
<          es.long_data[k] = le32toh (es.long_data[k] ^ sec_mask);
<      }
<      LOG_INFO ("=== Section %s (%u) @%u ===\n", info->name, i, address)
<      if (es.fields.tag != 0x4163043b)
<        {
<          LOG_WARN ("Section Tag:      0x%x  (should be 0x4163043b)",
<                    (unsigned)es.fields.tag);
<        }
<      else
<        {
<          LOG_INFO ("Section Tag:      0x%x\n", (unsigned)es.fields.tag);
<        }
<      LOG_INFO ("Section Type:     %u\n", (unsigned)es.fields.section_type)
<      LOG_INFO ("Data size:        0x%x/%u\n", (unsigned)es.fields.data_size,
<                (unsigned)es.fields.data_size)
<      LOG_INFO ("Comp data size:   0x%x\n", (unsigned)es.fields.section_size)
<      LOG_TRACE ("StartOffset:      0x%x\n", (unsigned)es.fields.address)
<      LOG_HANDLE ("Unknown:          0x%x\n", (unsigned)es.fields.unknown)
<      LOG_HANDLE ("Checksum1:        0x%X\n", (unsigned)es.fields.checksum_1)
<      LOG_HANDLE ("Checksum2:        0x%X\n", (unsigned)es.fields.checksum_2)
<      LOG_TRACE ("Section start:    %" PRIuSIZE "\n\n", dat->byte);
<      LOG_INSANE ("info[%d]->max_decomp_size: %" PRIuSIZE " (0x%zx)\n", i,
<                  (size_t)info->max_decomp_size, (size_t)info->max_decomp_size)
<      LOG_INSANE ("max_decomp_size:          %" PRIuSIZE " (0x%zx)\n",
<                  (size_t)max_decomp_size, (size_t)max_decomp_size)
<      LOG_INSANE ("bytes_left:               %ld\n", bytes_left);
<      if (info->compressed == 2 && bytes_left > 0
<          && (j * info->max_decomp_size) <= max_decomp_size)
<        {
<          error = decompress_R2004_section (
<              dat, &decomp[j * info->max_decomp_size], // offset
<              info->max_decomp_size, es.fields.data_size);
<          if (error > DWG_ERR_CRITICAL)
<            {
<              sec_dat->chain = NULL; // fix double-free
<              free (decomp);
<              return error;
<            }
<          bytes_left -= info->max_decomp_size;
<          sec_dat->size += info->max_decomp_size;
<        }
<      else
<        {
<          const size_t offset = address + es.fields.address + 32;
<          const BITCODE_RL size = MIN (info->size, info->max_decomp_size);
<          if (info->compressed == 2 || bytes_left < 0
<              || (j * info->max_decomp_size) + size > max_decomp_size
<              || offset + size > dat->size)
<            {
<              LOG_ERROR ("Some section size or address out of bounds")
<              sec_dat->chain = NULL;
<              free (decomp);
<              return type < SECTION_REVHISTORY ? DWG_ERR_INVALIDDWG
---
>error = decompress_R2004_section (
>              dat, &decomp[j * info->max_decomp_size], // offset
>              info->max_decomp_size, es.fields.data_size);
>return DWG_ERR_VALUEOUTOFBOUNDS;
2036c2036
<      LOG_ERROR ("Out of memory with " FORMAT_RL
---
>LOG_ERROR ("Out of memory with %u sections of size: %u", info->num_sections, info->max_decomp_size);
2046a2047
>  sec_dat->size = 0;
