name: ci  @ 4 @ name: c  @ 2 @ 
name: Proto  @ 4 @ name: char  @ 1 @ 
expr  @ 28 @ expr  @ 11 @ 
if  @ 23 @ if  @ 4 @ 
name: resethookcount  @ 16 @ name: INDEXK  @ 3 @ 
operator: =  @ 37 @ operator: =  @ 17 @ 
name: pc  @ 28 @ name: pc  @ 11 @ 
name: luaG_traceexec  @ 1 @ name: kname  @ 1 @ 
operator: ->  @ 37 @ operator: *  @ 17 @ 
expr_stmt  @ 37 @ expr_stmt  @ 17 @ 
type  @ 1 @ type  @ 1 @ 
expr  @ 16 @ expr  @ 3 @ 
operator: ->  @ 13 @ operator: ->  @ 3 @ 
comment: /* 'pc' of last call to line hook */  @ 33 @ comment: /* else no reasonable name found */  @ 15 @ 
argument  @ 28 @ argument  @ 11 @ 
name: p  @ 4 @ name: name  @ 1 @ 
specifier: const  @ 4 @ specifier: const  @ 1 @ 
argument_list  @ 16 @ argument_list  @ 3 @ 
name: L  @ 16 @ name: c  @ 3 @ 
type  @ 4 @ type  @ 1 @ 
name: ci  @ 24 @ name: svalue  @ 5 @ 
name: top  @ 24 @ name: name  @ 5 @ 
expr  @ 28 @ expr  @ 11 @ 
type  @ 7 @ type  @ 1 @ 
literal: 1  @ 37 @ literal: "?"  @ 17 @ 
comment: /* 'L->oldpc' may be invalid; reset it in this case */  @ 6 @ comment: /* is 'c' a constant? */  @ 2 @ 
name: hookcount  @ 37 @ name: name  @ 17 @ 
expr  @ 24 @ expr  @ 5 @ 
if_stmt  @ 23 @ if_stmt  @ 4 @ 
block_content  @ 24 @ block_content  @ 5 @ 
expr  @ 23 @ expr  @ 4 @ 
argument  @ 23 @ argument  @ 4 @ 
comment: /* enter new line */  @ 30 @ comment: /* 'name' already filled */  @ 13 @ 
operator: <=  @ 29 @ operator: ==  @ 12 @ 
expr_stmt  @ 24 @ expr_stmt  @ 5 @ 
comment: /* call count hook */  @ 26 @ comment: /* else no reasonable name found */  @ 8 @ 
type  @ 28 @ type  @ 11 @ 
parameter  @ 1 @ parameter  @ 1 @ 
argument  @ 28 @ argument  @ 11 @ 
condition  @ 23 @ condition  @ 4 @ 
expr  @ 4 @ expr  @ 2 @ 
argument  @ 4 @ argument  @ 2 @ 
operator: ||  @ 29 @ operator: *  @ 12 @ 
name: int  @ 7 @ name: int  @ 1 @ 
function  @ 1 @ function  @ 1 @ 
modifier: *  @ 1 @ modifier: *  @ 1 @ 
name: p  @ 28 @ name: p  @ 11 @ 
name: ci  @ 2 @ name: c  @ 1 @ 
expr  @ 16 @ expr  @ 3 @ 
name: pc  @ 12 @ name: p  @ 3 @ 
expr  @ 4 @ expr  @ 2 @ 
comment: /* enter new line */  @ 29 @ comment: /* found a constant name? */  @ 12 @ 
comment: /* mark that it yielded */  @ 39 @ comment: /* no reasonable name found */  @ 17 @ 
name: int  @ 1 @ name: int  @ 1 @ 
name: int  @ 28 @ name: char  @ 11 @ 
name: mask  @ 14 @ name: k  @ 3 @ 
expr  @ 28 @ expr  @ 11 @ 
name: npci  @ 28 @ name: what  @ 11 @ 
name: isIT  @ 23 @ name: ttisstring  @ 4 @ 
decl  @ 1 @ decl  @ 1 @ 
argument_list  @ 23 @ argument_list  @ 4 @ 
type  @ 1 @ type  @ 1 @ 
name: pcRel  @ 28 @ name: getobjname  @ 11 @ 
modifier: *  @ 4 @ modifier: *  @ 1 @ 
expr  @ 23 @ expr  @ 4 @ 
call  @ 16 @ call  @ 3 @ 
operator: ==  @ 29 @ operator: &&  @ 12 @ 
expr  @ 29 @ expr  @ 12 @ 
condition  @ 29 @ condition  @ 12 @ 
call  @ 23 @ call  @ 4 @ 
decl  @ 2 @ decl  @ 1 @ 
name: sizecode  @ 7 @ name: kvalue  @ 3 @ 
name: L  @ 1 @ name: p  @ 1 @ 
unit  @ 1 @ unit  @ 1 @ 
if_stmt  @ 29 @ if_stmt  @ 12 @ 
argument_list  @ 28 @ argument_list  @ 11 @ 
name: top  @ 24 @ name: kvalue  @ 5 @ 
name: ci_func  @ 4 @ name: ISK  @ 2 @ 
call  @ 28 @ call  @ 11 @ 
name: pc  @ 29 @ name: what  @ 12 @ 
block_content  @ 30 @ block_content  @ 13 @ 
decl_stmt  @ 28 @ decl_stmt  @ 11 @ 
argument  @ 16 @ argument  @ 3 @ 
block_content  @ 28 @ block_content  @ 11 @ 
block  @ 24 @ block  @ 4 @ 
init  @ 28 @ init  @ 11 @ 
name: pc  @ 1 @ name: pc  @ 1 @ 
decl  @ 1 @ decl  @ 1 @ 
decl  @ 28 @ decl  @ 11 @ 
operator: &  @ 8 @ operator: &  @ 3 @ 
call  @ 4 @ call  @ 2 @ 
parameter  @ 1 @ parameter  @ 1 @ 
expr  @ 37 @ expr  @ 17 @ 
name: ci  @ 23 @ name: kvalue  @ 4 @ 
operator: ->  @ 24 @ operator: *  @ 5 @ 
if  @ 29 @ if  @ 12 @ 
block  @ 27 @ block  @ 10 @ 
name: lua_State  @ 1 @ name: Proto  @ 1 @ 
block  @ 29 @ block  @ 12 @ 
argument_list  @ 4 @ argument_list  @ 2 @ 
operator: =  @ 24 @ operator: =  @ 5 @ 
name: npci  @ 29 @ name: what  @ 12 @ 

