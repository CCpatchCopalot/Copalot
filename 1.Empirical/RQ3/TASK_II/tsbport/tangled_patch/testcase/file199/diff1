194a195,196
> static void ossl_associate_connection(struct Curl_easy *data,struct connectdata *conn,int sockindex);
> 
2234a2237
>   void *ssl_sessionid = NULL;
2764,2783c2767
<   /* Check if there's a cached ID we can/should use here! */
<   if(SSL_SET_OPTION(primary.sessionid)) {
<     void *ssl_sessionid = NULL;
<     int data_idx = ossl_get_ssl_data_index();
<     int connectdata_idx = ossl_get_ssl_conn_index();
<     int sockindex_idx = ossl_get_ssl_sockindex_index();
<     int proxy_idx = ossl_get_proxy_index();
< 
<     if(data_idx >= 0 && connectdata_idx >= 0 && sockindex_idx >= 0 && proxy_idx >= 0) {
<       /* Store the data needed for the "new session" callback. * The sockindex is stored as a pointer to an array element. */
<       SSL_set_ex_data(backend->handle, data_idx, data);
<       SSL_set_ex_data(backend->handle, connectdata_idx, conn);
<       SSL_set_ex_data(backend->handle, sockindex_idx, conn->sock + sockindex);
< #ifndef CURL_DISABLE_PROXY
<       SSL_set_ex_data(backend->handle, proxy_idx, SSL_IS_PROXY() ? (void *) 1:NULL);
< #else
<       SSL_set_ex_data(backend->handle, proxy_idx, NULL);
< #endif
< 
<     }
---
>   ossl_associate_connection(data, conn, sockindex);
2797d2780
<   }
3869a3853,3921
> static void ossl_associate_connection(struct Curl_easy *data,struct connectdata *conn,int sockindex)
> {
>   struct ssl_connect_data *connssl = &conn->ssl[sockindex];
>   struct ssl_backend_data *backend = connssl->backend;
> 
>   /* If we don't have SSL context, do nothing. */
>   if(!backend->handle)
>     return;
> 
>   if(SSL_SET_OPTION(primary.sessionid)) {
>     int data_idx = ossl_get_ssl_data_index();
>     int connectdata_idx = ossl_get_ssl_conn_index();
>     int sockindex_idx = ossl_get_ssl_sockindex_index();
>     int proxy_idx = ossl_get_proxy_index();
> 
>     if(data_idx >= 0 && connectdata_idx >= 0 && sockindex_idx >= 0 && proxy_idx >= 0) {
>       /* Store the data needed for the "new session" callback. * The sockindex is stored as a pointer to an array element. */
>       SSL_set_ex_data(backend->handle, data_idx, data);
>       SSL_set_ex_data(backend->handle, connectdata_idx, conn);
>       SSL_set_ex_data(backend->handle, sockindex_idx, conn->sock + sockindex);
> #ifndef CURL_DISABLE_PROXY
>       SSL_set_ex_data(backend->handle, proxy_idx, SSL_IS_PROXY() ? (void *) 1:NULL);
> #else
>       SSL_set_ex_data(backend->handle, proxy_idx, NULL);
> #endif
>     }
>   }
> }
> 
> /* * Starting with TLS 1.3, the ossl_new_session_cb callback gets called after * the handshake. If the transfer that sets up the callback gets killed before * this callback arrives, we must make sure to properly clear the data to * avoid UAF problems. A future optimization could be to instead store another * transfer that might still be using the same connection. */
> 
> static void ossl_disassociate_connection(struct Curl_easy *data, int sockindex)
> {
>   struct connectdata *conn = data->conn;
>   struct ssl_connect_data *connssl = &conn->ssl[sockindex];
>   struct ssl_backend_data *backend = connssl->backend;
> 
>   /* If we don't have SSL context, do nothing. */
>   if(!backend->handle)
>     return;
> 
>   if(SSL_SET_OPTION(primary.sessionid)) {
>     bool isproxy = FALSE;
>     bool incache;
>     void *old_ssl_sessionid = NULL;
>     int data_idx = ossl_get_ssl_data_index();
>     int connectdata_idx = ossl_get_ssl_conn_index();
>     int sockindex_idx = ossl_get_ssl_sockindex_index();
>     int proxy_idx = ossl_get_proxy_index();
> 
>     if(data_idx >= 0 && connectdata_idx >= 0 && sockindex_idx >= 0 && proxy_idx >= 0) {
>       /* Invalidate the session cache entry, if any */
>       isproxy = SSL_get_ex_data(backend->handle, proxy_idx) ? TRUE : FALSE;
> 
>       /* Disable references to data in "new session" callback to avoid * accessing a stale pointer. */
>       SSL_set_ex_data(backend->handle, data_idx, NULL);
>       SSL_set_ex_data(backend->handle, connectdata_idx, NULL);
>       SSL_set_ex_data(backend->handle, sockindex_idx, NULL);
>       SSL_set_ex_data(backend->handle, proxy_idx, NULL);
>     }
> 
>     Curl_ssl_sessionid_lock(data);
>     incache = !(Curl_ssl_getsessionid(data, conn, isproxy,&old_ssl_sessionid, NULL, sockindex));
>     if(incache)
>       Curl_ssl_delsessionid(data, old_ssl_sessionid);
>     Curl_ssl_sessionid_unlock(data);
>   }
> }
> 
3905c3957
<   ossl_sha256sum            /* sha256sum */
---
>   ossl_sha256sum,           /* sha256sum */
3907c3959
<   NULL                      /* sha256sum */
---
>   NULL,                     /* sha256sum */
3908a3961,3962
>   ossl_associate_connection, /* associate_connection */
>   ossl_disassociate_connection /* disassociate_connection */
