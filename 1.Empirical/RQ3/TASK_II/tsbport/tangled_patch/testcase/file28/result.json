{
    "testcase": {
        "file28": {
            "match_message": {
                "Coarse:[Pa_Macro_Definition]||[Pc_Macro_Definition]": {
                    "Seg_0": {
                        "Edit": "add",
                        "L1": "7 -> 20",
                        "L2": "8 -> 21",
                        "debug": {
                            "runtime info": "True,{'state': 'success', 'type': 'cpp:include', 'info': ['precise context mattch']}",
                            "verify location": "-1",
                            "output location": "20",
                            "verify result": "False"
                        },
                        "type": "cpp:include",
                        "raw_match_info": {
                            "state": "success",
                            "type": "cpp:include",
                            "info": [
                                "precise context mattch"
                            ]
                        }
                    }
                },
                "Same: tensorflow -> tensorflow": {
                    "Seg_1": {
                        "Edit": "add",
                        "L1": "8: update L1 by L2 (6: Matched by Text Context Similarity from Source Code 27->43)",
                        "L2": "3: Unique Matched by Source code 28 -> 50"
                    },
                    "Seg_2": {
                        "Edit": "add",
                        "L1": "8: update L1 by L2 (6: Matched by Text Context Similarity from Source Code 36->60)",
                        "L2": "3: Unique Matched by Source code 37 -> 64"
                    }
                }
            },
            "verify_message": {},
            "prepare_info": [
                [
                    "Seg_0",
                    {
                        "Edit": "add",
                        "add_location": 20,
                        "add_hunk": [
                            "#include \"tensorflow/core/framework/op_requires.h\"\n"
                        ]
                    }
                ],
                [
                    "Seg_1",
                    {
                        "Edit": "add",
                        "add_location": 49,
                        "add_hunk": [
                            "  int64_t nnz = a_indices->dim_size(0);\n",
                            "  int64_t ndims = a_indices->dim_size(1);\n",
                            "  if (a_values->dim_size(0) != nnz) {\n",
                            "    return errors::InvalidArgument(\"Dimensions \", nnz, \" and \", a_values->dim_size(0), \" are not compatible\");\n",
                            "  }\n",
                            "  if (a_shape->dim_size(0) != ndims) {\n",
                            "    return errors::InvalidArgument(\"Dimensions \", ndims, \" and \", a_shape->dim_size(0), \" are not compatible\");\n",
                            "  }\n"
                        ]
                    }
                ],
                [
                    "Seg_2",
                    {
                        "Edit": "add",
                        "add_location": 63,
                        "add_hunk": [
                            "  const auto a_indices_mat = a_indices->flat_inner_dims<Index>();\n",
                            "  for (int64_t zidx = 0; zidx < nnz; ++zidx) {\n",
                            "    for (int64_t didx = 0; didx < ndims; ++didx) {\n",
                            "      const Index idx = a_indices_mat(zidx, didx);\n",
                            "      if (idx < 0 || idx >= a_shape_flat(didx)) {\n",
                            "        return errors::InvalidArgument(\"Sparse tensor has an invalid index on dimension \", didx,\": \"\"a_indices(\",zidx, \",\", didx, \") = \", idx,\", dense tensor shape: \", a_shape_flat);\n",
                            "      }\n",
                            "    }\n",
                            "  }\n"
                        ]
                    }
                ]
            ],
            "semanic_check": {
                "Coarse:[Pa_Macro_Definition]||[Pc_Macro_Definition]": {
                    "Seg_0": {
                        "type": "out func",
                        "state": "success",
                        "info": "cpp:include"
                    }
                },
                "Same: tensorflow -> tensorflow": {
                    "PDG_Mapping": "PDG Mapping Failed: Cannot load pdg dot file from pb and pc"
                }
            },
            "verify_patch": null,
            "patch_types": [
                "outside",
                "sanity_check",
                "in_loop",
                "change_type"
            ]
        }
    }
}