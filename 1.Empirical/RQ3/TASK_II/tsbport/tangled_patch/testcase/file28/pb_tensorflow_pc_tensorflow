expr  @ 10 @ expr  @ 13 @ 
call  @ 10 @ call  @ 14 @ 
operator: ::  @ 12 @ operator: ::  @ 16 @ 
name: Index  @ 8 @ name: Index  @ 8 @ 
literal: ""  @ 40 @ literal: 1  @ 60 @ 
name: a_values  @ 12 @ name: a_values  @ 16 @ 
type  @ 8 @ type  @ 9 @ 
literal: ", a_shape->NumElements(),"  @ 24 @ literal: "a_indices"  @ 50 @ 
name  @ 12 @ name  @ 17 @ 
decl  @ 8 @ decl  @ 9 @ 
literal: ", idx,"  @ 40 @ literal: 3  @ 83 @ 
decl  @ 1 @ decl  @ 1 @ 
expr  @ 3 @ expr  @ 3 @ 
literal: ",&a_shape_t));
    OP_REQUIRES_OK(ctx, ctx->input("  @ 58 @ literal: "are currently supported.  Tensor rank: "  @ 90 @ 
literal: ",&b));
    OP_REQUIRES_OK(ctx, ValidateInputs<Index>(a_indices_t, a_values_t, a_shape_t, b));

    Tensor *out_t;OP_REQUIRES_OK(ctx, ctx->allocate_output(0, b->shape(),&out_t));

    const int ndims = static_cast<int>(a_indices_t->dim_size(1));
    const auto a_indices_mat = a_indices_t->flat_inner_dims<Index>();
    const auto a_values_flat = a_values_t->flat<T>();

    switch (ndims) {#define NDIMS_CASE(N)                                                     \
  case N: {                                                               \auto out_tensor = out_t->tensor<T, N>();                              \
    out_tensor.device(ctx->eigen_device<Device>()) = b->tensor<T, N>();   \
    const Index result =                                                  \functor::ScatterNdFunctor<Device, T, Index, N,                    \
                                  scatter_op::UpdateOp::ADD>()(           \
            ctx->eigen_device<Device>(), a_indices_mat, a_values_flat,    \
            out_tensor);                                                  \OP_REQUIRES(                                                          \
        ctx, result == -1,                                                \errors::InvalidArgument(                                          \
            "  @ 59 @ literal: 0  @ 105 @ 
block  @ 9 @ block  @ 11 @ 
name: ValidateInputs  @ 8 @ name: ValidateInputs  @ 9 @ 
operator: !  @ 12 @ operator: !  @ 17 @ 
call  @ 10 @ call  @ 12 @ 
return  @ 10 @ return  @ 12 @ 
argument  @ 10 @ argument  @ 13 @ 
typedef  @ 3 @ typedef  @ 3 @ 
operator: ->  @ 10 @ operator: ->  @ 14 @ 
name: typename  @ 8 @ name: typename  @ 8 @ 
condition  @ 9 @ condition  @ 11 @ 
name: IsVector  @ 12 @ name: IsVector  @ 17 @ 
expr  @ 10 @ expr  @ 12 @ 
operator: ::  @ 9 @ operator: ::  @ 11 @ 
argument  @ 12 @ argument  @ 16 @ 
argument_list  @ 10 @ argument_list  @ 14 @ 
type  @ 1 @ type  @ 1 @ 
name: namespace  @ 1 @ name: namespace  @ 1 @ 
specifier: const  @ 8 @ specifier: const  @ 9 @ 
argument_list  @ 10 @ argument_list  @ 12 @ 
literal: ", didx, "  @ 40 @ literal: 2  @ 82 @ 
name: ThreadPoolDevice  @ 3 @ name: ThreadPoolDevice  @ 3 @ 
name: InvalidArgument  @ 10 @ name: InvalidArgument  @ 12 @ 
literal: ", a_shape_flat);
      }}
  }return Status::OK();
}}  // namespace

template<typename Device, typename T, typename Index>class SparseTensorDenseAddOp : public OpKernel {
 public:explicit SparseTensorDenseAddOp(OpKernelConstruction *ctx) : OpKernel(ctx) {}

  void Compute(OpKernelContext *ctx) override {const Tensor *a_indices_t, *a_values_t, *a_shape_t, *b;
    OP_REQUIRES_OK(ctx, ctx->input("  @ 40 @ literal: 4  @ 84 @ 
call  @ 12 @ call  @ 17 @ 
parameter  @ 8 @ parameter  @ 9 @ 
expr_stmt  @ 3 @ expr_stmt  @ 3 @ 
operator: ::  @ 12 @ operator: ::  @ 17 @ 
modifier: *  @ 8 @ modifier: *  @ 9 @ 
argument  @ 10 @ argument  @ 14 @ 
name: a_shape  @ 12 @ name: a_shape  @ 17 @ 
literal: ", a_values->dim_size(0), "  @ 18 @ literal: " and "  @ 27 @ 
name: b  @ 8 @ name: b  @ 10 @ 
literal: ",&a_values_t));
    OP_REQUIRES_OK(ctx, ctx->input("  @ 57 @ literal: "Only tensors with ranks between 1 and 5 "  @ 89 @ 
operator: !  @ 12 @ operator: !  @ 16 @ 
parameter_list  @ 8 @ parameter_list  @ 9 @ 
operator: !  @ 9 @ operator: !  @ 11 @ 
name: Tensor  @ 8 @ name: Tensor  @ 10 @ 
block_content  @ 10 @ block_content  @ 12 @ 
name  @ 10 @ name  @ 14 @ 
literal: ", a_shape->dim_size(0), "  @ 21 @ literal: " does not equal (no broadcasting is supported): sparse side "  @ 34 @ 
name: IsVector  @ 12 @ name: IsVector  @ 16 @ 
call  @ 12 @ call  @ 16 @ 
literal: ", ndims, "  @ 21 @ literal: "Dimension "  @ 33 @ 
expr  @ 9 @ expr  @ 11 @ 
argument_list  @ 12 @ argument_list  @ 17 @ 
literal: ",zidx, "  @ 40 @ literal: 1  @ 81 @ 
literal: ",a_values->shape().DebugString(), "  @ 13 @ literal: "but received shapes: "  @ 20 @ 
block  @ 1 @ block  @ 1 @ 
name: Tensor  @ 8 @ name: Tensor  @ 10 @ 
argument_list  @ 9 @ argument_list  @ 11 @ 
literal: ", didx,"  @ 40 @ literal: 0  @ 58 @ 
name: Tensor  @ 8 @ name: Tensor  @ 9 @ 
literal: "Input a_indices should be a matrix but received shape: "  @ 10 @ literal: "Input a_indices should be a matrix but received shape: "  @ 13 @ 
call  @ 12 @ call  @ 16 @ 
call  @ 9 @ call  @ 11 @ 
unit  @ 1 @ unit  @ 1 @ 
name: a_indices  @ 9 @ name: a_indices  @ 11 @ 
type  @ 8 @ type  @ 8 @ 
expr  @ 12 @ expr  @ 16 @ 
call  @ 10 @ call  @ 14 @ 
name: a_indices  @ 8 @ name: a_indices  @ 9 @ 
name: TensorShapeUtils  @ 12 @ name: TensorShapeUtils  @ 16 @ 
expr  @ 12 @ expr  @ 16 @ 
literal: ",a_shape_flat(i), "  @ 29 @ literal: "a_shape"  @ 52 @ 
modifier: *  @ 8 @ modifier: *  @ 10 @ 
expr  @ 10 @ expr  @ 14 @ 
argument  @ 8 @ argument  @ 8 @ 
literal: ", b->dim_size(i));
    }}

  // Check for invalid indices.const auto a_indices_mat = a_indices->flat_inner_dims<Index>();

  for (int64_t zidx = 0; zidx<nnz; ++zidx) {
    for (int64_t didx = 0; didx<ndims; ++didx) {
      const Index idx = a_indices_mat(zidx, didx);if (idx<0 || idx>= a_shape_flat(didx)) {
        return errors::InvalidArgument("  @ 29 @ literal: "b"  @ 53 @ 
operator: ::  @ 3 @ operator: ::  @ 3 @ 
argument  @ 9 @ argument  @ 11 @ 
name: a_indices  @ 10 @ name: a_indices  @ 14 @ 
literal: ", b->shape().DebugString()));         \
  } break;NDIMS_CASE(1);
      NDIMS_CASE(2);NDIMS_CASE(3);
      NDIMS_CASE(4);NDIMS_CASE(5);
      default:OP_REQUIRES(ctx, false,errors::InvalidArgument("  @ 83 @ literal: 0  @ 107 @ 
operator: ->  @ 9 @ operator: ->  @ 11 @ 
operator: ::  @ 10 @ operator: ::  @ 12 @ 
literal: ", result, \
            "  @ 82 @ literal: 0  @ 106 @ 
literal: 1  @ 92 @ literal: 1  @ 115 @ 
name: CPUDevice  @ 3 @ name: CPUDevice  @ 3 @ 
name: TensorShapeUtils  @ 12 @ name: TensorShapeUtils  @ 17 @ 
modifier: *  @ 8 @ modifier: *  @ 9 @ 
modifier: *  @ 8 @ modifier: *  @ 10 @ 
name: Eigen  @ 3 @ name: Eigen  @ 3 @ 
operator: ->  @ 12 @ operator: ->  @ 17 @ 
operator: ->  @ 12 @ operator: ->  @ 16 @ 
expr  @ 9 @ expr  @ 11 @ 
decl  @ 8 @ decl  @ 10 @ 
call  @ 9 @ call  @ 11 @ 
name: a_values  @ 8 @ name: a_values  @ 9 @ 
expr  @ 12 @ expr  @ 17 @ 
name: InvalidArgument  @ 13 @ name: InvalidArgument  @ 18 @ 
name: a_shape  @ 8 @ name: a_shape  @ 10 @ 
argument_list  @ 12 @ argument_list  @ 16 @ 
literal: ", i,"  @ 29 @ literal: "a_values"  @ 51 @ 
name  @ 12 @ name  @ 16 @ 
name: shape  @ 12 @ name: shape  @ 17 @ 
specifier: const  @ 8 @ specifier: const  @ 10 @ 
argument_list  @ 12 @ argument_list  @ 17 @ 
macro  @ 6 @ macro  @ 6 @ 
literal: ", nnz, "  @ 18 @ literal: "Two operands have different ranks; received: "  @ 26 @ 
operator: .  @ 10 @ operator: .  @ 14 @ 
name: errors  @ 13 @ name: errors  @ 18 @ 
name: tensorflow  @ 1 @ name: tensorflow  @ 1 @ 
operator: ::  @ 13 @ operator: ::  @ 18 @ 
literal: ");
  }if (a_shape->dim_size(0) != ndims) {
    return errors::InvalidArgument("  @ 18 @ literal: 0  @ 30 @ 
argument_list  @ 12 @ argument_list  @ 16 @ 
literal: ");
  }if (a_shape->NumElements() != b->dims()) {
    return errors::InvalidArgument("  @ 21 @ literal: " vs dense side "  @ 35 @ 
name: TensorShapeUtils  @ 9 @ name: TensorShapeUtils  @ 11 @ 
argument_list  @ 8 @ argument_list  @ 8 @ 
if_stmt  @ 9 @ if_stmt  @ 11 @ 
name: shape  @ 9 @ name: shape  @ 11 @ 
name: Status  @ 8 @ name: Status  @ 9 @ 
block_content  @ 3 @ block_content  @ 3 @ 
literal: ",&a_indices_t));
    OP_REQUIRES_OK(ctx, ctx->input("  @ 56 @ literal: 5  @ 85 @ 
name: errors  @ 10 @ name: errors  @ 12 @ 
name: shape  @ 12 @ name: shape  @ 16 @ 
parameter  @ 8 @ parameter  @ 10 @ 
name  @ 9 @ name  @ 11 @ 
name: IsMatrix  @ 9 @ name: IsMatrix  @ 11 @ 
decl_stmt  @ 1 @ decl_stmt  @ 1 @ 
name: shape  @ 10 @ name: shape  @ 14 @ 
name: namespace  @ 6 @ name: namespace  @ 6 @ 
condition  @ 12 @ condition  @ 16 @ 
argument  @ 12 @ argument  @ 17 @ 
specifier: const  @ 8 @ specifier: const  @ 9 @ 
comment: // NOTE: does not support GPU yet.  @ 4 @ comment: // NOTE: does not support GPU yet.  @ 4 @ 
argument_list  @ 10 @ argument_list  @ 14 @ 
name: Tensor  @ 8 @ name: Tensor  @ 9 @ 
literal: ",a_shape->shape().DebugString());
  }int64_t nnz = a_indices->dim_size(0);
  int64_t ndims = a_indices->dim_size(1);
  if (a_values->dim_size(0) != nnz) {
    return errors::InvalidArgument("  @ 13 @ literal: " and "  @ 21 @ 
call  @ 12 @ call  @ 17 @ 
name  @ 8 @ name  @ 8 @ 
argument_list  @ 9 @ argument_list  @ 11 @ 
expr  @ 8 @ expr  @ 8 @ 
type  @ 8 @ type  @ 10 @ 
operator: ||  @ 12 @ operator: ||  @ 16 @ 
name: DebugString  @ 10 @ name: DebugString  @ 14 @ 
specifier: const  @ 8 @ specifier: const  @ 10 @ 
if  @ 9 @ if  @ 11 @ 
literal: "Inputs a_values and a_shape should be vectors ""  @ 13 @ literal: "Inputs a_values and a_shape should be vectors "  @ 19 @ 
name: template  @ 8 @ name: template  @ 8 @ 

