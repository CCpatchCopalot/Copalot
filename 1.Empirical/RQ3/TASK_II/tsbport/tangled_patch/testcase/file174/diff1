17a18,19
> #define STR_INPUTS "inputs"
> #define STR_INPUTS_LEN (sizeof(STR_INPUTS)-1)
19c21,39
< static struct flb_input_instance *find_input(struct flb_hs *hs, const char *name)
---
> #define HTTP_FIELD_MESSAGE        "message"
> #define HTTP_FIELD_MESSAGE_LEN    (sizeof(HTTP_FIELD_MESSAGE)-1)
> #define HTTP_FIELD_STATUS         "status"
> #define HTTP_FIELD_STATUS_LEN     (sizeof(HTTP_FIELD_STATUS)-1)
> #define HTTP_FIELD_RETURNCODE     "returncode"
> #define HTTP_FIELD_RETURNCODE_LEN (sizeof(HTTP_FIELD_RETURNCODE)-1)
> 
> #define HTTP_RESULT_OK                   "ok"
> #define HTTP_RESULT_OK_LEN               (sizeof(HTTP_RESULT_OK)-1)
> #define HTTP_RESULT_ERROR                "error"
> #define HTTP_RESULT_ERROR_LEN            (sizeof(HTTP_RESULT_ERROR)-1)
> #define HTTP_RESULT_NOTFOUND             "not found"
> #define HTTP_RESULT_NOTFOUND_LEN         (sizeof(HTTP_RESULT_NOTFOUND)-1)
> #define HTTP_RESULT_METHODNOTALLOWED     "method not allowed"
> #define HTTP_RESULT_METHODNOTALLOWED_LEN (sizeof(HTTP_RESULT_METHODNOTALLOWED)-1)
> #define HTTP_RESULT_UNKNOWNERROR         "unknown error"
> #define HTTP_RESULT_UNKNOWNERROR_LEN     (sizeof(HTTP_RESULT_UNKNOWNERROR)-1)
> 
> static struct flb_input_instance *find_input(struct flb_hs *hs, const char *name, size_t nlen)
27c47,50
<         if (strcmp(name, in->name) == 0) {
---
>         if (strlen(in->name) != nlen) {
>             continue;
>         }
>         if (strncmp(name, in->name, nlen) == 0) {
39c62
< static int enable_trace_input(struct flb_hs *hs, const char *name, const char *prefix, const char *output_name, struct mk_list *props)
---
> static int enable_trace_input(struct flb_hs *hs, const char *name, ssize_t nlen, const char *prefix,const char *output_name, struct mk_list *props)
43,44c66
< 
<     in = find_input(hs, name);
---
>     in = find_input(hs, name, nlen);
45a68
>         flb_error("unable to find input: [%d]%.*s", (int)nlen, (int)nlen, name);
50c73,79
<     return (in->chunk_trace_ctxt == NULL ? 503 : 0);
---
> 
>     if (in->chunk_trace_ctxt == NULL) {
>         flb_error("unable to start tracing");
>         return 503;
>     }
> 
>     return 0;
53c82
< static int disable_trace_input(struct flb_hs *hs, const char *name)
---
> static int disable_trace_input(struct flb_hs *hs, const char *name, size_t nlen)
58c87
<     in = find_input(hs, name);
---
>     in = find_input(hs, name, nlen);
77c106
<     if (request->real_path.len < strlen(base)) {
---
>     if (request->real_path.len < sizeof(base)-1) {
81c110
<     return flb_sds_create_len(&request->real_path.data[strlen(base)],request->real_path.len - strlen(base));
---
>     return flb_sds_create_len(&request->real_path.data[sizeof(base)-1],request->real_path.len - sizeof(base)-1);
84c113
< static int http_disable_trace(mk_request_t *request, void *data, const char *input_name, msgpack_packer *mp_pck)
---
> static int http_disable_trace(mk_request_t *request, void *data,const char *input_name, size_t input_nlen,msgpack_packer *mp_pck)
90c119
<     toggled_on = disable_trace_input(hs, input_name);
---
>     toggled_on = disable_trace_input(hs, input_name, input_nlen);
93,94c122,123
<         msgpack_pack_str_with_body(mp_pck, "status", strlen("status"));
<         msgpack_pack_str_with_body(mp_pck, "ok", strlen("ok"));
---
>         msgpack_pack_str_with_body(mp_pck, HTTP_FIELD_STATUS, HTTP_FIELD_STATUS_LEN);
>         msgpack_pack_str_with_body(mp_pck, HTTP_RESULT_OK, HTTP_RESULT_OK_LEN);
101c130
< static int msgpack_params_enable_trace(struct flb_hs *hs, msgpack_unpacked *result, const char *input_name)
---
> static int msgpack_params_enable_trace(struct flb_hs *hs, msgpack_unpacked *result, const char *input_name, ssize_t input_nlen)
178c207
<         toggled_on = enable_trace_input(hs, input_name, prefix, output_name, props);
---
>         toggled_on = enable_trace_input(hs, input_name, input_nlen, prefix, output_name, props);
195c224
< static int http_enable_trace(mk_request_t *request, void *data, const char *input_name, msgpack_packer *mp_pck)
---
> static int http_enable_trace(mk_request_t *request, void *data, const char *input_name, ssize_t input_nlen, msgpack_packer *mp_pck)
217c246
<         ret = enable_trace_input(hs, input_name, "trace.", "stdout", NULL);
---
>         ret = enable_trace_input(hs, input_name, input_nlen, "trace.", "stdout", NULL);
220,221c249,250
<                 msgpack_pack_str_with_body(mp_pck, "status", strlen("status"));
<                 msgpack_pack_str_with_body(mp_pck, "ok", strlen("ok"));
---
>                 msgpack_pack_str_with_body(mp_pck, HTTP_FIELD_STATUS, HTTP_FIELD_STATUS_LEN);
>                 msgpack_pack_str_with_body(mp_pck, HTTP_RESULT_OK, HTTP_RESULT_OK_LEN);
225c254
<             flb_error("unable to enable tracing for %s", input_name);
---
>             flb_error("unable to enable tracing for %.*s", (int)input_nlen, input_name);
241c270
<         flb_error("unable to unpack msgpack parameters for %s", input_name);
---
>         flb_error("unable to unpack msgpack parameters for %.*s", (int)input_nlen, input_name);
341c370
<         ret = enable_trace_input(hs, input_name, prefix, output_name, props);
---
>         ret = enable_trace_input(hs, input_name, input_nlen, prefix, output_name, props);
348c377
<             input_instance = find_input(hs, input_name);
---
>             input_instance = find_input(hs, input_name, input_nlen);
359,360c388,389
<     msgpack_pack_str_with_body(mp_pck, "status", strlen("status"));
<     msgpack_pack_str_with_body(mp_pck, "ok", strlen("ok"));
---
>     msgpack_pack_str_with_body(mp_pck, HTTP_FIELD_STATUS, HTTP_FIELD_STATUS_LEN);
>     msgpack_pack_str_with_body(mp_pck, HTTP_RESULT_OK, HTTP_RESULT_OK_LEN);
399c428
<         response = http_enable_trace(request, data, input_name, &mp_pck);
---
>         response = http_enable_trace(request, data, input_name, flb_sds_len(input_name), &mp_pck);
402c431
<         response = http_disable_trace(request, data, input_name, &mp_pck);
---
>         response = http_disable_trace(request, data, input_name, flb_sds_len(input_name), &mp_pck);
407,408c436,437
<         msgpack_pack_str_with_body(&mp_pck, "status", strlen("status"));
<         msgpack_pack_str_with_body(&mp_pck, "not found", strlen("not found"));
---
>         msgpack_pack_str_with_body(&mp_pck, HTTP_FIELD_STATUS, HTTP_FIELD_STATUS_LEN);
>         msgpack_pack_str_with_body(&mp_pck, HTTP_RESULT_NOTFOUND, HTTP_RESULT_NOTFOUND_LEN);
412,413c441,442
<         msgpack_pack_str_with_body(&mp_pck, "status", strlen("status"));
<         msgpack_pack_str_with_body(&mp_pck, "error", strlen("error"));
---
>         msgpack_pack_str_with_body(&mp_pck, HTTP_FIELD_STATUS, HTTP_FIELD_STATUS_LEN);
>         msgpack_pack_str_with_body(&mp_pck, HTTP_RESULT_ERROR, HTTP_RESULT_ERROR_LEN);
448c477,478
<     flb_sds_t input_name;
---
>     const char *input_name;
>     ssize_t input_nlen;
484c513
<         if (result.data.via.map.ptr[i].key.via.str.size < strlen("inputs")) {
---
>         if (result.data.via.map.ptr[i].key.via.str.size < STR_INPUTS_LEN) {
487c516
<         if (strncmp(result.data.via.map.ptr[i].key.via.str.ptr, "inputs", strlen("inputs"))) {
---
>         if (strncmp(result.data.via.map.ptr[i].key.via.str.ptr, STR_INPUTS, STR_INPUTS_LEN)) {
501c530
<     msgpack_pack_str_with_body(&mp_pck, "inputs", strlen("inputs"));
---
>     msgpack_pack_str_with_body(&mp_pck, STR_INPUTS, STR_INPUTS_LEN);
505,506d533
<         input_name = flb_sds_create_len(inputs->ptr[i].via.str.ptr, inputs->ptr[i].via.str.size);
<         msgpack_pack_str_with_body(&mp_pck, input_name, flb_sds_len(input_name));
508,511c535,539
<         if (inputs->ptr[i].type != MSGPACK_OBJECT_STR) {
<             msgpack_pack_map(&mp_pck, 1);
<             msgpack_pack_str_with_body(&mp_pck, "status", strlen("status"));
<             msgpack_pack_str_with_body(&mp_pck, "error", strlen("error"));
---
>         if (inputs->ptr[i].type != MSGPACK_OBJECT_STR || inputs->ptr[i].via.str.ptr == NULL) {
>             response = 503;
>             error_msg = flb_sds_create("invalid input");
>             msgpack_sbuffer_clear(&mp_sbuf);
>             goto unpack_error;
513,515c541,553
<         else {
<             if (request->method == MK_METHOD_POST || request->method == MK_METHOD_GET) {
<                 ret = msgpack_params_enable_trace((struct flb_hs *)data, &result, input_name);
---
>     }
> 
>     for (i = 0; i < inputs->size; i++) {
> 
>         input_name = inputs->ptr[i].via.str.ptr;
>         input_nlen = inputs->ptr[i].via.str.size;
> 
>         msgpack_pack_str_with_body(&mp_pck, input_name, input_nlen);
> 
>         if (request->method == MK_METHOD_POST) {
> 
>             ret = msgpack_params_enable_trace((struct flb_hs *)data, &result,input_name, input_nlen);
> 
518,520c556,558
<                     msgpack_pack_str_with_body(&mp_pck, "status", strlen("status"));
<                     msgpack_pack_str_with_body(&mp_pck, "error", strlen("error"));
<                     msgpack_pack_str_with_body(&mp_pck, "returncode", strlen("returncode"));
---
>                 msgpack_pack_str_with_body(&mp_pck, HTTP_FIELD_STATUS, HTTP_FIELD_STATUS_LEN);
>                 msgpack_pack_str_with_body(&mp_pck, HTTP_RESULT_ERROR, HTTP_RESULT_ERROR_LEN);
>                 msgpack_pack_str_with_body(&mp_pck, HTTP_FIELD_RETURNCODE, HTTP_FIELD_RETURNCODE_LEN);
525,526c563,564
<                     msgpack_pack_str_with_body(&mp_pck, "status", strlen("status"));
<                     msgpack_pack_str_with_body(&mp_pck, "ok", strlen("ok"));
---
>                 msgpack_pack_str_with_body(&mp_pck, HTTP_FIELD_STATUS, HTTP_FIELD_STATUS_LEN);
>                 msgpack_pack_str_with_body(&mp_pck, HTTP_RESULT_OK, HTTP_RESULT_OK_LEN);
530c568,570
<                 disable_trace_input((struct flb_hs *)data, input_name);
---
>             disable_trace_input((struct flb_hs *)data, input_name, input_nlen);
>             msgpack_pack_str_with_body(&mp_pck, HTTP_FIELD_STATUS, HTTP_FIELD_STATUS_LEN);
>             msgpack_pack_str_with_body(&mp_pck, HTTP_RESULT_OK, HTTP_RESULT_OK_LEN);
534,538c574,577
<                 msgpack_pack_str_with_body(&mp_pck, "status", strlen("status"));
<                 msgpack_pack_str_with_body(&mp_pck, "error", strlen("error"));
<                 msgpack_pack_str_with_body(&mp_pck, "message", strlen("message"));
<                 msgpack_pack_str_with_body(&mp_pck, "method not allowed", strlen("method not allowed"));
<             }
---
>             msgpack_pack_str_with_body(&mp_pck, HTTP_FIELD_STATUS, HTTP_FIELD_STATUS_LEN);
>             msgpack_pack_str_with_body(&mp_pck, HTTP_RESULT_ERROR, HTTP_RESULT_ERROR_LEN);
>             msgpack_pack_str_with_body(&mp_pck, HTTP_FIELD_MESSAGE, HTTP_FIELD_MESSAGE_LEN);
>             msgpack_pack_str_with_body(&mp_pck, HTTP_RESULT_METHODNOTALLOWED, HTTP_RESULT_METHODNOTALLOWED_LEN);
550,551c589,590
<         msgpack_pack_str_with_body(&mp_pck, "status", strlen("status"));
<         msgpack_pack_str_with_body(&mp_pck, "not found", strlen("not found"));
---
>         msgpack_pack_str_with_body(&mp_pck, HTTP_FIELD_STATUS, HTTP_FIELD_STATUS_LEN);
>         msgpack_pack_str_with_body(&mp_pck, HTTP_RESULT_NOTFOUND, HTTP_RESULT_NOTFOUND_LEN);
555,557c594,596
<         msgpack_pack_str_with_body(&mp_pck, "status", strlen("status"));
<         msgpack_pack_str_with_body(&mp_pck, "error", strlen("error"));
<         msgpack_pack_str_with_body(&mp_pck, "message", strlen("message"));
---
>         msgpack_pack_str_with_body(&mp_pck, HTTP_FIELD_STATUS, HTTP_FIELD_STATUS_LEN);
>         msgpack_pack_str_with_body(&mp_pck, HTTP_RESULT_OK, HTTP_RESULT_OK_LEN);
>         msgpack_pack_str_with_body(&mp_pck, HTTP_FIELD_MESSAGE, HTTP_FIELD_MESSAGE_LEN);
563c602
<             msgpack_pack_str_with_body(&mp_pck, "unknown error", strlen("unknown error"));
---
>             msgpack_pack_str_with_body(&mp_pck, HTTP_RESULT_UNKNOWNERROR, HTTP_RESULT_UNKNOWNERROR_LEN);
568,569c607,608
<         msgpack_pack_str_with_body(&mp_pck, "status", strlen("status"));
<         msgpack_pack_str_with_body(&mp_pck, "ok", strlen("ok"));
---
>         msgpack_pack_str_with_body(&mp_pck, HTTP_FIELD_STATUS, HTTP_FIELD_STATUS_LEN);
>         msgpack_pack_str_with_body(&mp_pck, HTTP_RESULT_OK, HTTP_RESULT_OK_LEN);
588a628
>     if (hs->config->enable_chunk_trace == FLB_TRUE) {
590a631
>     }
