2238a2239
>   void *ssl_sessionid = NULL;
2764,2781d2764
<   /* Check if there's a cached ID we can/should use here! */
<   if(SSL_SET_OPTION(primary.sessionid)) {
<     void *ssl_sessionid = NULL;
<     int data_idx = ossl_get_ssl_data_index();
<     int connectdata_idx = ossl_get_ssl_conn_index();
<     int sockindex_idx = ossl_get_ssl_sockindex_index();
<     int proxy_idx = ossl_get_proxy_index();
< 
<     if(data_idx >= 0 && connectdata_idx >= 0 && sockindex_idx >= 0 && proxy_idx >= 0) {
<       /* Store the data needed for the "new session" callback. * The sockindex is stored as a pointer to an array element. */
<       SSL_set_ex_data(backend->handle, data_idx, data);
<       SSL_set_ex_data(backend->handle, connectdata_idx, conn);
<       SSL_set_ex_data(backend->handle, sockindex_idx, conn->sock + sockindex);
< #ifndef CURL_DISABLE_PROXY
<       SSL_set_ex_data(backend->handle, proxy_idx, SSL_IS_PROXY() ? (void *) 1:NULL);
< #else
<       SSL_set_ex_data(backend->handle, proxy_idx, NULL);
< #endif
2783a2767
>   }
2784a2769,2770
>   ossl_associate_connection(data, conn, sockindex);
> #ifndef CURL_DISABLE_PROXY
2792c2778
<       }
---
>   if(conn->proxy_ssl[sockindex].use) {
2795,2800d2780
<     }
<     Curl_ssl_sessionid_unlock(data);
<   }
< 
< #ifndef CURL_DISABLE_PROXY
<   if(conn->proxy_ssl[sockindex].use) {
2801a2782
>   Curl_ssl_sessionid_unlock(data);
3873a3855,3923
> static void ossl_associate_connection(struct Curl_easy *data,struct connectdata *conn,int sockindex)
> {
>   struct ssl_connect_data *connssl = &conn->ssl[sockindex];
>   struct ssl_backend_data *backend = connssl->backend;
> 
>   /* If we don't have SSL context, do nothing. */
>   if(!backend->handle)
>     return;
> 
>   if(SSL_SET_OPTION(primary.sessionid)) {
>     int data_idx = ossl_get_ssl_data_index();
>     int connectdata_idx = ossl_get_ssl_conn_index();
>     int sockindex_idx = ossl_get_ssl_sockindex_index();
>     int proxy_idx = ossl_get_proxy_index();
> 
>     if(data_idx >= 0 && connectdata_idx >= 0 && sockindex_idx >= 0 && proxy_idx >= 0) {
>       /* Store the data needed for the "new session" callback. * The sockindex is stored as a pointer to an array element. */
>       SSL_set_ex_data(backend->handle, data_idx, data);
>       SSL_set_ex_data(backend->handle, connectdata_idx, conn);
>       SSL_set_ex_data(backend->handle, sockindex_idx, conn->sock + sockindex);
> #ifndef CURL_DISABLE_PROXY
>       SSL_set_ex_data(backend->handle, proxy_idx, SSL_IS_PROXY() ? (void *) 1:NULL);
> #else
>       SSL_set_ex_data(backend->handle, proxy_idx, NULL);
> #endif
>     }
>   }
> }
> 
> /* * Starting with TLS 1.3, the ossl_new_session_cb callback gets called after * the handshake. If the transfer that sets up the callback gets killed before * this callback arrives, we must make sure to properly clear the data to * avoid UAF problems. A future optimization could be to instead store another * transfer that might still be using the same connection. */
> 
> static void ossl_disassociate_connection(struct Curl_easy *data, int sockindex)
> {
>   struct connectdata *conn = data->conn;
>   struct ssl_connect_data *connssl = &conn->ssl[sockindex];
>   struct ssl_backend_data *backend = connssl->backend;
> 
>   /* If we don't have SSL context, do nothing. */
>   if(!backend->handle)
>     return;
> 
>   if(SSL_SET_OPTION(primary.sessionid)) {
>     bool isproxy = FALSE;
>     bool incache;
>     void *old_ssl_sessionid = NULL;
>     int data_idx = ossl_get_ssl_data_index();
>     int connectdata_idx = ossl_get_ssl_conn_index();
>     int sockindex_idx = ossl_get_ssl_sockindex_index();
>     int proxy_idx = ossl_get_proxy_index();
> 
>     if(data_idx >= 0 && connectdata_idx >= 0 && sockindex_idx >= 0 && proxy_idx >= 0) {
>       /* Invalidate the session cache entry, if any */
>       isproxy = SSL_get_ex_data(backend->handle, proxy_idx) ? TRUE : FALSE;
> 
>       /* Disable references to data in "new session" callback to avoid * accessing a stale pointer. */
>       SSL_set_ex_data(backend->handle, data_idx, NULL);
>       SSL_set_ex_data(backend->handle, connectdata_idx, NULL);
>       SSL_set_ex_data(backend->handle, sockindex_idx, NULL);
>       SSL_set_ex_data(backend->handle, proxy_idx, NULL);
>     }
> 
>     Curl_ssl_sessionid_lock(data);
>     incache = !(Curl_ssl_getsessionid(data, conn, isproxy,&old_ssl_sessionid, NULL, sockindex));
>     if(incache)
>       Curl_ssl_delsessionid(data, old_ssl_sessionid);
>     Curl_ssl_sessionid_unlock(data);
>   }
> }
> 
3879,3909c3929
<   SSLSUPP_TLS13_CIPHERSUITES |
< #endif
<   SSLSUPP_HTTPS_PROXY,
< 
<   sizeof(struct ssl_backend_data),
< 
<   ossl_init,                /* init */
<   ossl_cleanup,             /* cleanup */
<   ossl_version,             /* version */
<   ossl_check_cxn,           /* check_cxn */
<   ossl_shutdown,            /* shutdown */
<   ossl_data_pending,        /* data_pending */
<   ossl_random,              /* random */
<   ossl_cert_status_request, /* cert_status_request */
<   ossl_connect,             /* connect */
<   ossl_connect_nonblocking, /* connect_nonblocking */
<   Curl_ssl_getsock,         /* getsock */
<   ossl_get_internals,       /* get_internals */
<   ossl_close,               /* close_one */
<   ossl_close_all,           /* close_all */
<   ossl_session_free,        /* session_free */
<   ossl_set_engine,          /* set_engine */
<   ossl_set_engine_default,  /* set_engine_default */
<   ossl_engines_list,        /* engines_list */
<   Curl_none_false_start,    /* false_start */
< #if (OPENSSL_VERSION_NUMBER >= 0x0090800fL) && !defined(OPENSSL_NO_SHA256)
<   ossl_sha256sum            /* sha256sum */
< #else
<   NULL                      /* sha256sum */
< #endif
< };
---
>   SSLSUPP_TLS13_CIPHERSUITES |#endifSSLSUPP_HTTPS_PROXY,sizeof(struct ssl_backend_data),ossl_init,/* init */ossl_cleanup, /* cleanup */ossl_version, /* version */ossl_check_cxn, /* check_cxn */ossl_shutdown,/* shutdown */ossl_data_pending,/* data_pending */ossl_random,/* random */ossl_cert_status_request, /* cert_status_request */ossl_connect, /* connect */ossl_connect_nonblocking, /* connect_nonblocking */Curl_ssl_getsock, /* getsock */ossl_get_internals, /* get_internals */ossl_close, /* close_one */ossl_close_all, /* close_all */ossl_session_free,/* session_free */ossl_set_engine,/* set_engine */ossl_set_engine_default,/* set_engine_default */ossl_engines_list,/* engines_list */Curl_none_false_start,/* false_start */#if (OPENSSL_VERSION_NUMBER >= 0x0090800fL) && !defined(OPENSSL_NO_SHA256)#else#endif};
3910a3931
>   ossl_sha256sum,           /* sha256sum */
3911a3933,3935
>   NULL,                     /* sha256sum */
>   ossl_associate_connection, /* associate_connection */
>   ossl_disassociate_connection /* disassociate_connection */
