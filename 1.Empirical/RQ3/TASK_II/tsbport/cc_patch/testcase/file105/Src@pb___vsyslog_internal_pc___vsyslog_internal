void
__vsyslog_internal (int pri, const char *fmt, va_list ap,unsigned int mode_flags)
{
  /* Try to use a static buffer as an optimization.*/
  char bufs[1024];
  char *buf = bufs;
  size_t bufsize;
  int msgoff;
  int saved_errno = errno;

#define	INTERNALLOG LOG_ERR|LOG_CONS|LOG_PERROR|LOG_PID
  /* Check for invalid bits. */
  if (pri & ~(LOG_PRIMASK | LOG_FACMASK))
    {
      syslog (INTERNALLOG, "syslog: unknown facility/priority: %x", pri);
      pri &= LOG_PRIMASK | LOG_FACMASK;
    }

  /* Prepare for multiple users.We have to take care: most syscalls we are using are cancellation points.*/
  struct cleanup_arg clarg = { NULL, NULL };
  __libc_cleanup_push (cancel_handler, &clarg);
  __libc_lock_lock (syslog_lock);

  /* Check priority against setlogmask values. */
  if ((LOG_MASK (LOG_PRI (pri)) & LogMask) == 0)
    goto out;

  /* Set default facility if none specified. */
  if ((pri & LOG_FACMASK) == 0)
    pri |= LogFacility;

  pid_t pid = LogStat & LOG_PID ? __getpid () : 0;

  /* "%b %e %H:%M:%S "*/
  char timestamp[sizeof "MMM DD hh:mm:ss "];
  __time64_t now = time64_now ();
  struct tm now_tm;
  struct tm *now_tmp = __localtime64_r (&now, &now_tm);
  bool has_ts = now_tmp != NULL;

  /* In the unlikely case of localtime_r failure (tm_year out of int range) skip the hostname so the message is handled as valid PRI but without TIMESTAMP or invalid TIMESTAMP (which should force the relay to add the timestamp itself).*/
  if (has_ts)
    __strftime_l (timestamp, sizeof timestamp, "%h %e %T ", now_tmp,_nl_C_locobj_ptr);

#define SYSLOG_HEADER(__pri, __timestamp, __msgoff, pid) \
  "<%d>%s%n%s%s%.0d%s: ",                                \
  __pri, __timestamp, __msgoff,                          \
  LogTag == NULL ? __progname : LogTag,                  \
  "[" + (pid == 0), pid, "]" + (pid == 0)

#define SYSLOG_HEADER_WITHOUT_TS(__pri, __msgoff)        \
  "<%d>: %n", __pri, __msgoff

  int l, vl;
  if (has_ts)
    l = __snprintf (bufs, sizeof bufs,SYSLOG_HEADER (pri, timestamp, &msgoff, pid));
  else
    l = __snprintf (bufs, sizeof bufs,SYSLOG_HEADER_WITHOUT_TS (pri, &msgoff));

  char *pos;
  size_t len;

  if (0 <= l && l < sizeof bufs)
    {
      /* At this point, there is still a chance that we can print the remaining part of the log into bufs and use that.*/
      pos = bufs + l;
      len = sizeof (bufs) - l;
    }
  else
    {
      buf = NULL;
      /* We already know that bufs is too small to use for this log message. The next vsnprintf into bufs is used only to calculate the total required buffer length.We will discard bufs contents and allocate an appropriately sized buffer later instead.*/
      pos = bufs;
      len = sizeof (bufs);
    }

  {
    va_list apc;
    va_copy (apc, ap);

    /* Restore errno for %m format.*/
    __set_errno (saved_errno);

    vl = __vsnprintf_internal (pos, len, fmt, apc, mode_flags);

    if (!(0 <= vl && vl < len))
      buf = NULL;

    bufsize = l + vl;
    va_end (apc);
  }

  if (buf == NULL)
    {
      buf = malloc ((bufsize + 1) * sizeof (char));
      if (buf != NULL)
	{
	  /* Tell the cancellation handler to free this buffer.*/
	  clarg.buf = buf;

	  if (has_ts)
	    __snprintf (buf, l + 1,SYSLOG_HEADER (pri, timestamp, &msgoff, pid));
	  else
	    __snprintf (buf, l + 1,SYSLOG_HEADER_WITHOUT_TS (pri, &msgoff));

	  va_list apc;
	  va_copy (apc, ap);
	  __vsnprintf_internal (buf + l, bufsize - l + 1, fmt, apc,mode_flags);
	  va_end (apc);
	}
      else
        {
	  /* Nothing much to do but emit an error message.*/
          bufsize = __snprintf (bufs, sizeof bufs,"out of memory[%d]", __getpid ());
          buf = bufs;
        }
    }

  /* Output to stderr if requested. */
  if (LogStat & LOG_PERROR)
    __dprintf (STDERR_FILENO, "%s%s", buf + msgoff, "\n" + (buf[bufsize - 1] == '\n'));

  /* Get connected, output the message to the local logger.*/
  if (!connected)
    openlog_internal (NULL, LogStat | LOG_NDELAY, LogFacility);

  /* If we have a SOCK_STREAM connection, also send ASCII NUL as a record terminator.*/
  if (LogType == SOCK_STREAM)
    ++bufsize;

  if (!connected || __send (LogFile, buf, bufsize, MSG_NOSIGNAL) < 0)
    {
      if (connected)
	{
	  /* Try to reopen the syslog connection.Maybe it went down.*/
	  closelog_internal ();
	  openlog_internal (NULL, LogStat | LOG_NDELAY, LogFacility);
	}

      if (!connected || __send (LogFile, buf, bufsize, MSG_NOSIGNAL) < 0)
	{
	  closelog_internal ();	/* attempt re-open next time */
	  /* * Output the message to the console; don't worry * about blocking, if console blocks everything will. * Make sure the error reported is the one from the * syslogd failure. */
	  int fd;
	  if (LogStat & LOG_CONS &&(fd = __open (_PATH_CONSOLE, O_WRONLY | O_NOCTTY| O_CLOEXEC, 0)) >= 0)
	    {
	      __dprintf (fd, "%s\r\n", buf + msgoff);
	      __close (fd);
	    }
	}
    }

out:
  /* End of critical section.*/
  __libc_cleanup_pop (0);
  __libc_lock_unlock (syslog_lock);

  if (buf != bufs)
    free (buf);
}
