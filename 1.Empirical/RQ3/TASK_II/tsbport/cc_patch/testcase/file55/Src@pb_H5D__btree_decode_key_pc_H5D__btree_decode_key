static herr_t
H5D__btree_decode_key(const H5B_shared_t *shared, const uint8_t *raw, void *_key)
{
    const H5O_layout_chunk_t *layout;                        /* Chunk layout description */
    H5D_btree_key_t          *key = (H5D_btree_key_t *)_key; /* Pointer to decoded key */
    hsize_t                   tmp_offset;                    /* Temporary coordinate offset, from file */
    unsigned                  u;                             /* Local index variable */
    herr_t                    ret_value = SUCCEED;           /* Return value */

    FUNC_ENTER_STATIC

    /* check args */
    HDassert(shared);
    HDassert(raw);
    HDassert(key);
    layout = (const H5O_layout_chunk_t *)shared->udata;
    HDassert(layout);
    HDassert(layout->ndims > 0 && layout->ndims <= H5O_LAYOUT_NDIMS);

    /* decode */
    UINT32DECODE(raw, key->nbytes);
    UINT32DECODE(raw, key->filter_mask);
    for (u = 0; u < layout->ndims; u++) {
        if (layout->dim[u] == 0)
            HGOTO_ERROR(H5E_DATASET, H5E_BADVALUE, FAIL, "chunk size must be > 0, dim = %u ", u)/* Retrieve coordinate offset */
        UINT64DECODE(raw, tmp_offset);
        if (0 != (tmp_offset % layout->dim[u]))
            HGOTO_ERROR(H5E_DATASET, H5E_BADVALUE, FAIL, "bad coordinate offset");

        /* Convert to a scaled offset */
        key->scaled[u] = tmp_offset / layout->dim[u];
    } /* end for */

done:
    FUNC_LEAVE_NOAPI(ret_value)
} /* end H5D__btree_decode_key() */
