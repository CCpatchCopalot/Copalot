htri_t
H5T_set_loc(H5T_t *dt, H5F_t *f, H5T_loc_t loc)
{
    htri_t      changed;         /* Whether H5T_set_loc changed the type (even if the size didn't change) */
    htri_t      ret_value = 0;   /* Indicate that success, but no location change */
    unsigned    i;               /* Local index variable */
    size_t      old_size;        /* Previous size of a field */

    FUNC_ENTER_NOAPI(FAIL)

    HDassert(dt);
    HDassert(loc>=H5T_LOC_BADLOC && loc<H5T_LOC_MAXLOC);

    /* Datatypes can't change in size if the force_conv flag is not set */
    if(dt->shared->force_conv) {
        /* Check the datatype of this element */
        switch(dt->shared->type) {
            case H5T_ARRAY:  /* Recurse on VL, compound and array base element type */
                /* Recurse if it's VL, compound, enum or array */
                /* (If the force_conv flag is _not_ set, the type cannot change in size, so don't recurse) */
                if(dt->shared->parent->shared->force_conv && H5T_IS_COMPLEX(dt->shared->parent->shared->type)) {
                    /* Keep the old base element size for later */
                    old_size=dt->shared->parent->shared->size;

                    /* Mark the VL, compound or array type */
                    if((changed=H5T_set_loc(dt->shared->parent,f,loc))<0)
                        HGOTO_ERROR(H5E_DATATYPE, H5E_CANTINIT, FAIL, "Unable to set VL location");
                    if(changed>0)
                        ret_value=changed;

                    /* Check if the field changed size */
                    if(old_size != dt->shared->parent->shared->size) {
                        /* Adjust the size of the array */
                        dt->shared->size = dt->shared->u.array.nelem*dt->shared->parent->shared->size;
                    } /* end if */
                } /* end if */
                break;

            case H5T_COMPOUND:  /* Check each field and recurse on VL, compound and array type */
                {
                    ssize_t accum_change = 0; /* Amount of change in the offset of the fields */

                    /* Sort the fields based on offsets */
                    H5T__sort_value(dt, NULL);

                    for (i = 0; i < dt->shared->u.compnd.nmembs; i++) {
                        H5T_t *memb_type;   /* Member's datatype pointer */

                        /* Range check against compound member's offset */
                        if ((accum_change < 0) && ((ssize_t) dt->shared->u.compnd.memb[i].offset < accum_change))
                            HGOTO_ERROR(H5E_DATATYPE, H5E_BADVALUE, FAIL, "invalid field size in datatype");

                        /* Apply the accumulated size change to the offset of the field */
                        dt->shared->u.compnd.memb[i].offset += (size_t) accum_change;

                        /* Set the member type pointer (for convenience) */
                        memb_type = dt->shared->u.compnd.memb[i].type;

                        /* Recurse if it's VL, compound, enum or array */
                        /* (If the force_conv flag is _not_ set, the type cannot change in size, so don't recurse) */
                        if(memb_type->shared->force_conv && H5T_IS_COMPLEX(memb_type->shared->type)) {
                            /* Keep the old field size for later */
                            old_size = memb_type->shared->size;

                            /* Mark the VL, compound, enum or array type */
                            if((changed = H5T_set_loc(memb_type,f,loc)) < 0)
                                HGOTO_ERROR(H5E_DATATYPE, H5E_CANTINIT, FAIL, "Unable to set VL location");
                            if(changed > 0)
                                ret_value = changed;

                            /* Check if the field changed size */
                            if(old_size != memb_type->shared->size) {
                                /* Adjust the size of the member */
                                dt->shared->u.compnd.memb[i].size = (dt->shared->u.compnd.memb[i].size*memb_type->shared->size)/old_size;

                                /* Add that change to the accumulated size change */
                                accum_change += (ssize_t) (memb_type->shared->size - old_size);
                            } /* end if */
                        } /* end if */
                    } /* end for */

                    /* Range check against datatype size */
                    if ((accum_change < 0) && ((ssize_t) dt->shared->size < accum_change))
                        HGOTO_ERROR(H5E_DATATYPE, H5E_BADVALUE, FAIL, "invalid field size in datatype");

                    /* Apply the accumulated size change to the datatype */
                    dt->shared->size += (size_t) accum_change;
                }
                break;

            case H5T_VLEN: /* Recurse on the VL information if it's VL, compound or array, then free VL sequence */
                /* Recurse if it's VL, compound, enum or array */
                /* (If the force_conv flag is _not_ set, the type cannot change in size, so don't recurse) */
                if(dt->shared->parent->shared->force_conv && H5T_IS_COMPLEX(dt->shared->parent->shared->type)) {
                    if((changed = H5T_set_loc(dt->shared->parent,f,loc)) < 0)
                        HGOTO_ERROR(H5E_DATATYPE, H5E_CANTINIT, FAIL, "Unable to set VL location");
                    if(changed > 0)
                        ret_value = changed;
                } /* end if */

                /* Mark this VL sequence */
                if((changed = H5T__vlen_set_loc(dt, f, loc)) < 0)
                    HGOTO_ERROR(H5E_DATATYPE, H5E_CANTINIT, FAIL, "Unable to set VL location");
                if(changed > 0)
                    ret_value = changed;
                break;

            case H5T_REFERENCE:
                /* Only need to change location of object references */
                if(dt->shared->u.atomic.u.r.rtype == H5R_OBJECT) {
                    /* Mark this reference */
                    if(loc != dt->shared->u.atomic.u.r.loc) {
                        /* Set the location */
                        dt->shared->u.atomic.u.r.loc = loc;

                        /* Indicate that the location changed */
                        ret_value = TRUE;
                    } /* end if */
                } /* end if */
                break;

            case H5T_NO_CLASS:
            case H5T_INTEGER:
            case H5T_FLOAT:
            case H5T_TIME:
            case H5T_STRING:
            case H5T_BITFIELD:
            case H5T_OPAQUE:
            case H5T_ENUM:
            case H5T_NCLASSES:
            default:
                break;
        } /* end switch */
    } /* end if */

done:
    FUNC_LEAVE_NOAPI(ret_value)
}   /* end H5T_set_loc() */
