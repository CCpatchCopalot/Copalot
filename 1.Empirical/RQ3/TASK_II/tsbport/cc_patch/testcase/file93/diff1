27c27,30
<         if (strcmp(name, in->name) == 0) {
---
>         if (strlen(in->name) != nlen) {
>                 continue;
>             }
>         if (strncmp(name, in->name, nlen) == 0) {
77c80
<     if (request->real_path.len < strlen(base)) {
---
>     if (request->real_path.len < sizeof(base)-1) {
81c84
<     return flb_sds_create_len(&request->real_path.data[strlen(base)],request->real_path.len - strlen(base));
---
>     return flb_sds_create_len(&request->real_path.data[sizeof(base)-1],request->real_path.len - sizeof(base)-1);
505,511c508,512
<         input_name = flb_sds_create_len(inputs->ptr[i].via.str.ptr, inputs->ptr[i].via.str.size);
<         msgpack_pack_str_with_body(&mp_pck, input_name, flb_sds_len(input_name));
< 
<         if (inputs->ptr[i].type != MSGPACK_OBJECT_STR) {
<             msgpack_pack_map(&mp_pck, 1);
<             msgpack_pack_str_with_body(&mp_pck, "status", strlen("status"));
<             msgpack_pack_str_with_body(&mp_pck, "error", strlen("error"));
---
>         if (inputs->ptr[i].type != MSGPACK_OBJECT_STR || inputs->ptr[i].via.str.ptr == NULL) {
>                 response = 503;
>                 error_msg = flb_sds_create("invalid input");
>                 msgpack_sbuffer_clear(&mp_sbuf);
>                 goto unpack_error;
532c533,544
<             else {
---
>             for (i = 0; i < inputs->size; i++) {
> 
>                 input_name = inputs->ptr[i].via.str.ptr;
>                 input_nlen = inputs->ptr[i].via.str.size;
> 
>                 msgpack_pack_str_with_body(&mp_pck, input_name, input_nlen);
> 
>                 if (request->method == MK_METHOD_POST) {
> 
>                     ret = msgpack_params_enable_trace((struct flb_hs *)data, &result,input_name, input_nlen);
> 
>                     if (ret != 0) {
534,537c546,554
<                 msgpack_pack_str_with_body(&mp_pck, "status", strlen("status"));
<                 msgpack_pack_str_with_body(&mp_pck, "error", strlen("error"));
<                 msgpack_pack_str_with_body(&mp_pck, "message", strlen("message"));
<                 msgpack_pack_str_with_body(&mp_pck, "method not allowed", strlen("method not allowed"));
---
>                         msgpack_pack_str_with_body(&mp_pck, HTTP_FIELD_STATUS, HTTP_FIELD_STATUS_LEN);
>                         msgpack_pack_str_with_body(&mp_pck, HTTP_RESULT_ERROR, HTTP_RESULT_ERROR_LEN);
>                         msgpack_pack_str_with_body(&mp_pck, HTTP_FIELD_RETURNCODE, HTTP_FIELD_RETURNCODE_LEN);
>                         msgpack_pack_int64(&mp_pck, ret);
>                              }
>             else {
>                 msgpack_pack_map(&mp_pck, 1);
> msgpack_pack_str_with_body(&mp_pck, HTTP_FIELD_STATUS, HTTP_FIELD_STATUS_LEN);
> msgpack_pack_str_with_body(&mp_pck, HTTP_RESULT_OK, HTTP_RESULT_OK_LEN);
539a557,560
> else if (request->method == MK_METHOD_DELETE) {
>     disable_trace_input((struct flb_hs *)data, input_name, input_nlen);
>     msgpack_pack_str_with_body(&mp_pck, HTTP_FIELD_STATUS, HTTP_FIELD_STATUS_LEN);
>     msgpack_pack_str_with_body(&mp_pck, HTTP_RESULT_OK, HTTP_RESULT_OK_LEN);
540a562,570
> else {
>     msgpack_pack_map(&mp_pck, 2);
>     msgpack_pack_str_with_body(&mp_pck, HTTP_FIELD_STATUS, HTTP_FIELD_STATUS_LEN);
>     msgpack_pack_str_with_body(&mp_pck, HTTP_RESULT_ERROR, HTTP_RESULT_ERROR_LEN);
>     msgpack_pack_str_with_body(&mp_pck, HTTP_FIELD_MESSAGE, HTTP_FIELD_MESSAGE_LEN);
>     msgpack_pack_str_with_body(&mp_pck, HTTP_RESULT_METHODNOTALLOWED, HTTP_RESULT_METHODNOTALLOWED_LEN);
> }
>      }
>  
