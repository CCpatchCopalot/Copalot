

The vulnerability is addressed by adding the `rot_image_params` argument to `rotateImage` to control whether image dimensions are updated. The critical modification is in `processCropSelections` where `rotateImage` is called with `FALSE` for `rot_image_params` when rotating crop regions, preventing incorrect dimension swaps that could lead to an out-of-bounds read.

```diff
diff --git a/tools/tiffcrop.c b/tools/tiffcrop.c
--- a/tools/tiffcrop.c
+++ b/tools/tiffcrop.c
@@ -8635,7 +8635,7 @@
             /* Rotate the cropped region and update the buffer size accordingly. */
             size_t rot_buf_size = 0;
             if (rotateImage(crop->rotation, image, &crop->combined_width,
-                            &crop->combined_length, &crop_buff, &rot_buf_size))
+                            &crop->combined_length, &crop_buff, &rot_buf_size, FALSE))
             {
                 TIFFError("processCropSelections",
                           "Failed to rotate composite regions by %" PRIu16
```