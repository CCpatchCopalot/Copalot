

The vulnerability stems from an integer overflow due to a negative `pps_id` in `gf_avc_read_pps_bs_internal`. The patch adds a check for `pps_id < 0` in this function. The critical call chain modification involves the function reading `pps_id` via `gf_bs_read_ue_log` and validating its range.  

```diff
diff --git a/src/media_tools/av_parsers.c b/src/media_tools/av_parsers.c
--- a/src/media_tools/av_parsers.c
+++ b/src/media_tools/av_parsers.c
@@ -5447,7 +5447,7 @@
 		gf_bs_read_int_log(bs, 5, "nal_unit_type");
 	}
 	pps_id = gf_bs_read_ue_log(bs, "pps_id");
-	if (pps_id >= 255) {
+	if ((pps_id<0) || (pps_id >= 255)) {
 		return -1;
 	}
 	pps = &avc->pps[pps_id];
```  

This change directly addresses the overflow by validating `pps_id` is non-negative, preventing out-of-bounds access in `avc->pps`. The call chain involves `gf_bs_read_ue_log` (reading `pps_id`) leading to the bounds check, which was modified to include the negative check.