

The vulnerability arises when rotating the entire image without properly updating its dimensions, leading to an out-of-bounds read. The critical call chain modification is in `correct_orientation` where `rotateImage` is called with `rot_image_params = TRUE` to ensure image parameters (width/length) are updated after rotation, preventing dimension mismatches.

```diff
diff --git a/tools/tiffcrop.c b/tools/tiffcrop.c
--- a/tools/tiffcrop.c
+++ b/tools/tiffcrop.c
@@ -7266,8 +7266,13 @@
                       (uint16_t)(image->adjustments & ROTATE_ANY));
             return (-1);
         }
-
-        if (rotateImage(rotation, image, &image->width, &image->length,
-                        work_buff_ptr, NULL))
+        /* Dummy variable to avoid switching image->width/length twice */
+        uint32_t width = image->width;
+        uint32_t length = image->length;
+        if (rotateImage(rotation, image, &width, &length,
+                        work_buff_ptr, NULL,
+                        /* Update image params after rotation */ 
+                        TRUE))
         {
             TIFFError("correct_orientation", "Unable to rotate image");
             return (-1);
```