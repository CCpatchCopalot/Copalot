diff --git a/src/media_tools/mpegts.c b/src/media_tools/mpegts.c
index ef709fb12..cd55e5843 100644
--- a/src/media_tools/mpegts.c
+++ b/src/media_tools/mpegts.c
@@ -1217,6 +1217,11 @@ static void gf_m2ts_process_pmt(GF_M2TS_Demuxer *ts, GF_M2TS_SECTION_ES *pmt, GF
 		Bool inherit_pcr = 0;
 		u32 pid, stream_type, reg_desc_format;
 
+		if (pos + 5 > data_size) {
+			GF_LOG(GF_LOG_ERROR, GF_LOG_CONTAINER, ("Broken PMT! size %d but position %d and need at least 5 bytes to declare es\n", data_size, pos));
+			break;
+		}
+
 		stream_type = data[0];
 		pid = ((data[1] & 0x1f) << 8) | data[2];
 		desc_len = ((data[3] & 0xf) << 8) | data[4];
@@ -1359,11 +1364,22 @@ static void gf_m2ts_process_pmt(GF_M2TS_Demuxer *ts, GF_M2TS_SECTION_ES *pmt, GF
 		data += 5;
 
 		while (desc_len) {
+			if (pos + 2 > data_size) {
+				GF_LOG(GF_LOG_ERROR, GF_LOG_CONTAINER, ("Broken PMT descriptor! size %d but position %d and need at least 2 bytes to parse descritpor\n", data_size, pos));
+				break;
+			}
 			u8 tag = data[0];
 			u32 len = data[1];
+
+			if (pos + 2 + len > data_size) {
+				GF_LOG(GF_LOG_ERROR, GF_LOG_CONTAINER, ("Broken PMT descriptor! size %d, desc size %d but position %d\n", data_size, len, pos));
+				break;
+			}
+
 			if (es) {
 				switch (tag) {
 				case GF_M2TS_ISO_639_LANGUAGE_DESCRIPTOR:
-					if (pes)
+					if (pes && (len>=3) )
 						pes->lang = GF_4CC(' ', data[2], data[3], data[4]);
 					break;
 				case GF_M2TS_MPEG4_SL_DESCRIPTOR:
@@ -1418,7 +1434,7 @@ static void gf_m2ts_process_pmt(GF_M2TS_Demuxer *ts, GF_M2TS_SECTION_ES *pmt, GF
 					}
 					break;
 				case GF_M2TS_DVB_SUBTITLING_DESCRIPTOR:
-					if (pes) {
+					if (pes && (len>=8)) {
 						pes->sub.language[0] = data[2];
 						pes->sub.language[1] = data[3];
 						pes->sub.language[2] = data[4];
@@ -1442,7 +1458,7 @@ static void gf_m2ts_process_pmt(GF_M2TS_Demuxer *ts, GF_M2TS_SECTION_ES *pmt, GF
 					es->stream_type = GF_M2TS_DVB_VBI;
 					break;
 				case GF_M2TS_HIERARCHY_DESCRIPTOR:
-					if (pes) {
+					if (pes && (len>=4)) {
 						u8 hierarchy_embedded_layer_index;
 						GF_BitStream *hbs = gf_bs_new((const char *)data, data_size, GF_BITSTREAM_READ);
 						/*u32 skip = */gf_bs_read_int(hbs, 16);