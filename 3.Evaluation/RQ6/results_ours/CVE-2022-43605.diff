diff --git a/source/src/cip/cipcommon.c b/source/src/cip/cipcommon.c
index 6e71f3cfa..2f7b9ec9c 100644
--- a/source/src/cip/cipcommon.c
+++ b/source/src/cip/cipcommon.c
@@ -511,6 +511,10 @@ EipStatus GetAttributeSingle(CipInstance *RESTRICT const instance,
                              CipMessageRouterResponse *const message_router_response,
                              const struct sockaddr *originator_address,
                              const int encapsulation_session) {
+  /* Suppress unused parameter compiler warning. */
+  (void) originator_address;
+  (void) encapsulation_session;
+
   /* Mask for filtering get-ability */
 
   CipAttributeStruct *attribute = GetCipAttribute(instance,
@@ -664,11 +668,19 @@ void EncodeCipString(const CipString *const data,
 
 void EncodeCipString2(const CipString2 *const data,
                       ENIPMessage *const outgoing_message) {
+  /* Suppress unused parameter compiler warning. */
+  (void)data;
+  (void)outgoing_message;
+
   OPENER_ASSERT(false); /* Not implemented yet */
 }
 
 void EncodeCipStringN(const CipStringN *const data,
                       ENIPMessage *const outgoing_message) {
+  /* Suppress unused parameter compiler warning. */
+  (void)data;
+  (void)outgoing_message;
+
   OPENER_ASSERT(false); /* Not implemented yet */
 }
 
@@ -753,6 +765,9 @@ EipStatus SetAttributeSingle(CipInstance *RESTRICT const instance,
                              CipMessageRouterResponse *const message_router_response,
                              const struct sockaddr *originator_address,
                              const int encapsulation_session) {
+  /* Suppress unused parameter compiler warning. */
+  (void)originator_address;
+  (void)encapsulation_session;
 
   CipAttributeStruct *attribute = GetCipAttribute(instance,
                                                   message_router_request->request_path.attribute_number);
@@ -1038,6 +1053,9 @@ EipStatus GetAttributeAll(CipInstance *instance,
                           CipMessageRouterResponse *message_router_response,
                           const struct sockaddr *originator_address,
                           const int encapsulation_session) {
+  /* Suppress unused parameter compiler warning. */
+  (void)originator_address;
+  (void)encapsulation_session;
 
   InitializeENIPMessage(&message_router_response->message);
   CipAttributeStruct *attribute = instance->attributes; /* pointer to list of attributes*/
@@ -1076,6 +1094,9 @@ EipStatus GetAttributeList(CipInstance *instance,
                            CipMessageRouterResponse *message_router_response,
                            const struct sockaddr *originator_address,
                            const int encapsulation_session) {
+  /* Suppress unused parameter compiler warning. */
+  (void)originator_address;
+  (void)encapsulation_session;
 
   InitializeENIPMessage(&message_router_response->message);
   message_router_response->reply_service =
@@ -1135,6 +1156,9 @@ EipStatus SetAttributeList(CipInstance *instance,
                            CipMessageRouterResponse *message_router_response,
                            const struct sockaddr *originator_address,
                            const int encapsulation_session) {
+  /* Suppress unused parameter compiler warning. */
+  (void)originator_address;
+  (void)encapsulation_session;
 
   InitializeENIPMessage(&message_router_response->message);
   message_router_response->reply_service =
@@ -1330,6 +1354,9 @@ EipStatus CipCreateService(CipInstance *RESTRICT const instance,
                            CipMessageRouterResponse *const message_router_response,
                            const struct sockaddr *originator_address,
                            const int encapsulation_session) {
+  /* Suppress unused parameter compiler warning. */
+  (void)originator_address;
+  (void)encapsulation_session;
 
   InitializeENIPMessage(&message_router_response->message);
   message_router_response->reply_service =
@@ -1369,6 +1396,9 @@ EipStatus CipDeleteService(CipInstance *RESTRICT const instance,
                            CipMessageRouterResponse *const message_router_response,
                            const struct sockaddr *originator_address,
                            const int encapsulation_session) {
+  /* Suppress unused parameter compiler warning. */
+  (void)originator_address;
+  (void)encapsulation_session;
 
   message_router_response->general_status = kCipErrorInstanceNotDeletable;
   message_router_response->size_of_additional_status = 0;
@@ -1429,6 +1459,10 @@ EipStatus CipResetService(CipInstance *RESTRICT const instance,
                           CipMessageRouterResponse *const message_router_response,
                           const struct sockaddr *originator_address,
                           const int encapsulation_session) {
+  /* Suppress unused parameter compiler warning. */
+  (void)originator_address;
+  (void)encapsulation_session;
+
   message_router_response->general_status = kCipErrorSuccess;
   message_router_response->size_of_additional_status = 0;
   InitializeENIPMessage(&message_router_response->message);
diff --git a/source/src/cip/cipconnectionmanager.c b/source/src/cip/cipconnectionmanager.c
index 116dbafd2..d50b1b7a6 100644
--- a/source/src/cip/cipconnectionmanager.c
+++ b/source/src/cip/cipconnectionmanager.c
@@ -366,6 +366,11 @@ EipStatus HandleNullNonMatchingForwardOpenRequest(
   CipInstance *instance,
   CipMessageRouterRequest *message_router_request,
   CipMessageRouterResponse *message_router_response) {
+  /* Suppress unused parameter compiler warning. */
+  (void) instance;
+  (void) message_router_request;
+  (void) message_router_response;
+
   OPENER_TRACE_INFO("Right now we cannot handle Null requests\n");
   return AssembleForwardOpenResponse(connection_object,
                                      message_router_response,
@@ -390,6 +395,10 @@ EipStatus HandleNullMatchingForwardOpenRequest(
   CipInstance *instance,
   CipMessageRouterRequest *message_router_request,
   CipMessageRouterResponse *message_router_response) {
+  /* Suppress unused parameter compiler warning. */
+  (void) instance;
+  (void) message_router_request;
+
   OPENER_TRACE_INFO("Right now we cannot handle Null requests\n");
   return AssembleForwardOpenResponse(connection_object,
                                      message_router_response,
@@ -413,6 +422,10 @@ EipStatus HandleNonNullMatchingForwardOpenRequest(
   CipInstance *instance,
   CipMessageRouterRequest *message_router_request,
   CipMessageRouterResponse *message_router_response) {
+  /* Suppress unused parameter compiler warning. */
+  (void) instance;
+  (void) message_router_request;
+
   OPENER_TRACE_INFO("Right now we cannot handle reconfiguration requests\n");
   return AssembleForwardOpenResponse(connection_object,
                                      message_router_response,
@@ -435,6 +448,9 @@ EipStatus HandleNonNullNonMatchingForwardOpenRequest(
   CipInstance *instance,
   CipMessageRouterRequest *message_router_request,
   CipMessageRouterResponse *message_router_response) {
+  /* Suppress unused parameter compiler warning. */
+  (void) connection_object;
+  (void) instance;
 
   EipUint16 connection_status = kConnectionManagerExtendedStatusCodeSuccess;
 
@@ -649,6 +665,7 @@ EipStatus ForwardClose(CipInstance *instance,
                        const int encapsulation_session) {
   /*Suppress compiler warning*/
   (void) instance;
+  (void) encapsulation_session;
 
   /* check connection_serial_number && originator_vendor_id && originator_serial_number if connection is established */
   ConnectionManagerExtendedStatusCode connection_status =
@@ -724,6 +741,8 @@ EipStatus GetConnectionOwner(CipInstance *instance,
   (void) instance;
   (void) message_router_request;
   (void) message_router_response;
+  (void) originator_address;
+  (void) encapsulation_session;
 
   return kEipStatusOk;
 }
@@ -731,6 +750,8 @@ EipStatus GetConnectionOwner(CipInstance *instance,
 EipStatus GetConnectionData(CipInstance *instance,
                             CipMessageRouterRequest *message_router_request,
                             CipMessageRouterResponse *message_router_response) {
+  /* Suppress unused parameter compiler warning. */
+  (void)instance;
 
   CIPServiceCode service_code = kGetConnectionData;
   message_router_response->reply_service = (0x80 | service_code);
@@ -775,6 +796,8 @@ EipStatus SearchConnectionData(CipInstance *instance,
                                CipMessageRouterRequest *message_router_request,
                                CipMessageRouterResponse *message_router_response)
 {
+  /* Suppress unused parameter compiler warning. */
+  (void)instance;
 
   CIPServiceCode service_code = kSearchConnectionData;
   message_router_response->reply_service = (0x80 | service_code);
diff --git a/source/src/cip/cipconnectionobject.c b/source/src/cip/cipconnectionobject.c
index b695c62f9..a1da61f4b 100644
--- a/source/src/cip/cipconnectionobject.c
+++ b/source/src/cip/cipconnectionobject.c
@@ -110,6 +110,9 @@ void ConnectionObjectInitializeEmpty(
 }
 
 CipConnectionObject *CipConnectionObjectCreate(const CipOctet *message) {
+  /* Suppress unused parameter compiler warning. */
+  (void)message;
+
   assert(false); /* NOT IMPLEMENTED */
   return NULL;
 }
diff --git a/source/src/cip/cipdlr.c b/source/src/cip/cipdlr.c
index 27d660e75..9e477902a 100644
--- a/source/src/cip/cipdlr.c
+++ b/source/src/cip/cipdlr.c
@@ -92,6 +92,9 @@ CipDlrObject g_dlr;  /**< definition of DLR object instance 1 data */
  */
 static void EncodeCipRingSupervisorConfig(const void *const data,
                                           ENIPMessage *const outgoing_message) {
+  /* Suppress unused parameter compiler warning. */
+  (void)data;
+
   const size_t kRingSupStructSize = 12u;
   FillNextNMessageOctetsWithValueAndMoveToNextPosition(0,
                                                        kRingSupStructSize,
diff --git a/source/src/cip/cipethernetlink.c b/source/src/cip/cipethernetlink.c
index 4888dd3b5..875094134 100644
--- a/source/src/cip/cipethernetlink.c
+++ b/source/src/cip/cipethernetlink.c
@@ -415,6 +415,9 @@ void CipEthernetLinkSetMac(EipUint8 *p_physical_address) {
 static void EncodeCipEthernetLinkInterfaceCounters(const void *const data,
                                                    ENIPMessage *const outgoing_message)
 {
+  /* Suppress unused parameter compiler warning. */
+  (void)data;
+
 #if defined(OPENER_ETHLINK_CNTRS_ENABLE) && 0 != OPENER_ETHLINK_CNTRS_ENABLE
   for (size_t i = 0; i < 11; i++) {
     /* Encode real values using the access through the array of the
@@ -434,6 +437,9 @@ static void EncodeCipEthernetLinkInterfaceCounters(const void *const data,
 static void EncodeCipEthernetLinkMediaCounters(const void *const data,
                                                ENIPMessage *const outgoing_message)
 {
+  /* Suppress unused parameter compiler warning. */
+  (void)data;
+
 #if defined(OPENER_ETHLINK_CNTRS_ENABLE) && 0 != OPENER_ETHLINK_CNTRS_ENABLE
   for (size_t i = 0; i < 12; i++) {
     /* Encode real values using the access through the array of the
@@ -458,6 +464,9 @@ static void EncodeCipEthernetLinkInterfaceControl(const void *const data,
   const CipEthernetLinkInterfaceControl *const interface_control =
     data;
 #else
+  /* Suppress unused parameter compiler warning. */
+  (void)data;
+
   CipEthernetLinkInterfaceControl *interface_control = &s_interface_control;
 #endif
   EncodeCipWord(&interface_control->control_bits, outgoing_message);
diff --git a/source/src/cip/ciptcpipinterface.c b/source/src/cip/ciptcpipinterface.c
index 2da6f0d89..3fa06df8c 100644
--- a/source/src/cip/ciptcpipinterface.c
+++ b/source/src/cip/ciptcpipinterface.c
@@ -335,6 +335,9 @@ void EncodeCipTcpIpInterfaceConfiguration(const void *const data,
 
 void EncodeCipTcpIpMulticastConfiguration(const void *const data,
                                           ENIPMessage *const outgoing_message) {
+  /* Suppress unused parameter compiler warning. */
+  (void)data;
+
   EncodeCipUsint(&(g_tcpip.mcast_config.alloc_control), outgoing_message);
   EncodeCipUsint(&(g_tcpip.mcast_config.reserved_shall_be_zero),
                  outgoing_message);
@@ -349,11 +352,17 @@ void EncodeCipTcpIpMulticastConfiguration(const void *const data,
 
 void EncodeSafetyNetworkNumber(const void *const data,
                                ENIPMessage *const outgoing_message) {
+  /* Suppress unused parameter compiler warning. */
+  (void)data;
+
   FillNextNMessageOctetsWithValueAndMoveToNextPosition(0, 6, outgoing_message);
 }
 
 void EncodeCipLastConflictDetected(const void *const data,
                                    ENIPMessage *const outgoing_message) {
+  /* Suppress unused parameter compiler warning. */
+  (void)data;
+
   const size_t kAttribute11Size = sizeof(CipUsint) + 6 * sizeof(CipUsint) + 28 *
                                   sizeof(CipUsint);
   OPENER_ASSERT(kAttribute11Size == 35);
diff --git a/source/src/ports/WIN32/main.c b/source/src/ports/WIN32/main.c
index 16af7ab1e..76532e4e8 100644
--- a/source/src/ports/WIN32/main.c
+++ b/source/src/ports/WIN32/main.c
@@ -171,6 +171,9 @@ static void LeaveStack(int signal) {
 }
 
 static DWORD executeEventLoop(LPVOID thread_arg) {
+	/* Suppress unused parameter compiler warning. */
+	(void)thread_arg;
+
 	/* The event loop. Put other processing you need done continually in here */
 	while (0 == g_end_stack) {
 		if (kEipStatusOk != NetworkHandlerProcessCyclic()) {
diff --git a/source/src/ports/WIN32/networkhandler.c b/source/src/ports/WIN32/networkhandler.c
index f3c9f1bb6..7eeda79ac 100644
--- a/source/src/ports/WIN32/networkhandler.c
+++ b/source/src/ports/WIN32/networkhandler.c
@@ -37,6 +37,9 @@ EipStatus NetworkHandlerInitializePlatform(void) {
 }
 
 void ShutdownSocketPlatform(int socket_handle) {
+  /* Suppress unused parameter compiler warning. */
+  (void)socket_handle;
+
 #pragma \
   message "Untested. Is a shutdown() needed under Windows like for the POSIX port?"
 }
@@ -52,5 +55,9 @@ int SetSocketToNonBlocking(int socket_handle) {
 
 int SetQosOnSocket(const int socket,
                    CipUsint qos_value) {
+  /* Suppress unused parameter compiler warning. */
+  (void) socket;
+  (void) qos_value;
+
   return 0; // Dummy implementation, until a working one is viable
 }
diff --git a/source/src/ports/nvdata/nvdata.c b/source/src/ports/nvdata/nvdata.c
index 03eb4fc0b..83fffd734 100644
--- a/source/src/ports/nvdata/nvdata.c
+++ b/source/src/ports/nvdata/nvdata.c
@@ -62,6 +62,9 @@ EipStatus NvdataLoad(void) {
 EipStatus NvQosSetCallback(CipInstance *const instance,
                            CipAttributeStruct *const attribute,
                            CipByte service) {
+  /* Suppress unused parameter compiler warning. */
+  (void)service;
+
   EipStatus status = kEipStatusOk;
 
   if (0 != (kNvDataFunc & attribute->attribute_flags) ) {
diff --git a/source/src/ports/nvdata/nvtcpip.c b/source/src/ports/nvdata/nvtcpip.c
index cfd76d178..525bbeaa9 100644
--- a/source/src/ports/nvdata/nvtcpip.c
+++ b/source/src/ports/nvdata/nvtcpip.c
@@ -26,6 +26,9 @@
  *  @return kEipStatusOk: success; kEipStatusError: failure
  */
 int NvTcpipLoad(CipTcpIpObject *p_tcp_ip) {
+  /* Suppress unused parameter compiler warning. */
+  (void)p_tcp_ip;
+
   CipTcpIpObject tcpip = {0};
   EipStatus eip_status = kEipStatusOk;
 
@@ -55,6 +58,9 @@ int NvTcpipLoad(CipTcpIpObject *p_tcp_ip) {
  *  @return kEipStatusOk: success; kEipStatusError: failure
  */
 EipStatus NvTcpipStore(const CipTcpIpObject *p_tcp_ip) {
+  /* Suppress unused parameter compiler warning. */
+  (void)p_tcp_ip;
+
   FILE *p_file = ConfFileOpen(true, TCPIP_CFG_NAME);
   if (NULL != p_file) {
     /* Print output data */
