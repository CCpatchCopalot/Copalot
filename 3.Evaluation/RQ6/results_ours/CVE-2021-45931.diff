

Yes

The streamlined patch focusing on the vulnerability fix:

```diff
diff --git a/src/hb-bit-set-invertible.hh b/src/hb-bit-set-invertible.hh
--- a/src/hb-bit-set-invertible.hh
+++ b/src/hb-bit-set-invertible.hh
@@ -46,9 +46,22 @@ struct hb_bit_set_invertible_t
   bool in_error () const { return s.in_error (); }
   explicit operator bool () const { return !is_empty (); }
 
-  void reset () { s.reset (); inverted = false; }
-  void clear () { s.clear (); inverted = false; }
-  void invert () { inverted = !inverted; }
+  void reset ()
+  {
+    s.reset ();
+    inverted = false;
+  }
+  void clear ()
+  {
+    s.clear ();
+    if (likely (s.successful))
+      inverted = false;
+  }
+  void invert ()
+  {
+    if (likely (s.successful))
+      inverted = !inverted;
+  }
 
   bool is_empty () const
   {
@@ -116,7 +129,12 @@ struct hb_bit_set_invertible_t
     return next (&c) && c <= last;
   }
 
-  void set (const hb_bit_set_invertible_t &other) { s.set (other.s); inverted = other.inverted; }
+  void set (const hb_bit_set_invertible_t &other)
+  {
+    s.set (other.s);
+    if (likely (s.successful))
+      inverted = other.inverted;
+  }
 
   bool is_equal (const hb_bit_set_invertible_t &other) const
   {
@@ -161,7 +179,8 @@ struct hb_bit_set_invertible_t
       else
 	process (hb_bitwise_lt, other);
     }
-    inverted = inverted || other.inverted;
+    if (likely (s.successful))
+      inverted = inverted || other.inverted;
   }
   void intersect (const hb_bit_set_invertible_t &other)
   {
@@ -179,7 +198,8 @@ struct hb_bit_set_invertible_t
       else
 	process (hb_bitwise_gt, other);
     }
-    inverted = inverted && other.inverted;
+    if (likely (s.successful))
+      inverted = inverted && other.inverted;
   }
   void subtract (const hb_bit_set_invertible_t &other)
   {
@@ -197,12 +217,14 @@ struct hb_bit_set_invertible_t
       else
 	process (hb_bitwise_and, other);
     }
-    inverted = inverted && !other.inverted;
+    if (likely (s.successful))
+      inverted = inverted && !other.inverted;
   }
   void symmetric_difference (const hb_bit_set_invertible_t &other)
   {
     process (hb_bitwise_xor, other);
-    inverted = inverted ^ other.inverted;
+    if (likely (s.successful))
+      inverted = inverted ^ other.inverted;
   }
 
   bool next (hb_codepoint_t *codepoint) const
diff --git a/src/hb-set.cc b/src/hb-set.cc
--- a/src/hb-set.cc
+++ b/src/hb-set.cc
@@ -201,7 +201,7 @@ hb_set_copy (const hb_set_t *set)
 void
 hb_set_clear (hb_set_t *set)
 {
-  if (unlikely (hb_object_is_immutable (set)))
+  /* Immutible-safe. */
     return;
 
   set->clear ();
@@ -368,7 +368,7 @@ hb_set_set (hb_set_t       *set,
 void
 hb_set_union (hb_set_t       *set,
 	      const hb_set_t *other)
-  if (unlikely (hb_object_is_immutable (set)))
+  /* Immutible-safe. */
     return;
 
   set->union_ (*other);
@@ -387,7 +387,7 @@ hb_set_intersect (hb_set_t       *set,
 void
 hb_set_subtract (hb_set_t       *set,
 		 const hb_set_t *other)
-  if (unlikely (hb_object_is_immutable (set)))
+  /* Immutible-safe. */
     return;
 
   set->subtract (*other);
@@ -407,7 +407,7 @@ hb_set_symmetric_difference (hb_set_t       *set,
 void
 hb_set_invert (hb_set_t *set)
 {
-  if (unlikely (hb_object_is_immutable (set)))
+  /* Immutible-safe. */
     return;
 
   set->invert ();
```