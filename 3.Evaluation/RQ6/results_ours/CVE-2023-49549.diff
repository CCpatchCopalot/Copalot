diff --git a/mjs.c b/mjs.c
index db89985..49c3d92 100644
--- a/mjs.c
+++ b/mjs.c
@@ -3313,8 +3313,11 @@ extern "C" {
 
 struct mjs_bcode_part;
 
+#if MJS_ENABLE_DEBUG
 MJS_PRIVATE const char *opcodetostr(uint8_t opcode);
 MJS_PRIVATE size_t mjs_disasm_single(const uint8_t *code, size_t i);
+#endif
+
 MJS_PRIVATE const char *mjs_stringify_type(enum mjs_type t);
 
 /*
@@ -8552,7 +8555,9 @@ MJS_PRIVATE mjs_err_t mjs_execute(struct mjs *mjs, size_t off, mjs_val_t *res) {
 #endif
 
     code = (const uint8_t *) bp.data.p;
+#if MJS_ENABLE_DEBUG
     mjs_disasm_single(code, i);
+#endif
     prev_opcode = opcode;
     opcode = code[i];
     switch (opcode) {
@@ -8964,7 +8969,9 @@ MJS_PRIVATE mjs_err_t mjs_exec_internal(struct mjs *mjs, const char *path,
   size_t off = mjs->bcode_len;
   mjs_val_t r = MJS_UNDEFINED;
   mjs->error = mjs_parse(path, src, mjs);
+#if MJS_ENABLE_DEBUG
   if (cs_log_level >= LL_VERBOSE_DEBUG) mjs_dump(mjs, 1);
+#endif
   if (generate_jsc == -1) generate_jsc = mjs->generate_jsc;
   if (mjs->error == MJS_OK) {
 #if MJS_GENERATE_JSC && defined(CS_MMAP)
@@ -14163,6 +14170,8 @@ void mjs_dump(struct mjs *mjs, int do_disasm) {
   LOG(LL_VERBOSE_DEBUG, ("------- MJS VM DUMP END"));
 }
 
+#endif
+
 MJS_PRIVATE int mjs_check_arg(struct mjs *mjs, int arg_num,
                               const char *arg_name, enum mjs_type expected_type,
                               mjs_val_t *parg) {
@@ -14286,5 +14295,3 @@ int mjs_get_offset_by_call_frame_num(struct mjs *mjs, int cf_num) {
   }
   return ret;
 }
-
-#endif
diff --git a/mjs.h b/mjs.h
index 38de54b..80593fd 100644
--- a/mjs.h
+++ b/mjs.h
@@ -70,7 +70,9 @@ typedef unsigned char uint8_t;
 extern "C" {
 #endif /* __cplusplus */
 
-#define MJS_ENABLE_DEBUG 1
+#ifndef MJS_ENABLE_DEBUG
+#define MJS_ENABLE_DEBUG 0
+#endif
 
 /*
  *  Double-precision floating-point number, IEEE 754
@@ -385,7 +387,9 @@ typedef unsigned char uint8_t;
 extern "C" {
 #endif /* __cplusplus */
 
-#define MJS_ENABLE_DEBUG 1
+#ifndef MJS_ENABLE_DEBUG
+#define MJS_ENABLE_DEBUG 0
+#endif
 
 /*
  *  Double-precision floating-point number, IEEE 754
diff --git a/mjs_no_common.c b/mjs_no_common.c
index 1bdae37..2e07937 100644
--- a/mjs_no_common.c
+++ b/mjs_no_common.c
@@ -213,7 +213,9 @@ typedef unsigned char uint8_t;
 extern "C" {
 #endif /* __cplusplus */
 
-#define MJS_ENABLE_DEBUG 1
+#ifndef MJS_ENABLE_DEBUG
+#define MJS_ENABLE_DEBUG 0
+#endif
 
 /*
  *  Double-precision floating-point number, IEEE 754
@@ -4651,7 +4653,9 @@ MJS_PRIVATE mjs_err_t mjs_exec_internal(struct mjs *mjs, const char *path,
   size_t off = mjs->bcode_len;
   mjs_val_t r = MJS_UNDEFINED;
   mjs->error = mjs_parse(path, src, mjs);
+#if MJS_ENABLE_DEBUG
   if (cs_log_level >= LL_VERBOSE_DEBUG) mjs_dump(mjs, 1);
+#endif
   if (generate_jsc == -1) generate_jsc = mjs->generate_jsc;
   if (mjs->error == MJS_OK) {
 #if MJS_GENERATE_JSC && defined(CS_MMAP)
@@ -9639,8 +9643,6 @@ void mjs_fprintf(mjs_val_t v, struct mjs *mjs, FILE *fp) {
   mjs_jprintf(v, mjs, &out);
 }
 
-#if MJS_ENABLE_DEBUG
-
 MJS_PRIVATE const char *opcodetostr(uint8_t opcode) {
   static const char *names[] = {
       "NOP", "DROP", "DUP", "SWAP", "JMP", "JMP_TRUE", "JMP_NEUTRAL_TRUE",
@@ -9819,6 +9821,8 @@ void mjs_disasm(const uint8_t *code, size_t len) {
   }
 }
 
+#if MJS_ENABLE_DEBUG
+
 static void mjs_dump_obj_stack(const char *name, const struct mbuf *m,
                                struct mjs *mjs) {
   char buf[50];
@@ -9850,6 +9854,8 @@ void mjs_dump(struct mjs *mjs, int do_disasm) {
   LOG(LL_VERBOSE_DEBUG, ("------- MJS VM DUMP END"));
 }
 
+#endif
+
 MJS_PRIVATE int mjs_check_arg(struct mjs *mjs, int arg_num,
                               const char *arg_name, enum mjs_type expected_type,
                               mjs_val_t *parg) {
@@ -9973,5 +9979,3 @@ int mjs_get_offset_by_call_frame_num(struct mjs *mjs, int cf_num) {
   }
   return ret;
 }
-
-#endif
diff --git a/src/mjs_core_public.h b/src/mjs_core_public.h
index 38b7fa5..b4c72c7 100644
--- a/src/mjs_core_public.h
+++ b/src/mjs_core_public.h
@@ -21,7 +21,9 @@ typedef unsigned char uint8_t;
 extern "C" {
 #endif /* __cplusplus */
 
-#define MJS_ENABLE_DEBUG 1
+#ifndef MJS_ENABLE_DEBUG
+#define MJS_ENABLE_DEBUG 0
+#endif
 
 /*
  *  Double-precision floating-point number, IEEE 754
diff --git a/src/mjs_exec.c b/src/mjs_exec.c
index 237c454..bd48fea 100644
--- a/src/mjs_exec.c
+++ b/src/mjs_exec.c
@@ -584,7 +584,9 @@ MJS_PRIVATE mjs_err_t mjs_execute(struct mjs *mjs, size_t off, mjs_val_t *res) {
 #endif
 
     code = (const uint8_t *) bp.data.p;
+#if MJS_ENABLE_DEBUG
     mjs_disasm_single(code, i);
+#endif
     prev_opcode = opcode;
     opcode = code[i];
     switch (opcode) {
@@ -996,7 +998,9 @@ MJS_PRIVATE mjs_err_t mjs_exec_internal(struct mjs *mjs, const char *path,
   size_t off = mjs->bcode_len;
   mjs_val_t r = MJS_UNDEFINED;
   mjs->error = mjs_parse(path, src, mjs);
+#if MJS_ENABLE_DEBUG
   if (cs_log_level >= LL_VERBOSE_DEBUG) mjs_dump(mjs, 1);
+#endif
   if (generate_jsc == -1) generate_jsc = mjs->generate_jsc;
   if (mjs->error == MJS_OK) {
 #if MJS_GENERATE_JSC && defined(CS_MMAP)
diff --git a/src/mjs_util.c b/src/mjs_util.c
index b773e0b..b14a18d 100644
--- a/src/mjs_util.c
+++ b/src/mjs_util.c
@@ -304,6 +304,8 @@ void mjs_dump(struct mjs *mjs, int do_disasm) {
   LOG(LL_VERBOSE_DEBUG, ("------- MJS VM DUMP END"));
 }
 
+#endif
+
 MJS_PRIVATE int mjs_check_arg(struct mjs *mjs, int arg_num,
                               const char *arg_name, enum mjs_type expected_type,
                               mjs_val_t *parg) {
@@ -427,5 +429,3 @@ int mjs_get_offset_by_call_frame_num(struct mjs *mjs, int cf_num) {
   }
   return ret;
 }
-
-#endif
diff --git a/src/mjs_util.h b/src/mjs_util.h
index 58c4d19..89c3442 100644
--- a/src/mjs_util.h
+++ b/src/mjs_util.h
@@ -16,8 +16,11 @@ extern "C" {
 
 struct mjs_bcode_part;
 
+#if MJS_ENABLE_DEBUG
 MJS_PRIVATE const char *opcodetostr(uint8_t opcode);
 MJS_PRIVATE size_t mjs_disasm_single(const uint8_t *code, size_t i);
+#endif
+
 MJS_PRIVATE const char *mjs_stringify_type(enum mjs_type t);
 
 /*
