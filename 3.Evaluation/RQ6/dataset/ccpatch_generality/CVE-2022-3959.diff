diff --git a/lib/inc/drogon/HttpRequest.h b/lib/inc/drogon/HttpRequest.h
--- a/lib/inc/drogon/HttpRequest.h
+++ b/lib/inc/drogon/HttpRequest.h
@@ -148,21 +148,18 @@
     virtual const std::string &getCookie(const std::string &field) const = 0;
 
     /// Get all headers of the request
-    virtual const std::unordered_map<std::string, std::string> &headers()
-        const = 0;
+    virtual const std::unordered_map<std::string, std::string, utils::internal::SafeStringHash> &headers() const = 0;
 
     /// Get all headers of the request
-    const std::unordered_map<std::string, std::string> &getHeaders() const
+    const std::unordered_map<std::string, std::string, utils::internal::SafeStringHash> &getHeaders() const
     {
         return headers();
     }
 
     /// Get all cookies of the request
-    virtual const std::unordered_map<std::string, std::string> &cookies()
-        const = 0;
+    virtual const std::unordered_map<std::string, std::string, utils::internal::SafeStringHash> &cookies() const = 0;
 
     /// Get all cookies of the request
-    const std::unordered_map<std::string, std::string> &getCookies() const
+    const std::unordered_map<std::string, std::string, utils::internal::SafeStringHash> &getCookies() const
     {
         return cookies();
     }
@@ -267,11 +264,10 @@
     }
 
     /// Get parameters of the request.
-    virtual const std::unordered_map<std::string, std::string> &parameters()
-        const = 0;
+    virtual const std::unordered_map<std::string, std::string, utils::internal::SafeStringHash> &parameters() const = 0;
 
     /// Get parameters of the request.
-    const std::unordered_map<std::string, std::string> &getParameters() const
+    const std::unordered_map<std::string, std::string, utils::internal::SafeStringHash> &getParameters() const
     {
         return parameters();
diff --git a/lib/inc/drogon/HttpResponse.h b/lib/inc/drogon/HttpResponse.h
--- a/lib/inc/drogon/HttpResponse.h
+++ b/lib/inc/drogon/HttpResponse.h
@@ -191,14 +191,12 @@
     virtual void removeHeader(std::string key) = 0;
 
     /// Get all headers of the response
-    virtual const std::unordered_map<std::string, std::string> &headers()
-        const = 0;
+    virtual const std::unordered_map<std::string, std::string, utils::internal::SafeStringHash> &headers() const = 0;
 
     /// Get all headers of the response
-    const std::unordered_map<std::string, std::string> &getHeaders() const
+    const std::unordered_map<std::string, std::string, utils::internal::SafeStringHash> &getHeaders() const
     {
         return headers();
     }
 
@@ -226,10 +224,10 @@
     virtual const Cookie &getCookie(const std::string &key) const = 0;
 
     /// Get all cookies.
-    virtual const std::unordered_map<std::string, Cookie> &cookies() const = 0;
+    virtual const std::unordered_map<std::string, Cookie, utils::internal::SafeStringHash> &cookies() const = 0;
 
     /// Get all cookies.
-    const std::unordered_map<std::string, Cookie> &getCookies() const
+    const std::unordered_map<std::string, Cookie, utils::internal::SafeStringHash> &getCookies() const
     {
         return cookies();
diff --git a/lib/inc/drogon/utils/Utilities.h b/lib/inc/drogon/utils/Utilities.h
--- a/lib/inc/drogon/utils/Utilities.h
+++ b/lib/inc/drogon/utils/Utilities.h
@@ -408,5 +408,22 @@
     }
     throw std::runtime_error("Can't convert from string '" + p + "' to bool");
 }
+
+namespace internal
+{
+DROGON_EXPORT extern const size_t fixedRandomNumber;
+struct SafeStringHash
+{
+    size_t operator()(const std::string &str) const
+    {
+        const size_t A = 6665339;
+        const size_t B = 2534641;
+        size_t h = fixedRandomNumber;
+        for (char ch : str)
+            h = (h * A) ^ (ch * B);
+        return h;
+    }
+};
+}  // namespace internal
 }  // namespace utils
diff --git a/lib/src/HttpRequestImpl.h b/lib/src/HttpRequestImpl.h
--- a/lib/src/HttpRequestImpl.h
+++ b/lib/src/HttpRequestImpl.h
@@ -137,8 +137,7 @@
         pathEncode_ = pathEncode;
     }
 
-    const std::unordered_map<std::string, std::string> &parameters()
-        const override
+    const std::unordered_map<std::string, std::string, utils::internal::SafeStringHash> &parameters() const override
     {
         parseParametersOnce();
         return parameters_;
@@ -292,14 +291,14 @@
         return defaultVal;
     }
 
-    const std::unordered_map<std::string, std::string> &headers() const override
+    const std::unordered_map<std::string, std::string, utils::internal::SafeStringHash> &headers() const override
     {
         return headers_;
     }
 
-    const std::unordered_map<std::string, std::string> &cookies() const override
+    const std::unordered_map<std::string, std::string, utils::internal::SafeStringHash> &cookies() const override
     {
         return cookies_;
     }
 
@@ -541,9 +540,9 @@
     bool pathEncode_{true};
     string_view matchedPathPattern_{""};
     std::string query_;
-    std::unordered_map<std::string, std::string> headers_;
-    std::unordered_map<std::string, std::string> cookies_;
-    mutable std::unordered_map<std::string, std::string> parameters_;
+    std::unordered_map<std::string, std::string, utils::internal::SafeStringHash> headers_;
+    std::unordered_map<std::string, std::string, utils::internal::SafeStringHash> cookies_;
+    mutable std::unordered_map<std::string, std::string, utils::internal::SafeStringHash> parameters_;
     mutable std::shared_ptr<Json::Value> jsonPtr_;
     SessionPtr sessionPtr_;
diff --git a/lib/src/HttpResponseImpl.h b/lib/src/HttpResponseImpl.h
--- a/lib/src/HttpResponseImpl.h
+++ b/lib/src/HttpResponseImpl.h
@@ -130,7 +130,7 @@
         removeHeaderBy(key);
     }
 
-    const std::unordered_map<std::string, std::string> &headers() const override
+    const std::unordered_map<std::string, std::string, utils::internal::SafeStringHash> &headers() const override
     {
         return headers_;
     }
@@ -202,7 +202,7 @@
         return defaultCookie;
     }
 
-    const std::unordered_map<std::string, Cookie> &cookies() const override
+    const std::unordered_map<std::string, Cookie, utils::internal::SafeStringHash> &cookies() const override
     {
         return cookies_;
     }
@@ -450,8 +450,8 @@
         statusMessage_ = string_view{message, messageLength};
     }
 
-    std::unordered_map<std::string, std::string> headers_;
-    std::unordered_map<std::string, Cookie> cookies_;
+    std::unordered_map<std::string, std::string, utils::internal::SafeStringHash> headers_;
+    std::unordered_map<std::string, Cookie, utils::internal::SafeStringHash> cookies_;
 
     int customStatusCode_{-1};
diff --git a/lib/src/Utilities.cc b/lib/src/Utilities.cc
--- a/lib/src/Utilities.cc
+++ b/lib/src/Utilities.cc
@@ -1221,5 +1221,14 @@
     return false;
 }
 
+namespace internal
+{
+DROGON_EXPORT const size_t fixedRandomNumber = []() {
+    size_t res;
+    utils::secureRandomBytes(&res, sizeof(res));
+    return res;
+}();
+}
+
 }  // namespace utils
 }  // namespace drogon