diff --git a/libpeconv/include/peconv/buffer_util.h b/libpeconv/include/peconv/buffer_util.h
index XXXXXXX..XXXXXXX 100644
--- a/libpeconv/include/peconv/buffer_util.h
+++ b/libpeconv/include/peconv/buffer_util.h
@@ -26,9 +26,9 @@ namespace peconv {
     */
     bool validate_ptr(
         IN const void* buffer_bgn, 
-        IN SIZE_T buffer_size,
+        IN size_t buffer_size,
         IN const void* field_bgn,
-        IN SIZE_T field_size
+        IN size_t field_size
     );
 
diff --git a/libpeconv/src/buffer_util.cpp b/libpeconv/src/buffer_util.cpp
index XXXXXXX..XXXXXXX 100644
--- a/libpeconv/src/buffer_util.cpp
+++ b/libpeconv/src/buffer_util.cpp
@@ -6,21 +6,25 @@
 // validate pointer:
 //
 
-bool peconv::validate_ptr(IN const void* buffer_bgn, IN SIZE_T buffer_size, IN const void* field_bgn, IN SIZE_T field_size)
+bool peconv::validate_ptr(IN const void* buffer_bgn, IN size_t buffer_size, IN const void* field_bgn, IN size_t field_size)
 {
     if (buffer_bgn == nullptr || field_bgn == nullptr) {
         return false;
     }
     BYTE* _start = (BYTE*)buffer_bgn;
-    BYTE* _end = _start + buffer_size;
-
     BYTE* _field_start = (BYTE*)field_bgn;
-    BYTE* _field_end = (BYTE*)field_bgn + field_size;
-
     if (_field_start < _start) {
         return false;
     }
-    if (_field_end > _end) {
+    size_t start_delta =  (ULONG_PTR)_field_start - (ULONG_PTR)_start;
+    size_t area_size = start_delta + field_size;
+    if (area_size > buffer_size) {
+        return false;
+    }
+    if (area_size < field_size || area_size < start_delta) {
+#ifdef _DEBUG
+        std::cout << "Integer Overflow, limit exceeded! start_delta: " << start_delta << " field_size: " << field_size << " area_size: " << area_size << "\n";
+#endif
         return false;
     }
diff --git a/libpeconv/src/pe_raw_to_virtual.cpp b/libpeconv/src/pe_raw_to_virtual.cpp
index XXXXXXX..XXXXXXX 100644
--- a/libpeconv/src/pe_raw_to_virtual.cpp
+++ b/libpeconv/src/pe_raw_to_virtual.cpp
@@ -49,7 +49,7 @@ bool sections_raw_to_virtual(IN const BYTE* payload, IN SIZE_T payloadSize, OUT
         }
         LPVOID section_mapped = destBuffer + next_sec->VirtualAddress;
         LPVOID section_raw_ptr = (BYTE*)payload +  next_sec->PointerToRawData;
-        SIZE_T sec_size = next_sec->SizeOfRawData;
+        size_t sec_size = next_sec->SizeOfRawData;
         raw_end = next_sec->SizeOfRawData + next_sec->PointerToRawData;
         
         if ((next_sec->VirtualAddress + sec_size) > destBufferSize) {
