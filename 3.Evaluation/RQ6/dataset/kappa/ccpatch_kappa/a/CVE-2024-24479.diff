diff --git a/wsutil/to_str.c b/wsutil/to_str.c
--- a/wsutil/to_str.c
+++ b/wsutil/to_str.c
@@ -653,12 +653,17 @@ eui64_to_str(wmem_allocator_t *scope, const guint64 ad) {
 #define CHARS_NANOSECONDS	9	/* 000000001 */
 
 /*
- * Format the fractonal part of a time, with the specified precision)
+ * Format the fractional part of a time, with the specified precision.
+ * Returns the number of bytes formatted.
  */
-void
+int
 format_fractional_part_nsecs(gchar *buf, size_t buflen, guint32 nsecs, const char *decimal_point, int precision)
 {
+	gchar *ptr;
+	size_t remaining;
+	int num_bytes;
 	gsize decimal_point_len;
+	guint32 frac_part;
 	gint8 num_buf[CHARS_NANOSECONDS];
 	gint8 *num_end = &num_buf[CHARS_NANOSECONDS];
 	gint8 *num_ptr;
@@ -671,22 +671,40 @@
         * a terminating '\0'.
         */
-       return;
+       return 0;
+   }
+
+   /*
+    * If the fractional part is >= 1, don't show it as a
+    * fractional part.
+    */
+   if (nsecs >= 1000000000U) {
+       num_bytes = snprintf(buf, buflen, "%s(%u nanoseconds)",
+           decimal_point, nsecs);
+       if ((unsigned int)num_bytes >= buflen) {
+           return (int)(buflen - 1);
+       }
+       return num_bytes;
    }
 
+   ptr = buf;
+   remaining = buflen;
+
    decimal_point_len = g_strlcpy(buf, decimal_point, buflen);
    if (decimal_point_len >= buflen) {
-       return;
+       return (int)(buflen - 1);
    }
-   buf += decimal_point_len;
-   buflen -= decimal_point_len;
+   ptr += decimal_point_len;
+   remaining -= decimal_point_len;
 
-   num_len = MIN((size_t)(num_end - num_ptr), buflen - 1);
+   num_len = MIN((size_t)(num_end - num_ptr), remaining - 1);
    if (num_len == 0) {
-       return;
+       return num_bytes;
    }
 
-   memcpy(buf, num_ptr, num_len);
-   *(buf + num_len) = '\0';
+   memcpy(ptr, num_ptr, num_len);
+   ptr += num_len;
+   *ptr = '\0';
+   return num_bytes;
 }
 
 void
@@ -934,7 +952,7 @@
        return;
    }
 
-   if (precision == 0) {
-       return;
-   }
+   format_fractional_part_nsecs(ptr, remaining, (guint32)ns->nsecs, decimal_point, precision);
+}
 
-   format_fractional_part_nsecs(ptr, buf_remaining, (guint32)ns->nsecs, decimal_point, precision);
+/* Remaining function implementations */
