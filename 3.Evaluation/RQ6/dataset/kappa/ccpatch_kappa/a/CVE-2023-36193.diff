diff --git a/src/clp.c b/src/clp.c
--- a/src/clp.c
+++ b/src/clp.c
@@ -167,6 +167,7 @@
     unsigned iprefmatch : 1;
     unsigned lmmpos_short : 1;
     unsigned lmmneg_short : 1;
+    unsigned unquoted : 1;
     unsigned char ilongoff;
     int lmmpos;
     int lmmneg;
@@ -1237,6 +1238,13 @@
     clsl->allow_int = (flags & Clp_AllowNumbers) != 0;
     clsl->val_long = (flags & Clp_StringListLong) != 0;
 
+    memset(iopt, 0, sizeof(Clp_InternOption) * niitems);
+    for (i = 0; i < niitems; i++) {
+        iopt[i].ilong = iopt[i].ipos = 1;
+        iopt[i].ishort = iopt[i].ineg = iopt[i].ilongoff = iopt[i].iprefmatch = iopt[i].unquoted = 0;
+    }
+    calculate_lmm(clp, items, iopt, nitems);
+
     if (nitems < MAX_AMBIGUOUS_VALUES && nitems < itemscap && clsl->allow_int) {
         items[nitems].long_name = "any integer";
         clsl->nitems_invalid_report = nitems + 1;
@@ -1245,12 +1253,6 @@
     else
         clsl->nitems_invalid_report = nitems;
 
-    for (i = 0; i < nitems; i++) {
-        iopt[i].ilong = iopt[i].ipos = 1;
-        iopt[i].ishort = iopt[i].ineg = iopt[i].ilongoff = iopt[i].iprefmatch = 0;
-    }
-    calculate_lmm(clp, items, iopt, nitems);
-
     if (Clp_AddType(clp, val_type, 0, parse_string_list, clsl) >= 0)
         return 0;
 
@@ -2393,11 +2395,13 @@
             append_build_string(&bs, (i == 1 ? " and " : ", and "), -1);
         else
             append_build_string(&bs, ", ", 2);
-        append_build_string(&bs, (cli->utf8 ? "\342\200\230" : "'"), -1);
+        if (!iopt[value].unquoted)
+            append_build_string(&bs, (cli->utf8 ? "\342\200\230" : "'"), -1);
         append_build_string(&bs, prefix, -1);
         append_build_string(&bs, no_dash, -1);
         append_build_string(&bs, opt[value].long_name + iopt[value].ilongoff, -1);
-        append_build_string(&bs, (cli->utf8 ? "\342\200\231" : "'"), -1);
+        if (!iopt[value].unquoted)
+            append_build_string(&bs, (cli->utf8 ? "\342\200\231" : "'"), -1);
     }
 
     if (ambiguous > MAX_AMBIGUOUS_VALUES)
