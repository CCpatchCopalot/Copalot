diff --git a/res/res_pjsip/pjsip_transport_events.c b/res/res_pjsip/pjsip_transport_events.c
--- a/res/res_pjsip/pjsip_transport_events.c
+++ b/res/res_pjsip/pjsip_transport_events.c
@@ -560,71 +560,6 @@
 	return 0;
 }
 
-static char *cli_show_monitors(struct ast_cli_entry *e, int cmd, struct ast_cli_args *a)
-{
-	char *cli_rc = CLI_FAILURE;
-	int rc = 0;
-	int using_regex = 0;
-	regex_t regex = { 0, };
-	int container_count;
-	struct ao2_iterator iter;
-	struct ao2_container *sorted_monitors = NULL;
-	struct ao2_container *transports;
-	struct transport_monitor *monitored;
-
-	switch (cmd) {
-	case CLI_INIT:
-		e->command = "pjsip show transport-monitors";
-		e->usage = "Usage: pjsip show transport-monitors [ like <pattern> ]\n"
-			            "      Show pjsip transport monitors\n";
-		return NULL;
-	case CLI_GENERATE:
-		return NULL;
-	}
-
-	if (a->argc != 3 && a->argc != 5) {
-		return CLI_SHOWUSAGE;
-	}
-
-	if (a->argc == 5) {
-		int regrc;
-		if (strcasecmp(a->argv[3], "like")) {
-			return CLI_SHOWUSAGE;
-		}
-		regrc = regcomp(&regex, a->argv[4], REG_EXTENDED | REG_ICASE | REG_NOSUB);
-		if (regrc) {
-			char err[256];
-			regerror(regrc, &regex, err, 256);
-			ast_cli(a->fd, "PJSIP Transport Monitor: Error: %s\n", err);
-			return CLI_FAILURE;
-		}
-		using_regex = 1;
-	}
-
-	/* Get a sorted snapshot of the scheduled tasks */
-	sorted_monitors = ao2_container_alloc_rbtree(AO2_ALLOC_OPT_LOCK_NOLOCK, 0,
-		transport_monitor_sort_fn, NULL);
-	if (!sorted_monitors) {
-		ast_cli(a->fd, "PJSIP Transport Monitor: Unable to allocate temporary container\n");
-		goto error;
-	}
-
-	transports = ao2_global_obj_ref(active_transports);
-	if (!transports) {
-		ast_cli(a->fd, "PJSIP Transport Monitor: Unable to get transports\n");
-		goto error;
-	}
-
-	ao2_lock(transports);
-	rc = ao2_container_dup(sorted_monitors, transports, 0);
-	ao2_unlock(transports);
-	ao2_ref(transports, -1);
-	if (rc != 0) {
-		ast_cli(a->fd, "PJSIP Transport Monitors: Unable to sort temporary container\n");
-		goto error;
-	}
-	container_count = ao2_container_count(sorted_monitors);
-
-	ast_cli(a->fd, "PJSIP Transport Monitors:\n\n");
-
-	ast_cli(a->fd,
-		"<Remote Host...................................> <State.....> <Direction> <RefCnt> <Monitors> <ObjName............>\n");
-
-	iter = ao2_iterator_init(sorted_monitors, AO2_ITERATOR_UNLINK);
-	for (; (monitored = ao2_iterator_next(&iter)); ao2_ref(monitored, -1)) {
-		char *state;
-
-		if (using_regex && regexec(&regex, monitored->key, 0, NULL, 0) == REG_NOMATCH) {
-			continue;
-		}
-
-		if (monitored->transport->is_destroying) {
-			state = "DESTROYING";
-		} else if (monitored->transport->is_shutdown) {
-			state = "SHUTDOWN";
-		} else {
-			state = "ACTIVE";
-		}
-
-		ast_cli(a->fd, " %-46.46s   %-10s   %-9s   %6ld   %8" PRIu64 "   %s\n",
-			monitored->key, state,
-			monitored->transport->dir == PJSIP_TP_DIR_OUTGOING ? "Outgoing" : "Incoming",
-			pj_atomic_get(monitored->transport->ref_cnt),
-			AST_VECTOR_SIZE(&monitored->monitors), monitored->transport->obj_name);
-	}
-	ao2_iterator_destroy(&iter);
-	ast_cli(a->fd, "\nTotal Transport Monitors: %d\n\n", container_count);
-	cli_rc = CLI_SUCCESS;
-error:
-	if (using_regex) {
-		regfree(&regex);
-	}
-	ao2_cleanup(sorted_monitors);
-
-	return cli_rc;
-}
-
-static struct ast_cli_entry cli_commands[] = {
-	AST_CLI_DEFINE(cli_show_monitors, "Show pjsip transport monitors"),
-};
-
 void ast_sip_destroy_transport_events(void)
 {
 	pjsip_tpmgr *tpmgr;
 
-	ast_cli_unregister_multiple(cli_commands, ARRAY_LEN(cli_commands));
-
 	tpmgr = pjsip_endpt_get_tpmgr(ast_sip_get_pjsip_endpoint());
 	if (tpmgr) {
 		pjsip_tpmgr_set_state_cb(tpmgr, tpmgr_state_callback);
@@ -704,8 +639,6 @@
 	tpmgr_state_callback = pjsip_tpmgr_get_state_cb(tpmgr);
 	pjsip_tpmgr_set_state_cb(tpmgr, &transport_state_callback);
 
-	ast_cli_register_multiple(cli_commands, ARRAY_LEN(cli_commands));
-
-
 	return 0;
 }
diff --git a/res/res_pjsip_pubsub.c b/res/res_pjsip_pubsub.c
--- a/res/res_pjsip_pubsub.c
+++ b/res/res_pjsip_pubsub.c
@@ -389,8 +389,8 @@
 	char src_name[PJ_INET6_ADDRSTRLEN];
 	/*! Source port of the message */
 	int src_port;
-	/*! Local transport type (UDP,TCP,TLS)*/
-	char transport_type[32];
+	/*! Local transport key type */
+	char transport_key[32];
 	/*! Local transport address */
 	char local_name[PJ_INET6_ADDRSTRLEN];
 	/*! Local transport port */
@@ -474,7 +474,7 @@
 	/*! The transport the subscription was received on.
 	 * Only used for reliable transports.
 	 */
-	char transport_key[IP6ADDR_COLON_PORT_BUFLEN];
+	pjsip_transport *transport;
 	/*! Indicator if initial notify should be generated.
 	 * Used to refresh modified RLS.
 	 */
@@ -747,8 +747,8 @@
 		ast_copy_string(sub_tree->persistence->src_name, rdata->pkt_info.src_name,
 				sizeof(sub_tree->persistence->src_name));
 		sub_tree->persistence->src_port = rdata->pkt_info.src_port;
-		ast_copy_string(sub_tree->persistence->transport_type, rdata->tp_info.transport->type_name,
-			sizeof(sub_tree->persistence->transport_type));
+		ast_copy_string(sub_tree->persistence->transport_key, rdata->tp_info.transport->type_name,
+			sizeof(sub_tree->persistence->transport_key));
 		ast_copy_pj_str(sub_tree->persistence->local_name, &rdata->tp_info.transport->local_name.host,
 			sizeof(sub_tree->persistence->local_name));
 		sub_tree->persistence->local_port = rdata->tp_info.transport->local_name.port;
@@ -764,12 +764,12 @@
 		return;
 	}
 
-	if (sub_tree->persistence->prune_on_boot && !ast_strlen_zero(sub_tree->transport_key)) {
+	if (sub_tree->persistence->prune_on_boot && sub_tree->transport) {
 		ast_debug(3, "Unregistering transport monitor on %s '%s->%s'\n",
-			sub_tree->transport_key,
+			sub_tree->transport->obj_name,
 			sub_tree->endpoint ? ast_sorcery_object_get_id(sub_tree->endpoint) : "Unknown",
 			sub_tree->root ? sub_tree->root->resource : "Unknown");
-		ast_sip_transport_monitor_unregister_key(sub_tree->transport_key,
+		ast_sip_transport_monitor_unregister(sub_tree->transport,
 			sub_tree_transport_cb, sub_tree, NULL);
 	}
 
@@ -1744,7 +1744,7 @@
 	rdata.tp_info.pool = pool;
 
 	if (ast_sip_create_rdata_with_contact(&rdata, persistence->packet, persistence->src_name,
-		persistence->src_port, persistence->transport_type, persistence->local_name,
+		persistence->src_port, persistence->transport_key, persistence->local_name,
 		persistence->local_port, persistence->contact_uri)) {
 		ast_log(LOG_WARNING, "Failed recreating '%s' subscription: The message could not be parsed\n",
 			persistence->endpoint);
@@ -5760,7 +5760,7 @@
 	ast_sorcery_object_field_register(sorcery, "subscription_persistence", "src_port", "0", OPT_UINT_T, 0,
 		FLDSET(struct subscription_persistence, src_port));
 	ast_sorcery_object_field_register(sorcery, "subscription_persistence", "transport_key", "0", OPT_CHAR_ARRAY_T, 0,
-		CHARFLDSET(struct subscription_persistence, transport_type));
+		CHARFLDSET(struct subscription_persistence, transport_key));
 	ast_sorcery_object_field_register(sorcery, "subscription_persistence", "local_name", "", OPT_CHAR_ARRAY_T, 0,
 		CHARFLDSET(struct subscription_persistence, local_name));
 	ast_sorcery_object_field_register(sorcery, "subscription_persistence", "local_port", "0", OPT_UINT_T, 0,
