diff --git a/pdfio-stream.c b/pdfio-stream.c
index 45a21b0..2c6399a 100644
--- a/pdfio-stream.c
+++ b/pdfio-stream.c
@@ -1060,11 +1060,19 @@ stream_read(pdfio_stream_t *st,		// I - Stream
       st->flate.next_out  = (Bytef *)buffer;
       st->flate.avail_out = (uInt)bytes;
 
+      avail_in  = st->flate.avail_in;
+      avail_out = st->flate.avail_out;
+
       if ((status = inflate(&(st->flate), Z_NO_FLUSH)) < Z_OK)
       {
 	_pdfioFileError(st->pdf, "Unable to decompress stream data: %s", zstrerror(status));
 	return (-1);
       }
+      else if (avail_in == st->flate.avail_in && avail_out == st->flate.avail_out)
+      {
+	_pdfioFileError(st->pdf, "Corrupt stream data.");
+	return (-1);
+      }
 
       return (st->flate.next_out - (Bytef *)buffer);
     }
@@ -1113,12 +1121,15 @@ stream_read(pdfio_stream_t *st,		// I - Stream
 	  st->flate.avail_in = (uInt)rbytes;
 	}
 
+        avail_in  = st->flate.avail_in;
+        avail_out = st->flate.avail_out;
+
 	if ((status = inflate(&(st->flate), Z_NO_FLUSH)) < Z_OK)
 	{
 	  _pdfioFileError(st->pdf, "Unable to decompress stream data: %s", zstrerror(status));
 	  return (-1);
 	}
-	else if (status == Z_STREAM_END)
+	else if (status == Z_STREAM_END || (avail_in == st->flate.avail_in && avail_out == st->flate.avail_out))
 	  break;
       }
 
@@ -1180,12 +1191,15 @@ stream_read(pdfio_stream_t *st,		// I - Stream
 	  st->flate.avail_in = (uInt)rbytes;
 	}
 
+        avail_in  = st->flate.avail_in;
+        avail_out = st->flate.avail_out;
+
 	if ((status = inflate(&(st->flate), Z_NO_FLUSH)) < Z_OK)
 	{
 	  _pdfioFileError(st->pdf, "Unable to decompress stream data: %s", zstrerror(status));
 	  return (-1);
 	}
-	else if (status == Z_STREAM_END)
+	else if (status == Z_STREAM_END || (avail_in == st->flate.avail_in && avail_out == st->flate.avail_out))
 	  break;
       }
 