diff --git a/source/common/header.cc b/source/common/header.cc
--- a/source/common/header.cc
+++ b/source/common/header.cc
@@ -53,6 +53,16 @@
 extern const int8_t *tab_DL_Avails[MAX_CU_SIZE_IN_BIT + 1];
 extern const int8_t *tab_TR_Avails[MAX_CU_SIZE_IN_BIT + 1];
 
+/* ---------------------------------------------------------------------------
+ */
+#define DAVS2_MAX_FRAME_RATE_CODE 13
+static const float FRAME_RATE[DAVS2_MAX_FRAME_RATE_CODE] = {
+    24000.0f / 1001.0f, 24.0f, 25.0f, 30000.0f / 1001.0f, 30.0f, 50.0f, 60000.0f / 1001.0f, 60.0f,
+    100.0f, 120.0f, 200.0f, 240.0f, 300.0f
+};
+
+/* ---------------------------------------------------------------------------
+ */
 static const uint8_t ALPHA_TABLE[64] = {
      0,  0,  0,  0,  0,  0,  1,  1,
      1,  1,  1,  2,  2,  2,  3,  3,
@@ -118,10 +128,7 @@
 static
 int parse_sequence_header(davs2_mgr_t *mgr, davs2_seq_t *seq, davs2_bs_t *bs)
 {
-    static const float FRAME_RATE[8] = {
-        24000.0f / 1001.0f, 24.0f, 25.0f, 30000.0f / 1001.0f, 30.0f, 50.0f, 60000.0f / 1001.0f, 60.0f
-    };
-    rps_t *p_rps      = NULL;
+    rps_t *p_rps = NULL;
 
     int i, j;
     int num_of_rps;
@@ -265,6 +272,12 @@
 
     bs_align(bs); /* align position */
 
+    if (seq->head.frame_rate_id < 1 || seq->head.frame_rate_id > DAVS2_MAX_FRAME_RATE_CODE) {
+        davs2_log(mgr, DAVS2_LOG_ERROR, "Invalid frame_rate_code %d, valid range [1, %d].\n",
+            seq->head.frame_rate_id, DAVS2_MAX_FRAME_RATE_CODE);
+        seq->head.frame_rate_id = DAVS2_CLIP3(1, DAVS2_MAX_FRAME_RATE_CODE, seq->head.frame_rate_id);
+    }
+
     seq->head.bitrate    = ((seq->bit_rate_upper << 18) + seq->bit_rate_lower) * 400;
     seq->head.frame_rate = FRAME_RATE[seq->head.frame_rate_id - 1];
 

The vulnerability fix addresses a global buffer overflow in `parse_sequence_header()` by:
1. Expanding the `FRAME_RATE` array size from 8 to 13 elements
2. Moving the array from local static to global scope with proper size definition
3. Adding bounds checking for `frame_rate_id` to ensure it stays within valid range (1-13)
4. Clamping invalid values to prevent out-of-bounds access

These changes prevent the buffer overflow by ensuring array index validity before accessing the global `FRAME_RATE` array.