diff --git a/src/jsiArray.c b/src/jsiArray.c
index 94dd1b3..298ec75 100644
--- a/src/jsiArray.c
+++ b/src/jsiArray.c
@@ -7,6 +7,12 @@
 #define NO_QSORT_R 1
 #endif
 
+static uint jsi_SizeOfArray(Jsi_Interp *interp, Jsi_Obj *obj) {
+    if (!obj || !obj->arr)
+        return 0;
+    return obj->arrCnt;
+}
+
 static Jsi_RC jsi_ArrayPushCmd(Jsi_Interp *interp, Jsi_Value *args, Jsi_Value *_this,
     Jsi_Value **ret, Jsi_Func *funcPtr)
 {
@@ -19,11 +25,7 @@ static Jsi_RC jsi_ArrayPushCmd(Jsi_Interp *interp, Jsi_Value *args, Jsi_Value *_
     obj = _this->d.obj;
     
     int argc = Jsi_ValueGetLength(interp, args);
-    int curlen = Jsi_ObjGetLength(interp, obj);
-    if (curlen < 0) {
-        Jsi_ObjSetLength(interp, obj, 0);
-    }
-    
+    int curlen = jsi_SizeOfArray(interp, obj);    
     int i;
     for (i = 0; i < argc; ++i) {
         Jsi_Value *ov = Jsi_ValueArrayIndex(interp, args, i);
@@ -31,7 +33,7 @@ static Jsi_RC jsi_ArrayPushCmd(Jsi_Interp *interp, Jsi_Value *args, Jsi_Value *_
         Jsi_ValueInsertArray(interp, _this, curlen + i, ov, 0);
     }
     
-    Jsi_ValueMakeNumber(interp, ret, Jsi_ObjGetLength(interp, obj));
+    Jsi_ValueMakeNumber(interp, ret, jsi_SizeOfArray(interp, obj));
     return JSI_OK;
 }
 
@@ -1166,7 +1168,7 @@ static Jsi_RC jsi_ArraySpliceCmd(Jsi_Interp *interp, Jsi_Value *args, Jsi_Value
     }
     
     if (curlen < 0) {
-        Jsi_ObjSetLength(interp, obj, 0);
+        Jsi_ObjSetLength(interp, obj, curlen=0);
     }
     Jsi_ObjListifyArray(interp, obj);