diff --git a/src/jsi.h b/src/jsi.h
index 19b4d59..ba55da4 100644
--- a/src/jsi.h
+++ b/src/jsi.h
@@ -213,7 +213,7 @@ typedef enum {
     JSI_DBI_NO_MUTEX     =0x0004, /* Disable mutex. */
     JSI_DBI_FULL_MUTEX   =0x0008, /* Use full mutex. */
     
-    JSI_MAX_NUMBER_STRING=50,
+    JSI_MAX_NUMBER_STRING=100,
     JSI_BUFSIZ=8192
 
diff --git a/src/jsiNumber.c b/src/jsiNumber.c
index 2326369..c493bcc 100644
--- a/src/jsiNumber.c
+++ b/src/jsiNumber.c
@@ -141,14 +141,14 @@ static Jsi_RC NumberToPrecisionCmd(Jsi_Interp *interp, Jsi_Value *args, Jsi_Valu
     Jsi_Value *v;
     ChkStringN(_this, funcPtr, v);
     if (Jsi_GetIntFromValue(interp, Jsi_ValueArrayIndex(interp, args, skip), &prec) != JSI_OK)
         return JSI_ERROR;
-    if (prec<=0) return JSI_ERROR;
+    if (prec<=0 || prec>JSI_MAX_NUMBER_STRING) return Jsi_LogError("precision must be between 1 and %d", JSI_MAX_NUMBER_STRING);
     Jsi_GetDoubleFromValue(interp, v, &num);
     snprintf(buf, sizeof(buf),"%.*" JSI_NUMFFMT, prec, num);
     if (num<0)
         memmove(buf, buf+1, sizeof(buf)-1); //TODO: fix negative numbers
     Jsi_ValueMakeStringDup(interp, ret, buf);
     return JSI_OK;
 }
 
 static Jsi_RC NumberToExponentialCmd(Jsi_Interp *interp, Jsi_Value *args, Jsi_Value *_this,
     Jsi_Value **ret, Jsi_Func *funcPtr)