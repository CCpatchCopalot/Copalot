diff --git a/hphp/runtime/ext/fb/FBSerialize/FBSerialize-inl.h b/hphp/runtime/ext/fb/FBSerialize/FBSerialize-inl.h
--- a/hphp/runtime/ext/fb/FBSerialize/FBSerialize-inl.h
+++ b/hphp/runtime/ext/fb/FBSerialize/FBSerialize-inl.h
@@ -406,7 +406,7 @@
   folly::StringPiece serialized) {
 
   FBUnserializer<V> unserializer(serialized);
-  return unserializer.unserializeThing();
+  return unserializer.unserializeThing(0);
 }
 
 template <class V>
@@ -665,7 +665,12 @@
 }
 
 template <class V>
-inline typename V::VariantType FBUnserializer<V>::unserializeThing() {
+inline typename V::VariantType
+FBUnserializer<V>::unserializeThing(size_t depth) {
+  if (UNLIKELY(depth > 1024)) {
+    throw UnserializeError("depth > 1024");
+  }
+
   size_t code = nextCode();
 
diff --git a/hphp/runtime/ext/fb/ext_fb.cpp b/hphp/runtime/ext/fb/ext_fb.cpp
--- a/hphp/runtime/ext/fb/ext_fb.cpp
+++ b/hphp/runtime/ext/fb/ext_fb.cpp
@@ -705,7 +705,10 @@
 const StaticString s_empty("");
 
 int fb_compact_unserialize_from_buffer(
-  Variant& out, const char* buf, int n, int& p) {
+    Variant& out, const char* buf, int n, int& p, size_t depth) {
+  if (UNLIKELY(depth > 1024)) {
+    return FB_UNSERIALIZE_MAX_DEPTH_EXCEEDED;
+  }
 
   CHECK_ENOUGH(1, p, n);
   int code = (unsigned char)buf[p];