diff --git a/Unreal/CarlaUE4/Plugins/Carla/Source/Carla/Sensor/CollisionSensor.cpp b/Unreal/CarlaUE4/Plugins/Carla/Source/Carla/Sensor/CollisionSensor.cpp
index 473aaa8441d..880b9f72dc1 100644
--- a/Unreal/CarlaUE4/Plugins/Carla/Source/Carla/Sensor/CollisionSensor.cpp
+++ b/Unreal/CarlaUE4/Plugins/Carla/Source/Carla/Sensor/CollisionSensor.cpp
@@ -32,27 +32,37 @@ void ACollisionSensor::SetOwner(AActor *NewOwner)
   Super::SetOwner(NewOwner);
 
   /// @todo Deregister previous owner if there was one.
-
-  if (NewOwner != nullptr)
+  if (IsValid(NewOwner))
   {
-    NewOwner->OnActorHit.AddDynamic(this, &ACollisionSensor::OnCollisionEvent);
+    ACarlaWheeledVehicle* Vehicle = Cast<ACarlaWheeledVehicle>(NewOwner);
+    if(IsValid(Vehicle))
+    {
+      Vehicle->GetMesh()->OnComponentHit.AddDynamic(this, &ACollisionSensor::OnComponentCollisionEvent);
+    }
+    else
+    {
+      AWalkerBase* Walker = Cast<AWalkerBase>(NewOwner);
+      if(IsValid(Walker))
+      {
+        Walker->GetMesh()->OnComponentHit.AddDynamic(this, &ACollisionSensor::OnComponentCollisionEvent);
+      }
+      else
+      {
+        OnActorHit.AddDynamic(this, &ACollisionSensor::OnActorCollisionEvent);
+      }
+    }
   }
-}
-
-void ACollisionSensor::OnCollisionEvent(
-    AActor *Actor,
-    AActor *OtherActor,
-    FVector NormalImpulse,
-    const FHitResult &Hit)
-{
-  if (Actor == nullptr || OtherActor == nullptr)
+  else
   {
-    return;
+    UE_LOG(LogCarla, Log, TEXT("ACollisionSensor::SetOwner New owner is not valid or you are destroying collision sensor") );
   }
+}
 
-  uint64_t CurrentFrame = FCarlaEngine::GetFrameCounter();
+void ACollisionSensor::PrePhysTick(float DeltaSeconds) {
+  Super::PrePhysTick(DeltaSeconds);
 
   // remove all items from previous frames
+  uint64_t CurrentFrame = FCarlaEngine::GetFrameCounter();
   CollisionRegistry.erase(
       std::remove_if(
diff --git a/Unreal/CarlaUE4/Plugins/Carla/Source/Carla/Sensor/CollisionSensor.h b/Unreal/CarlaUE4/Plugins/Carla/Source/Carla/Sensor/CollisionSensor.h
index 215f5bf5d4a..7b0528c3ec2 100644
--- a/Unreal/CarlaUE4/Plugins/Carla/Source/Carla/Sensor/CollisionSensor.h
+++ b/Unreal/CarlaUE4/Plugins/Carla/Source/Carla/Sensor/CollisionSensor.h
@@ -37,6 +37,14 @@ class CARLA_API ACollisionSensor : public ASensor
       FVector NormalImpulse,
       const FHitResult &Hit);
 
+  UFUNCTION(BlueprintCallable, Category="Collision")
+  void OnActorCollisionEvent(
+      AActor *Actor,
+      AActor *OtherActor,
+      FVector NormalImpulse,
+      const FHitResult &Hit);
+
+  UFUNCTION()
   /// Registry that saves all collisions. Used to avoid sending the same collision more than once per frame,
   /// as the collision sensor uses the PhysX substepping tick. Helps with sensor usage and stream overload.
   std::vector<std::tuple<uint64_t, AActor*, AActor*>> CollisionRegistry;